---
title: "Java Classes"
description: "[Slides](classes-slides.html)"
author: "Ludovic Deneuville"
format: 
  html:
    toc: true
    toc-location: left
    toc-depth: 2
  revealjs:
    theme: moon
    footer: "[Home](../../index.html) --- [Classes](classes.html)"
    slide-number: c/t                    ## collapsed/total
    slide-level: 3
    controls: true
    output-file: classes-slides.html
from: markdown+emoji
lightbox: true
---

:construction:

## OOP Principles

::: {.fragment}
- Encapsulation
- Inheritance
- Polymorphism
:::

::: {.notes}
- Encapsulation: Bundling data and methods together
- Inheritance: Deriving new classes from existing ones
- Polymorphism: One interface, multiple behaviors
:::


## A class :bike:

```{.java filename="Bike.java"}
public class Bike {
    // Attributes
    private String color;
    private int speed;
    private boolean pannierRacks;

    // Constructor
    public Bike(String color, boolean pannierRacks) {
        this.color = color;
        this.speed = 0;
        this.pannierRacks = pannierRacks;
    }

    // Method
    public void accelerate(int increment) {
        if (increment > 0) {
            this.speed += increment;
        }
    }

    // Getter
    public int getSpeed() {
        return this.speed;
    }
}
```

## Attributes

```{.java filename="Bike.java"}
public class Bike {
    // Attributes
    private String color;
    private int speed;
    private boolean pannierRacks;

    private static int nbBikes = 0;
```

- static: class attribute

### Reminder : Attributes Accessiblility

| Modifier                | Same Class | Same Package | Subclasses  |  Everywhere   |
|-------------------------|------------|--------------|-------------|---------------|
| public                  | ✅         | ✅          | ✅          | ✅           |
| protected               | ✅         | ✅          | ✅          | ❌           |
| *default* (no modifier) | ✅         | ✅          | ❌          | ❌           |
| private                 | ✅         | ❌          | ❌          | ❌           |



## Constructor

```{.java filename="Bike.java"}
public class Bike {
    public Bike(String color, boolean pannierRacks) {
        this.color = color;
        this.speed = 0;
        this.pannierRacks = pannierRacks;
    }
```

- `this` : Refers to the current object


### Create a Bike Object

```{.java}
Bike greenBike = new Bike("Green", true);
```

- *Bike*: type of the variable 
- *greenBike*: name of the variable
- *new*: Memory allocation
- *Bike(...)*: constructor call

:::{.notes}
- Java only uses positional arguments
- You can create several constructors
:::


### Default Constructor

- If no constructor is provided

```{.java}
Bike myBike = new Bike();
```

- color: *null*
- pannierRacks: *false*

:::{.notes}
- Error if another constructor is provided
:::

## Call a method

```{.java}
// Create a Bike object calling the constructor
Bike greenBike = new Bike("Green", true);

// Call methods
greenBike.accelerate(5);
System.out.println(greenBike.getSpeed());
```

:::{.notes}
- accelerate(int) -> void
- getSpeed() -> int
:::


## Main method

- Entry point
- Generally in a class called *Main*

```{.java}
public static void main(String[] args) {
    // Program logic here
}
```


::: {.notes}
- public:	Makes the method accessible from anywhere (required for JVM to call it)
- static:	Allows calling the method without creating an instance of the class.
- void:	    The method does not return any value.
- main:	    The method name that JVM looks for to start execution.
- String[]: args	Array of command-line arguments passed when running the program
:::



## Inheritance

### Parent class

```{.java filename="Vehicle.java"}
public class Vehicle {
    private String color;
    private int speed;

    public Vehicle(String color) {
        this.color = color;
        this.speed = 0;
    }
```

### Subclass

- `extends`: inherit
- `super()`: constructor of the parent class
- `super.foo()`: method *foo()* of the parent class

```{.java filename="Bike.java"}
public class Bike extends Vehicle {
    private boolean pannierRacks;

    // Constructor
    public Bike(String color) {
        super(color);
        this.pannierRacks = pannierRacks;
    }
```

### Abstract

- abstract classes: cannot be instantiated
- abstract methods: Declared without implementation, must be overridden by subclasses

```{.java filename="Vehicle.java"}
public abstract class Vehicle {
    private String color;
    private int speed;

    public Vehicle(String color) {
        this.color = color;
        this.speed = 0;
    }

    public abstract void honk();  // abstract method to be implemented in subsclasses

    public void accelerate(int increment) {
        this.speed += increment;
    }
```

::: {.notes}
- Is it possible to create a final abstract class?
- Private abstract method?
:::

### Override method

```{.java filename="Bike.java"}
public class Bike extends Vehicle {
    private boolean pannierRacks;

    // Constructor
    public Bike(String color) {
        super(color);
        this.pannierRacks = pannierRacks;
    }

    @Override
    public abstract void honk(){
        System.out.println("Dring")
    }

    @Override
    public void accelerate(int increment) {
        this.speed += increment + 2;
    }
```

::: {.notes}
- Override final method?
:::



## Polymorphism

### Substitution

```{.java filename="Main.java"}
Bike bike1 = new Bike();
Bike bike2 = new Bike();
Scooter scooter1 = new Scooter();
Scooter scooter2 = new Scooter();

List<Vehicle> vehicles = List.of(bike1, bike2, scooter1, scooter2);

// Accelerate all vehicles
for (Vehicle vehicle : vehicles) {
    vehicle.accelerate(10);
}
```

### Overloading

```{.java filename="Bike.java"}
public class Bike extends Vehicle {
    private boolean pannierRacks;

    ...

    public void accelerate(int increment) {
        this.speed += increment;
    }
    
    public void accelerate() {
        this.speed += 5;
    }
        
    public void accelerate(double increment) {
        this.speed += increment.intValue();
    }
```


## JavaDoc

```{.java filename="Bike.java"}
/**
 * Represents a Bike, a type of Vehicle.
 */
public class Bike extends Vehicle {
    private boolean pannierRacks;

    /**
     * Constructs a Bike with the given color
     */
    public Bike(String color) {
        super(color);
        this.pannierRacks = false;
    }

    /**
     * Produces the sound of a bike's honk (dring).
     */
    @Override
    public void honk() {
        System.out.println("Dring");
    }

    /**
     * Accelerates the bike by the given increment, plus an additional 2 units.
     *
     * @param increment The amount to increase the speed by.
     */
    @Override
    public void accelerate(int increment) {
        this.speed += increment + 2;
    }

    /**
     * Checks if the bike has pannier racks.
     *
     * @return true if the bike has pannier racks, false otherwise.
     */
    public boolean hasPannierRacks() {
        return pannierRacks;
    }
```

