---
title: "Introduction"
description: "[Slides](intro-slides.html)"
author: "Ludovic Deneuville"
format: 
  html:
    toc: true
    toc-location: left
    toc-depth: 2
  revealjs:
    theme: moon
    footer: "[Home](../../index.html) --- [Introduction](intro.html)"
    slide-number: c/t                    ## collapsed/total
    slide-level: 3
    controls: true
    output-file: intro-slides.html
from: markdown+emoji
lightbox: true
---


## Introduction to Java

- 6h CM
- 12h TP
- `ludovic.deneuville@ensai.fr`
- office 161
- based on those by Ikko Yamane, Benjamin Girault, Romaric Gaudel, Samuel Toubon and Olivier Levitt



## Objectives



## TP




## Evaluation



## Why Java

### History / Version

- Created in 1991 by James Gosling and Mike Sheridan (Sun Microsystems)
- Java 8 (2014) : Lambda, Stream, Optional
- **Java 17 (2021)**
- Java 21 (2023)




:::{.notes}
- Facebook story
- 2009 Oracle
- 2017 Java 9 -> Modules
- 2018 Java 11
- Java 17 : Sealed Classes, Refactor JDK
:::

### Popular / Mature

- Widely used in all sectors
- Back-end
- Heavily object-oriented



### Portability

- Compiled to bytecode
- Runs on any machine with a JVM
- "Write Once, Run Anywhere"

:::{.notes}
WORA: desktop, servers, smartphones
:::

### Robust / Secure

- Automatic memory management
- Strong Static Typing
- Compile-Time Checks


## Compiler

- Transform java code into bytecode
- Detects syntax and type errors
- Optimization
- `javac MyClass.java` :arrow_right: *MyClass.class*

## JVM

::: {.callout-note title="Definition"}
The Java Virtual Machine (JVM) is the runtime environment for Java programs. It acts as an interpreter between Java code and the operating system.

The JVM :

- Executes bytecode
- Interacts with OS
- Manages Memory (Garbage Collection)
:::


- `java MyClass`

### JVM, JDK, JRE

- JRE: Java Runtime Environment
- JDK: Java Development Kit

| Component | Purpose                                     |
|-----------|---------------------------------------------|
| **JVM**   | Runs Java bytecode                          |
| **JRE**   | Contains JVM + libraries to run Java apps   |
| **JDK**   | Includes JRE + compiler + development tools |




## Java Vs Python

| **Criterion**     | **Java**                    | **Python**                 |  
|-------------------|-----------------------------|----------------------------|  
| **Typing**        | Strongly typed, static      | Strongly typed, dynamic    |  
| **Compilation**   | Compiled into bytecode      | Interpreted                |  
| **Performance**   | Very fast                   | Slower                     |  
| **Syntax**        | Verbose, requires `{}`      | Concise, uses indentation  |  
| **Paradigm**      | Object-oriented             | Multi-paradigm             |  
| **Ecosystem**     | Huge (Spring, Hibernate...) | Large (Django, Flask, Pandas...) |  


:::{.notes}
- Typing: `int x = 10;` vs `x = 10`
- Interpreted: exécution à la volée
- Multi-paradigm (objet, fonctionnel, impératif)
:::



