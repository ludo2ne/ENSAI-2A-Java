---
title: "An API with Spring Boot"
description: "[Slides](spring-slides.html)"
author: "Ludovic Deneuville"
format: 
  html:
    toc: true
    toc-location: left
    toc-depth: 2
  revealjs:
    theme: moon
    footer: "[Home](../../index.html) --- [Spring](spring.html)"
    slide-number: c/t                    ## collapsed/total
    slide-level: 3
    controls: true
    output-file: spring-slides.html
    code-line-numbers: false
from: markdown+emoji
lightbox: true
mermaid:
  theme: neutral
---


## Spring

:::{.notes}
:construction:

- <https://rules.sonarsource.com/java/>
- APi Java <https://ensai-school.github.io/software-engineering-2021-2022/>

https://www.geeksforgeeks.org/introduction-to-spring-framework/
https://www.geeksforgeeks.org/spring/
https://www.geeksforgeeks.org/introduction-to-spring-boot/
https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/overview.html

https://gayerie.dev/docs/spring/index.html
:::

### Spring Framework

- Open-source, lightweight framework
- Simplifies Java development
- Loosely coupled components
- Promotes good design practices
- Makes integration with other systems seamless

:::{.notes}
- improving:
  - maintainability,
  - testability.
  - flexibility 
:::



### Modules

- **Spring MVC**: to build web applications
- **Spring Security**: authentication, authorization...
- **Spring Data**: simplifies database access
- **Spring Batch**: handling large-scale batch processing


:::{.notes}
- With Spring, you're stepping into a realm where much of the 'magic' happens behind the scenes
- many functionalities are implicitly handled
- Spring's power lies in its ability to handle a lot of the boilerplate code
- you define your beans and dependencies, and Spring wires them together seamlessly
:::


### Key features

- Inversion of Control (IoC)
- Dependency Injection (DI)
- Aspect-Oriented Programming (AOP)


:::{.notes}
- Ioc
  - control flow of a program is inverted
  - Reduces the dependencies between components
  - making the codebase more modular
  - Promotes loose coupling
- AOP: A module that encapsulates cross-cutting functionality
  - Wrapper for log, security
:::

### Manually creating dependency

```{.java filename="Bread.java"}
public class Bread {
    private boolean isToasted;

    public void toast(){
        this.isToasted = true;
    }
}
```

<br>

```{.java filename="Sandwich.java"}
public class Sandwich {
    private Bread bread;
    private ArrayList<String> ingredients;

    public Sandwich(Bread bread) {
        this.bread = bread;
    }
}
```

---

1. Create a Bread object
2. Create the sandwich object

<br>

```{.java}
Bread bread = new Bread();
Sandwich sandwich = new Sandwich(bread);
```

### Dependency Injection

```{.java filename="Bread.java"} 
@Component
public class Bread {
    private boolean isToasted;

    public void toast(){
        this.isToasted = true;
    }
}
```

<br>

```{.java filename="Sandwich.java"}
public class Sandwich {
    @Autowired
    private Bread bread;
    
    private ArrayList<String> ingredients;
}
```

:::{.notes}
- <https://www.baeldung.com/spring-bean>
:::

### What happens now?

- Spring scans `@Component` classes
- It automatically creates and injects a Bread instance into Sandwich
- The `@Autowired` annotation tells Spring to resolve and inject the dependency
- Component subclasses: `@Service`, `@Repository`, `@Controller`

:::{.notes}
- Component: Bean
:::

### Bean principles

- No args constructor
- Managed by the Spring IoC container
- Scope (Singleton, Prototype)
- Lifecycle (creation, usage, destruction)


:::{.notes}
- NoArgs: allows Spring to create the bean instance without having to worry about the parameters
- Prototype: new instance when called
:::



## Annotations

### What is Annotation?

- Preceded by an `@`
- Assigns extra metadata
- Modify or examine behavior
- Heavily used in Spring

:::{.notes}
- Applied to class, method, interface, attribute
- Use for:
  - documentation (Override, Deprecated)
  - Config
  - Runtime processing
- Possible to create your own
:::

### Lombok {background="#000000" background-image="./img/lombok.jpg"}

- Java library
- Reduce boilerplate
- Cleaner and more readable code
- <https://projectlombok.org/>{target="_blank"}

:::{.notes}
- Island of Indonesia: Lombok, Java
- boilerplate: repetitive code
:::

### Lombok Annotations

Auto-generates:

- `@Getter` and `@Setter`
- `@AllArgsConstructor`
- `@NoArgsConstructor`

---

```{.java}
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;

@AllArgsConstructor
@Getter
public class Book {
    private String title;

    @Setter
    private String author;
}
```

:::{.notes}
- Getter and Setter: Class or Attribute level 
:::

## Layers

### Reminder

- **Controller**: API
- **Service**: Business Logic
- **Repository**: Data Access Object
- **Model**: Entities


:::{.notes}
- Controller:
  - Handles incoming HTTP requests from the client
  - Processes the request and sends a response
- Repository: CRUD
- entities (business_objects):
  - Maps to tables in the database using JPA/Spring Data
  - JPA: Java Persistence API
:::


---

![](img/layers.png)

:::{.notes}
3-tier architecture:

- classic software design pattern that separates an application into three logical layers
- Presentation Tier (UI)
- Application Tier (Business Logic)
- Data Tier (Data Storage)

Key Benefits: maintainability scalability, security (layer separation), code reusability
:::

---

Zoom on Business Layer

![](img/business_layer.png)



### Workflow

- A client sends an HTTPS request
- The request is received by the Controller
- If needed, the Controller calls the Service Layer
- The Service Layer executes the business logic and interacts with the Repository Layer to perform data operations
- The Repository Layer retrieves or modifies data in the database using JPA
- The response is sent back to the client

---


### Sequence diagram {background="#FFFFFF"}

- On the GUI, you click on the book entitled 'Java'
- The front office asks the back office for informations

```{mermaid}
sequenceDiagram
    participant Client
    participant Controller
    participant Service
    participant Repository
    participant Database

    Client->>Controller: GET /books?title=Java
    Controller->>Service: getBookByTitle("Java")
    Service->>Repository: findByTitle("Java")
    Repository->>Database: SELECT * FROM books WHERE title="Java"
    Database-->>Repository: Returns book data
    Repository-->>Service: Returns Book entity
    Service-->>Controller: Returns Book DTO
    Controller-->>Client: HTTP 200 OK (Book JSON)

```

:::{.notes}

:::


### HTTP status codes {.smaller}

:::{style="font-size: 80%;"}

| HTTP Status Code | Description                                                                         |
|--------------------|------------------------------------------------------------------------------------|
| 200 OK             | The request was successful.                                                       |
| 400 Bad Request    | The server could not understand the request due to invalid syntax.                |
| 401 Unauthorized   | Authentication is required, and the client should authenticate itself.            |
| 403 Forbidden      | The client does not have access rights to the content.                             |
| 404 Not Found      | The server can not find the requested resource.                                    |
| 500 Internal Server Error | The server encountered an unexpected error.                                 |
| 501 Not Implemented | The server does not support requested functionality.                              |
| 502 Bad Gateway    | The server received an invalid response from the upstream server.                  |
| 503 Service Unavailable | The server is not ready to handle the request.                                |

: {tbl-colwidths="[30, 70]"}

:::

:::{.notes}
- Client side: The problem is with your device or browser.
- Server side: The problem is with the website you are trying to use.
:::


## Spring Boot

### Why use Spring Boot?

- Includes all Spring features
- Simplify configuration
- Allows developers to focus on business logic
- Quick development of production-ready applications
- Optimisation of dependency management

### Features

- Auto-Configuration
- Creat REST APIs is easy
- Embedded Tomcat Server

:::{.notes}
Embedded Tomcat Server:

- allows you to run and test your application quickly
- Self-Contained Applications: Spring Boot packages your application and the Tomcat server into a single executable JAR
- Reduced Configuration
:::

### Starters

Dependencies:

- spring-boot-starter-core
- spring-boot-starter-data-jpa
- spring-boot-starter-test
- spring-boot-starter-web

### Create a project

- <https://start.spring.io/>{target="_blank"}
- Generate a zip
  - including project tree
  - including pom with selected dependencies



## Properties

:::{.notes}
- old: application.properties
- new: yaml
:::

### application.yml

```{.yml}
server:
  port: 9000

spring:
  application:
    name: running
  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:mem:bootapp;DB_CLOSE_DELAY=-1
    username: sa
    password: password

logging:
  level:
    root: ERROR
    fr:
      ensai: INFO
    org:
      springframework:
        boot:
          web:
            embedded:
              tomcat: INFO
```

:::{.notes}
- Like python .env
- Port (80: http, 443: https, 22: SSH, 21: FTP)
- Database connection
- Log setup
- Let's talk about YAML
:::

### YAML

- YAML Ain't Markup Language
- Text format
- Indentation-based syntax
- Easily readable by humans


:::{.notes}
- recursive acronym
- JSON: efficient for machine-to-machine communication
- YAML: configuration files (human readability)
:::

### YAML Strucure

- Key-Value pairs
- indentation: 2 spaces
  - Required
  - [YAML Lint](https://www.yamllint.com/){target="_blank"} to validate
- CASE sensitive

:::{.notes}
- text values: facultatives quotes
- spaces: no tabs
:::

### YAML Examples

```{.yml}
person:
  name: Charlotte         # str
  city: "Amiens"          # str
  age: 25                 # int
  height: 1.70            # float
  student: false          # bool
  birth_date: 1990-05-15  # date
```

<br>

```{.yml}
hobbies: 
  - chess
  - hiking
  - landart
```

- [More about YAML](https://ludo2ne.github.io/ENSAI-2A-remise-a-niveau/docs/outils/YAML.html){target="_blank"} 
- <https://quickref.me/yaml.html>{target="_blank"} 

:::{.notes}
- dict
- list
  - other syntax: `hobbies: ["chess", "hiking", "landart"]`
:::

## Data Mapping

:::{.notes}
- I would remind you that the aim is to send the data up to the GUI
- We want to get data from database to our app
:::

---

### Why is it usefull?

- Facilitates interaction between Java objects and database tables
- ensure accurate data transfer between layers, databases
- Object-Relational Mapping (ORM)

:::{.notes}
- SQLAlchemy in Python
- It was forbidden in IT Project
:::

### Database side

```{.sql}
CREATE TABLE user (
    lastname     VARCHAR(255),
    firstname    VARCHAR(255),
    birth_date   DATE,
    gender       VARCHAR(10)
);
```

### Java class

```{.java}
public class User {
    private String lastName;
    private String firstName;
    private LocalDate birthDate;
    private String gender;
```

- Many similarities
- A few differences:
  - `User` instead of `user`
  - `birthDate` vs `birth_date`

### Hibernate

- Simplify data interactions with relational databases
- Maps Java classes to database tables
- Provides database independence
- Generates SQL queries for CRUD operations

:::{.notes}
- inluded via spring-boot-starter-data-jpa
- JPA: Java Persistence API
- the default JPA implementation is Hibernate
:::


### Entity Bean

```{.java}
@Entity
@Table(name = "user")
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE)
    @Column(name = "id_user")
    private Long id;

    private String name;

    @Column(name = "birth_date")
    private LocalDate birthDate;

    @Column(name = "gender", length = 10)
    private String gender;
}
```

:::{.notes}
Mapping

- `@Table(name = "user")`: no need if same names
- `@Column(name = "birth_date")`: no need if same names
- `@Id` marks the id field as the primary key of the entity

Mapping is done, now let's transfert data
:::

### Entity annotations {.smaller}

| Annotation         | Description |
|--------------------|-------------|
| `@Entity`         | Marks the class as a JPA entity. |
| `@Table(name="tbname")` | Specifies the database table name. |
| `@Id`            | Marks a field as the **primary key**. |
| `@GeneratedValue( .. )` | Defines the **auto-increment** strategy for the PK. |
| `@Column(name="colname", ...)` | Maps a field to a database column and allows configuration. |
| `@Enumerated(EnumType.STRING)` | Maps an **enum** to a database column. |
| `@Transient`      | Marks a field as **non-persistent** (ignored by JPA). |

: {tbl-colwidths="[35, 65]"}

:::{.notes}
`@Column(name="col_name", nullable=false, unique=true, length=255)`
:::

### Entity relationships {.smaller}

| Annotation         | Description |
|--------------------|-------------|
| `@JoinColumn(name="FK_column")` | Specifies the **foreign key** column for relationships. |
| `@ManyToOne`      | Defines a **many-to-one** relationship between entities. |
| `@OneToMany(mappedBy="fieldName")` | Defines a **one-to-many** relationship. |
| `@ManyToMany`     | Defines a **many-to-many** relationship. |
| `@OneToOne`       | Defines a **one-to-one** relationship. |

: {tbl-colwidths="[45, 55]"}

### ManyToOne


:::{.panel-tabset .nav-pills}

#### Users and Clubs

Considering that:

- a user has a club
- a club can have several users

Where is the foreign key?

#### User class

```{.java filename="User.java"}
@Entity
@Table(name = "user")
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE)
    @Column(name = "id_user")
    private Long id;

    @Column(name = "name")
    private String name;
    
    @ManyToOne
    @JoinColumn(name = "id_club")
    private Club club;
}
```

#### Club class

```{.java filename="Club.java"}
@Entity
@Table(name = "club")
public class Club {

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE)
    @Column(name = "id_club")
    private Long id;

    @Column(name = "name", nullable = false)
    private String name;

    @OneToMany(mappedBy = "club")
    private List<User> users = new ArrayList<>();
}
```

:::

:::{.notes}
Database reminder:

- PK, FK
- Association table
- *..*, 1..*

mappedBy = 'club' indicates that the relationship is managed by the club attribute in the User class
:::

### ManyToMany

- To be used if the association table is basic
- Otherwise create an entity for the association table with ManyToOne


## Repository

### A basic DAO

```{.java}
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface UserRepository extends JpaRepository<User, Long> {
}
```

:::{.notes}
- That's all!
- All CRUD methods are available
- No need to implement the code
- JpaRepository extends CrudRepository
:::

### Basic methods

Methods included automatically without having to implement them:

- `save(Entity e)`
- `findById(Long id)`
- `findAll()`
- `count()`
- `delete(Entity e)`

:::{.notes}
- Save: INSERT or UPDATE
- existsById(), ...
:::


### Native SQL Query

```{.java}
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import java.util.List;

@Repository
public interface UserRepository extends JpaRepository<User, Long> {

    @Query(value = """
        SELECT * 
        FROM user u 
        WHERE u.last_name = :lastName
    """, nativeQuery = true)
    List<User> findByLastNameNative(@Param("lastName") String lastName);
}
```


### JPQL

- Java Persistence Query Language
- Method name :arrow_right: Auto-generate the Query

```{.java}
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface UserRepository extends JpaRepository<User, Long> {
    List<User> findByGenderOrderByFirstNameDesc(String gender);
}
```

:::{.notes}
- No need to implement the code
- The method name is enought
- <https://docs.spring.io/spring-data/jpa/reference/jpa/query-methods.html#jpa.query-methods.query-creation>
:::

## Controller

### API Rest

```{.java filename="ApiRestController.java"}
@RestController
@RequestMapping("/api")
public class ApiRestController {

    @Autowired
    private UserService userService;

    /**
     * Get all users
     */
    @GetMapping("/users")
    public List<User> getAllUsers() {

        return userService.findAll();
    }
}
```

---

- `@RestController`
  - handles RESTful web requests
  - methods in this class will return data directly (JSON)
- `@RequestMapping("/api")`: Specifies the base URL
- `@GetMapping("/users")`: Maps getAllUsers() method to *endpoint /api/users*


### Use a PATH Parameter

```{.java filename="ApiRestController.java"}
    @GetMapping("/users/{id}")
    public ResponseEntity<User> getUserById(@PathVariable Long id_user) {
        User user = userService.findById(id_user);
        if (user == null) {
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok(user);
    }
```

ResponseEntity:

- Represents an entire HTTP response

:::{.notes}
ResponseEntity (not mandatory but):

- It allows you to customize every aspect of the HTTP response
- You can easily handle various response scenarios (200, 404...)
- You can add custom headers to the response, which can be useful for caching, authentication

Alternative to PATH Param: Query Parameters

- `/products?category=electronics&sort=price&page=2`
:::

### Create, Update, Delete

```{.java filename="ApiRestController.java"}
    @PostMapping
    public ResponseEntity<User> createUser(@RequestBody User user) {
        User createdUser = userService.save(user);
        return ResponseEntity.status(HttpStatus.CREATED).body(createdUser);
    }

    @PutMapping("/{id}")
    public ResponseEntity<User> updateUser(@PathVariable Long id, @RequestBody User user) {
        User existingUser = userService.findById(id);
        if (existingUser == null) {
            return ResponseEntity.notFound().build();
        }
        user.setId(id);
        User updatedUser = userService.save(user);
        return ResponseEntity.ok(updatedUser);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteUser(@PathVariable Long id) {
        User existingUser = userService.findById(id);
        if (existingUser == null) {
            return ResponseEntity.notFound().build();
        }
        userService.deleteById(id);
        return ResponseEntity.noContent().build();
    }
```


:::{.notes}
- `@RequestBody`: JSON, Not part of the URL; sent in the HTTP request's body
- `@RequestHeader("Authorization")` 
  - Key-value pairs in the HTTP request's header
  - `Authorization: Bearer <token>`
:::

## Run application

### Main

```{.java filename="Application.java"}
@SpringBootApplication
public class Application {
	public static void main(String[] args) {
		SpringApplication.run(Application.class, args);
	}
}
```

:::{.notes}
- Main method simply running the application
:::