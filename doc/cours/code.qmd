---
title: "Java Basics"
description: "[Slides](code-slides.html)"
author: "Ludovic Deneuville"
format: 
  html:
    toc: true
    toc-location: left
    toc-depth: 2
  revealjs:
    theme: moon
    footer: "[Home](../../index.html) --- [Java Basics](code.html)"
    slide-number: c/t                    ## collapsed/total
    slide-level: 3
    controls: true
    output-file: code-slides.html
from: markdown+emoji
lightbox: true
---


## Hello World

```{.java filename="HelloWord.java"}
class HelloWorld {
    public static void main(String[] args) { 
        String message = "Hello World!";
        System.out.println(message);
    }
}
```

- compile: `javac HelloWord.java`
  - create *HelloWord.class*
- run: `java HelloWord`
- exit : CTRL + C

:::{.notes}
- you only write .java files
:::

## Syntax

- A Line of code ends with a semicolon `;`
- Blocs are delimited with curly braces: `{ }`
- Comments
  - `//`: one line
  - `/*` multi-lines `*/`

### Naming Conventions

- Classes: PascalCase 
- Variables, Methods: camelCase
- constants: UPPER_CASE_WITH_UNDERSCORES
- packages: Lowercase, dot-separated (package com.example.utils;)


## Variables and Data Types

```{.java}
int age = 25;
final double PI = 3.14;        // final : Immutable

boolean isJavaFun = true;

char grade = 'A';
String name = "Léa";
```

:::{.notes}
- strong typing, immuable type
- primitive, object
- String
  - not a primitive data type
  - String is a Class
  - immutable: Any modification creates a new string in memory
:::

### Boolean

```{.java}
boolean isJavaFun = true;
boolean hasBrother = false;

boolean isFast = 20 > 15;

true && !false || false;
```

::: {.notes}
- lowercase booleans
- No need for `== true`
:::

### String

```{.java}
String myString = "Java";
String fullName = "Alain" + " " + "Philippe";   // concat

myString.length();
myString.charAt(0);          // Get character at index 0
myString.contains("va");
myString.toLowerCase();      // also toUpperCase
myString.endsWith("Java");   // also startsWith

myString.equals("Java");     // Use equals to compare, not ==
```

Others: *replace()*, *split()*


## Print

- `System.out.print("Hello");`
- `System.out.println("Hello");`: adds a new line
- System.out :arrow_right: Standard output stream


## Structures

### if-else

```{.java}
int number = 10;

if (number > 0) {
    System.out.println("Positive number");
} else if (number < 0) {
    System.out.println("Negative number");
} else {
    System.out.println("Zero");
}
```

### Ternary Operator

- Shorter alternative to *if-else*

```{.java}
String status = (number > 0) ? "Positive": "Negative";
```

### Switch

```{.java}
String fruit = "lemon";

switch (fruit) {
    case "cherry", "strawberry" -> System.out.println("Red fruit");
    case "banana", "lemon" -> System.out.println("Yellow fruit");
    default -> System.out.println("Unknown fruit");
}
```

::: {.notes}
- switch can return a value

```{.java}
String color = switch (fruit) {
    case "cherry", "strawberry" -> "Red fruit";
    case "banana", "lemon" -> "Yellow fruit";
    default -> "Unknown fruit";
};
```
:::


### For

```{.java}
for (int i = 0; i < 5; i++) {
    System.out.println("Iteration: " + i);
}
```

- initialization: i = 0
- condition: i < 5
- update: i++


### For each

- Iterating through arrays, lists

```{.java}
int[] numbers = {1, 2, 3, 4};

for (int num: numbers) {
    System.out.println(num);
}
```

### While


```{.java}
int i = 10;
while (i >= 0) {
    System.out.println(i);
    i--;
}
```

:::{.notes}
do-while to check after each iteration

```{.java}
do { ...
} while { ... }
```
:::


### break / continue


```{.java}
for (int i = 0; i < 10; i++) {
    if (i == 2)
        continue;
    else if (i == 4)
        break;
    System.out.println("Iteration: " + i);
}
```

::: {.fragment}
``` {.txt}
Iteration: 0
Iteration: 1
Iteration: 3
```
:::

## Function

```{.java}
public int add(int a, int b) {
    return a + b;
}
```

- Access modifier: *public*
- Return type: *int*
- Method name: *add*
- Parameters: *(int a, int b)*


### Void

- Indicate that a method does not return any value

```{.java}
public void printIsOdd(int n) {
    System.out.println(n % 2 != 0);
}
```


### Access Modifiers

Methods and Attributes Accessiblility

| Modifier                | Same Class | Same Package | Subclasses  |  Everywhere   |
|-------------------------|------------|--------------|-------------|---------------|
| public                  | ✅         | ✅          | ✅          | ✅           |
| protected               | ✅         | ✅          | ✅          | ❌           |
| *default* (no modifier) | ✅         | ✅          | ❌          | ❌           |
| private                 | ✅         | ❌          | ❌          | ❌           |


## Various

- increment: `i++`
