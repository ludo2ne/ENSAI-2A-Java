---
title: "Java - TP2"
description: "Object Oriented Programming"
author: "Ludovic Deneuville"
format:
  html:
    toc: true
    toc-location: left
    toc-expand: 3
from: markdown+emoji
number-sections: true
number-depth: 3
---

:construction: draft


## Objectives

POO

## Update repo

careful with fork

File > Open Folder > tp2

## Compile and run

### Maven

- `mvn clean install`
  - Drop target, Download dependencies, Compile, Run TU, Package project
- `mvn clean compile`
  - Drop target, Download dependencies, Compile
- `mvn exec:java -Dexec.mainClass="fr.ensai.library.Main"`

Manually :

- `javac -d bin src/main/java/edu/ensai/library/*.java`
- `java -cp bin tp2.src.main.java.edu.ensai.library.Main`


## Exercice : Library management

The goal of this exercise is to simulate the management of a library where students can borrow books.

Classes *Author* and *Book* are already provided.

### Steps

- [ ] Library
- [ ] Main
  - compile and run
- [ ] Abstract Item
  - Modify Book
  - Create Magazine
- [ ] Loan
  - Create Student

### Create the library

This class will represent the library and will have the following [private]{.underline} attributes:

- *name*: A string that represents the name of the library
- *books*: A list of Books

and methods:

- a constructor
- *addBook(Book book)*: Adds a book to the library's collection
- *displayBooks()* 
  - print all books of the library
  - or print a message if there is no book

---

- [ ] Create the `Library` class

### Load books from file

:construction: 

All operations related to the library will be handled in the main class


- [ ] Create the Main class with a main method
- [ ] In the main method, Create an instance of the Library
- [ ] Use the appropriate method to load books from the file *books.csv*
- [ ] Display all books


### Magazine

The library is evolving and now includes magazines in addition to books. To accommodate this change, update your implementation while following object-oriented programming (OOP) principles

- [ ] Introduce an abstract class `Item` that will serve as the parent for both *Book* and *Magazine*
  - attributes: title, year, pageCount
- [ ] Modify class `Book` extends Item
- [ ] Create class `Magazine` extends Item
  - attributes: issn, issueNumber

### Loans

The library system now needs to support book loans for students. To achieve this, update the implementation as follows:

- [ ] Create a class `Student`
  - attributes: name, age, academicYear
- [ ] Create a class `Loan`
  - attributes: student, item, startDate, returnDate (null at creation)
  - methods: 
    - setReturnDate() to update the return date
    - toString() returning a String like "Item xxx borrowed by yyy."
- [ ] Update the `Library` class adding two attributes:
  - activeLoans (A list of ongoing loans)
  - completedLoans (A list of returned loans)


### Various methods

In the Library class create following methods:

- [ ] getBooksByAuthor(Author author) -> ArrayList<Book>









## Java class

### Example

```{.java}
import java.util.ArrayList;

/**
 * Represents a student
 * Attributes : name, age, and a list of notes.
 */
public class Student {
    // -------------------------------------------------------
    // Attributes
    // -------------------------------------------------------
    private String name;
    private int age;
    private ArrayList<Double> notes;

    /**
     * Constructs a new Student object with the given name and age.
     * @param name The name of the student.
     * @param age The age of the student.
     */
    public Student(String name, int age) {
        this.name = name;
        this.age = age;
        this.notes = new ArrayList<>();     // empty list
    }

    // -------------------------------------------------------
    // Getters and Setters (to access private attributes)
    // -------------------------------------------------------

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    /**
     * Sets the age of the student.
     * @param age The age to set. It should be greater than zero.
     * @throws IllegalArgumentException if the provided age is not greater than zero.
     */
    public void setAge(int age) {
        if (age <= 0) {
            throw new IllegalArgumentException("Age must be greater than zero.");
        }
        this.age = age;
    }
    
    // -------------------------------------------------------
    // Methods
    // -------------------------------------------------------

    /**
     * @return A string representation of the Student object.
     */
    @Override
    public String toString() {
        return "Student(" +
                "name='" + this.name + '\'' +
                ", age=" + this.age +
                ')';
    }

    /**
     * Adds a note to the student's list of notes.
     * @param note The note to be added.
     */
    public void addNote(double note) {
        this.notes.add(note);
    }

    /**
     * Computes the average note of the student.
     * @return The average note of the student.
     * @throws ArithmeticException if there are no notes present.
     */
    public double computeAverage() {
        if (this.notes.isEmpty()) {
            throw new ArithmeticException("Cannot compute average. No notes available.");
        }

        double sum = 0.0;
        for (double note : this.notes) {
            sum += note;
        }
        return sum / this.notes.size();
    }


    /**
     * Main method
     */
    public static void main(String[] args) {
        Student student = new Student("Eva", 20);
        student.addNote(17.5);
        student.addNote(12.0);
        student.addNote(20.0);
        
        System.out.println(student);
        System.out.println("Average Note: " + student.computeAverage());
    }
}
```


### Template

```{.java}
/**
 * Represents a ...
 */
public class ClassName {
    // -------------------------------------------------------
    // Attributes
    // -------------------------------------------------------
    private String attribute1;
    private int attribute2;

    /**
     * Constructs a new ...
     * @param parameter1 parameter1_description
     * @param parameter2 parameter2_description
     */
    public ClassName(String parameter1, int parameter2) {
        this.attribute1 = parameter1;
        this.attribute2 = parameter2;
    }


    // -------------------------------------------------------
    // Methods
    // -------------------------------------------------------

    /**
     * No parameter, return void
     */
    public void print_attribute1() {
        System.out.println(this.attribute1);
    }
    
    /**
     * Increment value of attribute2
     * A parameter, return void
     * @param increment increment
     */
    public void increment_attribute2(int increment) {
        this.attribute2 += increment;
    }
    
    /**
     * Checks if attribute2 is odd.
     *
     * @return true if attribute2 is odd, false otherwise.
     */
    public boolean isAttribute2Odd() {
        return attribute2 % 2 != 0;
    }


    /**
     * Main method
     */
    public static void main(String[] args) {

        ClassName c = new ClassName("", 0);
        c.increment_attribute2(5);
        System.out.println(c.isAttribute2Odd());
    }
}
```

