---
title: "Java - TP2"
description: "Object Oriented Programming"
author: "Ludovic Deneuville"
format:
  html:
    toc: true
    toc-location: left
    toc-expand: 3
from: markdown+emoji
number-sections: true
number-depth: 3
---


## Objectives {.unnumbered}

- Object-oriented programming (OOP)
- Java project structure
- Introduction to Maven
- Unit tests with JUnit

## Before you start

When you've finished, don't forget to delete your service.

After each part, create a commit and push your code to the remote repository.

### Launch service VSCode Java

- [ ] Launch the service [VScode-Java](https://datalab.sspcloud.fr/launcher/ide/vscode-python?version=1.11.26&autoLaunch=true&service.image.custom.enabled=true&service.image.custom.version=%C2%ABodysseu%2Fonyxia-vscode-java%3Aj21%C2%BB){target="_blank"} using this link.

### Update your repo

:::{.callout-warning title="if you haven't done TP1 using your account" collapse="true"}
Follow the instructions in the [introduction to TP1](./tp1.qmd#introduction){target="_blank"}.
:::

::: {.callout-important}
During the first tutorial, you created a fork of the [ENSAI-2A-Java-TP repository](https://github.com/ludo2ne/ENSAI-2A-Java-TP){target="_blank"}, i.e. you created a copy of this repository on GitHub.

The original repository has been updated, so you need to synchronise your fork with the latest version of the repository.
:::

**[Choose one]{.underline}** of these two possibilities to perform it :

- Using GitHub interface : sync on GitHub, and then clone on your VSCode
- Manually in a terminal : clone on your VSCode, and then sync using git commands

#### Using GitHub interface (easy way)

- [ ] Login to [GitHub](https://github.com/){target="_blank"}
- [ ] Open the fork of ENSAI-2A-Java-TP, you created at the first practical
- [ ] Click on the button **Sync fork**
- [ ] Open a terminal in VSCode an clone your own repo

#### In a terminal

- [ ] Open a terminal in VSCode
- [ ] Clone your repository
- [ ] Position yourself into the repo using `cd <my_repo>`
- [ ] Add the original repository as a remote (call it *upstream*)
  - `git remote add upstream https://github.com/ludo2ne/ENSAI-2A-Java-TP.git`
- [ ] Fetch the latest changes from upstream
  - `git fetch upstream`
- [ ] Make sure you're on the branch main
  - `git checkout main`
- [ ] Merge the changes
  - `git merge upstream/main`
- [ ] Resolve any conflicts (if necessary)
- [ ] Push the updates to your fork
  - `git push origin main`


### Open Folder

In VSCode :

- [ ] File > Open Folder > tp2

**tp2** must be the root folder in your explorer.


## Compile and run

Last time, you used the *javac* and *java* commands to compile and run your code.

This time, we'll be working on a Maven project, so you'll be able to use the following commands :

- `mvn clean compile`
  - Drop target folder, Download dependencies, Compile
- `mvn exec:java`
  - Run *main* method of *Main* class
- `mvn test`
  - Run unit tests



## Exercice : Library management

The goal of this exercise is to simulate the management of a library where students can borrow books.

Steps :

- At first two classes are provided, *Author* and *Book*
- You also have a *Main* class which will be the entry point for your program (main method, compile, run)
- Create a class representing the library (attributes, methods)
- The application evolves: the library also offers magazines. Use OOP to upgrade your system (inheritance, abstract class)
- Set up features for loaning books and magazines


At the end of the tp, your code must implement this class diagram :

```{mermaid}
classDiagram
    class Library {
        -List~Item~ items
        -List~Loan~ activeLoans
        -List~Loan~ completedLoans
        +addIem()
        +displayItems()
        +getBooksByAuthor() List~Book~
        +loanItem() boolean
        +renderItem() boolean
        +findActiveLoanForItem() Loan
        +loadBooksFromCSV()
    }
    
    class Item {
        -String title
        -int year
        -int pageCount
    }
    
    class Book {
        -String isbn
        -Author author
    }
    
    class Magazine {
        -String issn
        -String issueNumber
    }

    class Person {
        -String name
        -int age
    }

    class Author {
        -String nationality
    }

    class Student {
        -int academicYear
        -boolean isClassDelegate
    }

    class Loan {
        -Item item
        -Student borrower
        -Date startDate
        -Date returnDate
    }

    Library  --  Item : has
    Library  --  Loan : manages
    Loan  --  Item : relates to
    Loan  --  Student : borrowed by
    Person <|-- Author : extends
    Person <|-- Student : extends
    Item <|-- Magazine : extends
    Item <|-- Book : extends
    Book  -- Author : written by
```

::: {.callout-note}
- In Java, it's conventional to declare all attributes as private.
- Constructors, getter and setters don't appear on the diagram, nor do special methods (toString, equals)
:::


### Create the library

This class will represent the library and will have the following [private]{.underline} attributes:

- *name*: A string that represents the name of the library
- *books*: A list of Books

and methods:

- a constructor
- *addBook(Book book)*: Adds a book to the library's collection
- *displayBooks()* 
  - print all books of the library
  - use *toString()* method from Book class
  - or print a message if there is no book

---

- [ ] Create the `Library` class
- [ ] Add the method *loadBooksFromCSV()*
  - copy the code below
  - also add needed imports at the top of the class

::: {.callout-note collapse="true" title="loadBooksFromCSV"}

```{.java}
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.net.URL;


    /**
     * Loads books from a CSV file and adds them to the library.
     * 
     * @param filePath The path to the CSV file containing book data.
     * @throws IOException If there is an error reading the file, an
     *                     {@link IOException} will be thrown.
     */
    public void loadBooksFromCSV(String filePath) {

        URL url = getClass().getClassLoader().getResource(filePath);

        try (BufferedReader br = new BufferedReader(new FileReader(url.getFile()))) {
            Map<String, Author> authors = new HashMap<>();
            String line;
            br.readLine(); // Skip the header line

            while ((line = br.readLine()) != null) {
                String[] data = line.split(",");

                if (data.length == 5) {
                    String isbn = data[0].trim();
                    String title = data[1].trim();
                    String authorName = data[2].trim();
                    int year = Integer.parseInt(data[3].trim());
                    int pageCount = Integer.parseInt(data[4].trim());

                    // Check if author already exists in the map
                    Author author = authors.get(authorName);
                    if (author == null) {
                        author = new Author(authorName);
                        authors.put(authorName, author);
                        System.out.println(author.toString());
                    }
                    Book book = new Book(isbn, title, author, year, pageCount);

                    this.addIem(book);
                }
            }
        } catch (

        IOException e) {
            System.err.println("Error reading the file: " + e.getMessage());
        }
    }
```
:::

- [ ] Commit and push

### Load books from file

All operations related to the library will be handled in the main class.

Update the main method of the Main class (*Main.java*):

- [ ] Create an instance of the Library
- [ ] Use the appropriate method to load books from the file *books.csv*
- [ ] Display all books


### Magazine

The library is evolving and now includes magazines in addition to books. To accommodate this change, update your implementation while following object-oriented programming (OOP) principles

- [ ] Introduce an abstract class `Item` that will serve as the parent for both *Book* and *Magazine*
  - attributes: title, year, pageCount
- [ ] Modify class `Book` extends Item
- [ ] Create class `Magazine` extends Item
  - attributes: issn, issueNumber

In the Library class, replace:

- [ ] Attribute *books* by *items*
- [ ] Method *displayBooks()* by *displayItems()*

In the Main class:

- [ ] create and add two magazines to the library before calling *displayItems()*


### Loans

The library system now needs to support book loans for students. To achieve this, update the implementation as follows:

- [ ] Create a class `Student`
  - attributes: name, age, academicYear, isClassDelegate
- [ ] **Bonus**: do you know of a class that has anything in common with the Student class? Implement
- [ ] Create a class `Loan`
  - attributes: student, item, startDate, returnDate (null at creation)
  - methods: 
    - setReturnDate() to update the return date
    - toString() returning a String like "Item xxx borrowed by yyy."
- [ ] Update the `Library` class adding two attributes:
  - activeLoans (A list of ongoing loans)
  - completedLoans (A list of returned loans)


### Various methods

In the *Library* class create following methods:

- [ ] findActiveLoanForItem(Item item) -> Loan
  - Look if the item is present in active loans 
  - Run unit tests
- [ ] getBooksByAuthor(Author author) -> ArrayList\<Book\>
  - write tests
- [ ] loanItem(Item item, Student student) -> boolean
  - Check if the item is available
  - Create a Loan and add it to activeLoans
- [ ] renderItem(Item item) -> boolean
  - Find the Loan if exists
  - Add a return date
  - Move an item from activeLoans to completedLoans
- [ ] displayActiveLoans() -> void

Feel free to use these methods in your main method.



## Java class

### Example

```{.java filename="Student.java"}
import java.util.ArrayList;

/**
 * Represents a student
 * Attributes : name, age, and a list of notes.
 */
public class Student {
    // -------------------------------------------------------
    // Attributes
    // -------------------------------------------------------
    private String name;
    private int age;
    private ArrayList<Double> notes;

    /**
     * Constructs a new Student object with the given name and age.
     * @param name The name of the student.
     * @param age The age of the student.
     */
    public Student(String name, int age) {
        this.name = name;
        this.age = age;
        this.notes = new ArrayList<>();     // empty list
    }

    // -------------------------------------------------------
    // Getters and Setters (to access private attributes)
    // -------------------------------------------------------

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    /**
     * Sets the age of the student.
     * @param age The age to set. It should be greater than zero.
     * @throws IllegalArgumentException if the provided age is not greater than zero.
     */
    public void setAge(int age) {
        if (age <= 0) {
            throw new IllegalArgumentException("Age must be greater than zero.");
        }
        this.age = age;
    }
    
    // -------------------------------------------------------
    // Methods
    // -------------------------------------------------------

    /**
     * @return A string representation of the Student object.
     */
    @Override
    public String toString() {
        return "Student(" +
                "name='" + this.name + '\'' +
                ", age=" + this.age +
                ')';
    }

    /**
     * Adds a note to the student's list of notes.
     * @param note The note to be added.
     */
    public void addNote(double note) {
        this.notes.add(note);
    }

    /**
     * Computes the average note of the student.
     * @return The average note of the student.
     * @throws ArithmeticException if there are no notes present.
     */
    public double computeAverage() {
        if (this.notes.isEmpty()) {
            throw new ArithmeticException("Cannot compute average. No notes available.");
        }

        double sum = 0.0;
        for (double note : this.notes) {
            sum += note;
        }
        return sum / this.notes.size();
    }

    /**
     * Main method
     */
    public static void main(String[] args) {
        Student student = new Student("Eva", 20);
        student.addNote(17.5);
        student.addNote(12.0);
        student.addNote(20.0);
        
        System.out.println(student);
        System.out.println("Average Note: " + student.computeAverage());
    }
}
```


### Template

```{.java filename="ClassName.java"}
/**
 * Represents a ...
 */
public class ClassName {
    // -------------------------------------------------------
    // Attributes
    // -------------------------------------------------------
    private String attribute1;
    private int attribute2;

    /**
     * Constructs a new ...
     * @param parameter1 parameter1_description
     * @param parameter2 parameter2_description
     */
    public ClassName(String parameter1, int parameter2) {
        this.attribute1 = parameter1;
        this.attribute2 = parameter2;
    }


    // -------------------------------------------------------
    // Methods
    // -------------------------------------------------------

    /**
     * No parameter, return void
     */
    public void print_attribute1() {
        System.out.println(this.attribute1);
    }
    
    /**
     * Increment value of attribute2
     * A parameter, return void
     * @param increment increment
     */
    public void increment_attribute2(int increment) {
        this.attribute2 += increment;
    }
    
    /**
     * Checks if attribute2 is odd.
     *
     * @return true if attribute2 is odd, false otherwise.
     */
    public boolean isAttribute2Odd() {
        return attribute2 % 2 != 0;
    }


    /**
     * Main method
     */
    public static void main(String[] args) {

        ClassName c = new ClassName("", 0);
        c.increment_attribute2(5);
        System.out.println(c.isAttribute2Odd());
    }
}
```

