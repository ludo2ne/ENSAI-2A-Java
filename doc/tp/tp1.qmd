---
title: "Introduction to Java syntax"
description: "Java - TP1"
author: "Ludovic Deneuville"
format:
  html:
    toc: true
    toc-location: left
    toc-expand: 3
from: markdown+emoji
number-sections: true
number-depth: 3
---


## Objectives {.unnumbered}

In this first tutorial, we're simply going to familiarize ourselves with Java syntax, without using object-oriented programming.

This is why methods are defined as static. They are class methods. You don't need to instantiate an object to call them.

## Introduction

In this tutorial, we will use the INSEE datalab.

A service is available with Visual Studio Code and Java.

- [ ] Login to [SSPCloud](https://datalab.sspcloud.fr){target="_blank"}
- [ ] Launch the service [VScode-Java](https://datalab.sspcloud.fr/launcher/ide/vscode-python?version=1.11.26&autoLaunch=true&service.image.custom.enabled=true&service.image.custom.version=%C2%ABodysseu%2Fonyxia-vscode-java%3Aj21%C2%BB){target="_blank"}

::: {.callout-important}
You won't find this service in the basic catalog. You have to use the link above to launch it.

It uses a specific [Docker image](https://github.com/odysseu/onyxia-datascience-images/blob/main/vscode-java/Dockerfile){target="_blank"}
:::

- [ ] Login to [GitHub](https://github.com/){target="_blank"}
- [ ] Fork this repository: <https://github.com/ludo2ne/ENSAI-2A-Java-TP/fork>{target="_blank"}
- [ ] On the main page of your fork, click on [Code]{.green-button}
- [ ] Copy *https* url to clipboard
- [ ] Back to VSCode in the Datalab, Clone the forked repository using this *https* url


## Visual Studio Code {.unnumbered}

:construction:

- Open Folder (ENSAI-2A-Java-TP) 

```{.json filename=".vscode/settings.json"}
{
    "editor.inlayHints.enabled": "off",
    "editor.formatOnSave": true,
    "java.saveActions.organizeImports": true,
}
```

### Shorcuts for windows

- SHIFT + ALT + A: Comment / Uncomment selected lines

## Exercices

- [ ] Open a terminal
  - Terminal > New Terminal (or CTRL + ù)
- [ ] Go to the folder `ENSAI-2A-Java-TP/tp1/src`
  - if you need help, check out [Unix basic commands](https://ludo2ne.github.io/Git-tuto/doc/presentation.html#commandes-unix){target="_blank"}

#### Compile

- a single Java file: `javac MyClass.java`
- all Java files: `javac *.java`
- specify output directory for *.class* files (recommended): `javac -d bin MyClass.java`

#### Run

::: {.callout-important}
To run a class, it must have a *main()* method.
:::

- `java MyClass`
-  when .class files are in the *bin/* directory: `java -cp bin MyClass`

### Brute force

You will write a Java method that attempts to brute-force a hashed 6-digit numeric password.

- The method will iterate through all numbers from 000000 to 999999
- For each number, Generate and compare hash with the given target hash
- If a match is found, return the original number else return null

---

- [ ] Open File *Password.java*
- [ ] Complete method `bruteForce6Digit()`


::: {.callout-tip}
- Use method *hashPassword()*
- `String.format("%06d", 123)`:arrow_right: "000123"
:::


### Strong password

- [ ] Commit and Push the code of the last exercise
- [ ] Complete method `isStrongPassword()`

You will write a Java method to check if a password is strong. A password is strong if:

- ✅ It has at least 12 characters
- ✅ It contains at least one uppercase letter
- ✅ It contains at least one lowercase letter
- ✅ It contains at least one digit
- ❌ It does not contain whitespace

::: {.callout-tip}
Usefull methods:

- `Character.isUpperCase(<char>)`
- `Character.isDigit(<char>)`
- `Character.isWhitespace(<char>)`
:::


### Check password list

- [ ] Commit and Push the code of the last exercise
- [ ] Complete method `checkPasswordsList()`

You will write a method that takes a list of passwords (ArrayList<String>) and checks their strength. 

The method should return a HashMap where:

- The keys are the passwords
- The values are true if the password is strong, false otherwise

### Generate a Random Password

**Objective:** Implement a method to generate a secure random password that includes at least:  

- ✅ 1 uppercase letter  
- ✅ 1 lowercase letter  
- ✅ 1 digit  
- ✅ 1 special character  

1. Ensure length is at least 4
2. Create a list of characters
3. Add at least one character from each group  
4. Fill the remaining characters randomly from all groups
5. Shuffle the password to mix character types `Collections.shuffle(<myList>)`
6. Convert the list into a *String* and return it

- [ ] Complete method `generatePassword()`

::: {.callout-tip title="Generate random int between 0 and 20"}
```{.java}
SecureRandom random = new SecureRandom();
System.out.println(random.nextInt(21));
```
:::


### Login System

Complete file *Login.java*:

- [ ] Loads csv file *data/user_hashpwd.csv* containing usernames and hashed passwords
- [ ] Ask for a username
- [ ] If username exists, ask for password
- [ ] If login succeeds, print **Login successful!** and exit, else ask again username

Bonus:

- After entering username, give 3 chances to input the correct password
- If all 3 attempts fail, restart username input

::: {.callout-tip title="Use a Scanner"}
```{.java}
Scanner scanner = new Scanner(System.in);

System.out.print("Enter username: ");
String username = scanner.nextLine();

scanner.close();
```
:::
