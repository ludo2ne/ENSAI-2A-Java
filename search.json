[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Java",
    "section": "",
    "text": "TP1 : Classes, Objects, Attributes, Methods\nTP2 : Full-Fledged Object Oriented Programming"
  },
  {
    "objectID": "index.html#tp",
    "href": "index.html#tp",
    "title": "Java",
    "section": "",
    "text": "TP1 : Classes, Objects, Attributes, Methods\nTP2 : Full-Fledged Object Oriented Programming"
  },
  {
    "objectID": "doc/tp/tp1.html",
    "href": "doc/tp/tp1.html",
    "title": "Java - TP1",
    "section": "",
    "text": "Langage orienté objet\nCompilé en bytecode puis exécuté par la JVM\n\nfichier.java ➡️ compilation ➡️ fichier.class ➡️ éxécution ➡️ run\ncompiler : javac fichier.java\néxécuter : java fichier\n\nPoints-virgules pour terminer les déclarations\nAccolades pour délimiter les blocs de code\nFortement typé statiquement\n\nvous devez déclarer le type de chaque variable\nces types sont vérifiés à la compilation\n\nConventions de nommage : utilisation du CamelCase\n\nclasse : première lettre MAJUSCULE, ex : VeloElectrique\nméthodes et variables : première lettre minuscule, ex : ajouterPanier()\n\n\nclass HelloWorld {\n    public static void main(String[] args) { \n        String message = \"Hello World!\"; \n        System.out.println(message);\n    }\n}"
  },
  {
    "objectID": "doc/tp/tp1.html#java-en-quelques-mots",
    "href": "doc/tp/tp1.html#java-en-quelques-mots",
    "title": "Java - TP1",
    "section": "",
    "text": "Langage orienté objet\nCompilé en bytecode puis exécuté par la JVM\n\nfichier.java ➡️ compilation ➡️ fichier.class ➡️ éxécution ➡️ run\ncompiler : javac fichier.java\néxécuter : java fichier\n\nPoints-virgules pour terminer les déclarations\nAccolades pour délimiter les blocs de code\nFortement typé statiquement\n\nvous devez déclarer le type de chaque variable\nces types sont vérifiés à la compilation\n\nConventions de nommage : utilisation du CamelCase\n\nclasse : première lettre MAJUSCULE, ex : VeloElectrique\nméthodes et variables : première lettre minuscule, ex : ajouterPanier()\n\n\nclass HelloWorld {\n    public static void main(String[] args) { \n        String message = \"Hello World!\"; \n        System.out.println(message);\n    }\n}"
  },
  {
    "objectID": "doc/tp/tp1.html#introduction",
    "href": "doc/tp/tp1.html#introduction",
    "title": "Java - TP1",
    "section": "2 Introduction",
    "text": "2 Introduction\n\n\n\n\n\n\nConseil\n\n\n\n\nSur votre disque P:, créez un dossier Java, puis à l’intérieur, créez un dossier TP1\nSur Moodle, téléchargez le sujet et le code de départ : JavaTP1.zip\n\nEnregistrez ces fichiers dans votre dossier TP1\nDézippez le fichier JavaTP1.zip\n\n\n\n\n\nOuvrez Visual Studio Code\n\nFile &gt; Open Folder\n\nAllez dans le dossier JavaTP1\nUn clic sur array_project , ensuite Sélectionner un dossier\n\nOuvrez un terminal (Terminal &gt; New)\n\n\nLisez le code du fichier ArrayListExample.java\n\ncompilez le fichier : javac -d bin ./src/edu/ensai/ArrayListExample.java\néxécutez le programme : java -cp bin edu.ensai.ArrayListExample\n\n\ni++ et ++i\n    int n = 10;\n    System.out.println(n++);\n    System.out.println(n);\n    n = 10;\n    System.out.println(++n);\n    System.out.println(n);\n\n\nCommandes Powershell\n\n\n\n\n\n\n\nCommande\nDescription\n\n\n\n\ncd [directory]\nChange le répertoire de travail\n\n\ncd P:\nAller dans le lecteur P:\n\n\ncd ..\nRetour dans le dossier parent\n\n\ndir\nListe le contenu du répertoire courant\n\n\ntree /F\nVisualiser l’arborscence\n\n\nmkdir [directory]\nCrée un nouveau répertoire\n\n\ndel [file]\nSupprime un fichier\n\n\ncopy [source] [dest]\nCopie un fichier ou un répertoire\n\n\nmove [source] [dest]\nDéplace un fichier ou un répertoire\n\n\ncat [file]\nAffiche le contenu d’un fichier"
  },
  {
    "objectID": "doc/tp/tp1.html#exercices",
    "href": "doc/tp/tp1.html#exercices",
    "title": "Java - TP1",
    "section": "3 Exercices",
    "text": "3 Exercices\n\n3.1 Exercice 1\n\nFile &gt; Open Folder\nAllez dans le dossier JavaTP1\nUn clic sur car_project , ensuite Sélectionner un dossier\n\n\n\n3.2 Exercice 2\n\nFile &gt; Open Folder\nAllez dans le dossier JavaTP1\nUn clic sur domino_project, ensuite Sélectionner un dossier"
  },
  {
    "objectID": "doc/tp/tp1.html#une-classe",
    "href": "doc/tp/tp1.html#une-classe",
    "title": "Java - TP1",
    "section": "4 Une classe",
    "text": "4 Une classe\n/**\n * A Student\n */\npublic class Student {\n    // Attributs\n    private String name;\n    private int age;\n\n    /**\n     * Constructor\n     */\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n\n    // -------------------------------------------------------\n    // Getters et Setters\n    // -------------------------------------------------------\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        if (age &gt; 0) {\n            this.age = age;\n        } else {\n            System.out.println(\"L'âge doit être supérieur à zéro.\");\n        }\n    }\n    \n    // -------------------------------------------------------\n    // Methods\n    // -------------------------------------------------------\n\n    @Override\n    public String toString() {\n        return \"Student{\" +\n                \"name='\" + name + '\\'' +\n                \", age=\" + age +\n                '}';\n    }\n\n    /**\n     * Main method\n     */\n    public static void main(String[] args) {\n\n        // Création d'un objet Student\n        Student student = new Student(\"John Doe\", 20);\n        System.out.println(student);\n    }\n}"
  },
  {
    "objectID": "doc/tp/tp2.html",
    "href": "doc/tp/tp2.html",
    "title": "Java - TP2",
    "section": "",
    "text": "Langage orienté objet\nCompilé en bytecode puis exécuté par la JVM\n\nfichier.java (dossier src) ➡️ compilation ➡️ fichier.class (dossier bin) ➡️ éxécution ➡️ run\ncompiler : javac fichier.java\néxécuter : java fichier\n\nPoints-virgules pour terminer les déclarations\nAccolades pour délimiter les blocs de code\nFortement typé statiquement\n\nvous devez déclarer le type de chaque variable\nces types sont vérifiés à la compilation\n\nConventions de nommage : utilisation du CamelCase\n\nclasse : première lettre MAJUSCULE, ex : VeloElectrique\nméthodes et variables : première lettre minuscule, ex : ajouterPanier()"
  },
  {
    "objectID": "doc/tp/tp2.html#rappels-sur-java",
    "href": "doc/tp/tp2.html#rappels-sur-java",
    "title": "Java - TP2",
    "section": "",
    "text": "Langage orienté objet\nCompilé en bytecode puis exécuté par la JVM\n\nfichier.java (dossier src) ➡️ compilation ➡️ fichier.class (dossier bin) ➡️ éxécution ➡️ run\ncompiler : javac fichier.java\néxécuter : java fichier\n\nPoints-virgules pour terminer les déclarations\nAccolades pour délimiter les blocs de code\nFortement typé statiquement\n\nvous devez déclarer le type de chaque variable\nces types sont vérifiés à la compilation\n\nConventions de nommage : utilisation du CamelCase\n\nclasse : première lettre MAJUSCULE, ex : VeloElectrique\nméthodes et variables : première lettre minuscule, ex : ajouterPanier()"
  },
  {
    "objectID": "doc/tp/tp2.html#datalab",
    "href": "doc/tp/tp2.html#datalab",
    "title": "Java - TP2",
    "section": "2 Datalab",
    "text": "2 Datalab\nIl est possible de faire le TP soit sur la VM, soit sur le datalab\n\nConnectez-vous sur le datalab\nLancez le service Java avec VScode puis suivez les instructions\nOuvrez un terminal (CTRL + ù)\n\nDans le terminal, collez git clone https://github.com/i-yamane/JavaOOP-Practical-2.git\n\nFile &gt; Open Folder &gt; /home/onyxia/work/JavaOOP-Practical-2/\nOuvrez à nouveau un terminal\n\nPositionnez-vous dans le bon dossier : cd JavaOOP-Practical-2\nCompilez le Main : javac -d bin -sourcepath src ./src/Main.java\nExéctuez le programme : java -classpath bin Main"
  },
  {
    "objectID": "doc/tp/tp2.html#introduction",
    "href": "doc/tp/tp2.html#introduction",
    "title": "Java - TP2",
    "section": "3 Introduction",
    "text": "3 Introduction\n\n\n\n\n\n\nConseil\n\n\n\n\nSur votre disque P:, créez un dossier Java, puis à l’intérieur, créez un dossier TP2\nSur Moodle, téléchargez le sujet et le code de départ : JavaTP2.zip\n\nEnregistrez ces fichiers dans votre dossier TP2\nDézippez le fichier JavaTP2.zip\n\n\n\n\n\nOuvrez Visual Studio Code\n\nFile &gt; Open Folder\n\nAllez dans le dossier JavaTP2\nUn clic sur array_project , ensuite Sélectionner un dossier\n\nOuvrez un terminal (Terminal &gt; New)"
  },
  {
    "objectID": "doc/tp/tp2.html#exercices",
    "href": "doc/tp/tp2.html#exercices",
    "title": "Java - TP2",
    "section": "4 Exercices",
    "text": "4 Exercices\n\n4.1 Exercice 1\n\nFile &gt; Open Folder\nAllez dans le dossier JavaTP2\nUn clic sur car_project , ensuite Sélectionner un dossier\n\n\n\n4.2 Exercice 2\n\nFile &gt; Open Folder\nAllez dans le dossier JavaTP2\nUn clic sur domino_project, ensuite Sélectionner un dossier"
  },
  {
    "objectID": "doc/tp/tp2.html#exemple-de-classe",
    "href": "doc/tp/tp2.html#exemple-de-classe",
    "title": "Java - TP2",
    "section": "5 Exemple de classe",
    "text": "5 Exemple de classe\nimport java.util.ArrayList;\n\n/**\n * Represents a student\n * Attributes : name, age, and a list of notes.\n */\npublic class Student {\n    private String name;\n    private int age;\n    private ArrayList&lt;Double&gt; notes;\n\n    /**\n     * Constructs a new Student object with the given name and age.\n     * @param name The name of the student.\n     * @param age The age of the student.\n     */\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n        this.notes = new ArrayList&lt;&gt;();     // empty list\n    }\n\n    // -------------------------------------------------------\n    // Getters and Setters (to access private attributes)\n    // -------------------------------------------------------\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    /**\n     * Sets the age of the student.\n     * @param age The age to set. It should be greater than zero.\n     * @throws IllegalArgumentException if the provided age is not greater than zero.\n     */\n    public void setAge(int age) {\n        if (age &lt;= 0) {\n            throw new IllegalArgumentException(\"Age must be greater than zero.\");\n        }\n        this.age = age;\n    }\n    \n    // -------------------------------------------------------\n    // Methods\n    // -------------------------------------------------------\n\n    /**\n     * @return A string representation of the Student object.\n     */\n    @Override\n    public String toString() {\n        return \"Student(\" +\n                \"name='\" + this.name + '\\'' +\n                \", age=\" + this.age +\n                ')';\n    }\n\n    /**\n     * Adds a note to the student's list of notes.\n     * @param note The note to be added.\n     */\n    public void addNote(double note) {\n        this.notes.add(note);\n    }\n\n    /**\n     * Computes the average note of the student.\n     * @return The average note of the student.\n     * @throws ArithmeticException if there are no notes present.\n     */\n    public double computeAverage() {\n        if (this.notes.isEmpty()) {\n            throw new ArithmeticException(\"Cannot compute average. No notes available.\");\n        }\n\n        double sum = 0.0;\n        for (double note : this.notes) {\n            sum += note;\n        }\n        return sum / this.notes.size();\n    }\n\n\n    /**\n     * Main method\n     */\n    public static void main(String[] args) {\n        Student student = new Student(\"Eva\", 20);\n        student.addNote(17.5);\n        student.addNote(12.0);\n        student.addNote(20.0);\n        \n        System.out.println(student);\n        System.out.println(\"Average Note: \" + student.computeAverage());\n    }\n}"
  },
  {
    "objectID": "doc/tp/tp2.html#modèle-de-classe",
    "href": "doc/tp/tp2.html#modèle-de-classe",
    "title": "Java - TP2",
    "section": "6 Modèle de classe",
    "text": "6 Modèle de classe\n/**\n * Represents a ...\n */\npublic class ClassName {\n    private String attribute1;\n    private int attribute2;\n\n    /**\n     * Constructs a new ...\n     * @param parameter1 parameter1_description\n     * @param parameter2 parameter2_description\n     */\n    public ClassName(String parameter1, int parameter2) {\n        this.attribute1 = parameter1;\n        this.attribute2 = parameter2;\n    }\n\n\n    // -------------------------------------------------------\n    // Methods\n    // -------------------------------------------------------\n\n    /**\n     * No parameter, return void\n     */\n    public void print_attribute1() {\n        System.out.println(this.attribute1);\n    }\n    \n    /**\n     * Increment value of attribute2\n     * A parameter, return void\n     * @param increment increment\n     */\n    public void increment_attribute2(int increment) {\n        this.attribute2 += increment;\n    }\n    \n    /**\n     * Checks if attribute2 is odd.\n     *\n     * @return true if attribute2 is odd, false otherwise.\n     */\n    public boolean isAttribute2Odd() {\n        return attribute2 % 2 != 0;\n    }\n\n\n    /**\n     * Main method\n     */\n    public static void main(String[] args) {\n\n        ClassName c = new ClassName(\"\", 0);\n        c.increment_attribute2(5);\n        System.out.println(c.isAttribute2Odd());\n    }\n}"
  }
]