[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Java",
    "section": "",
    "text": "TP1 : Classes, Objects, Attributes, Methods\nTP2 : Full-Fledged Object Oriented Programming\nTP3 : Enums, Containers, Exceptions\nTP4 : Unit Tests, OOP"
  },
  {
    "objectID": "index.html#tp",
    "href": "index.html#tp",
    "title": "Java",
    "section": "",
    "text": "TP1 : Classes, Objects, Attributes, Methods\nTP2 : Full-Fledged Object Oriented Programming\nTP3 : Enums, Containers, Exceptions\nTP4 : Unit Tests, OOP"
  },
  {
    "objectID": "index.html#bibliography",
    "href": "index.html#bibliography",
    "title": "Java",
    "section": "Bibliography",
    "text": "Bibliography\n\nJava Tutorial, w3schools\n\n\nFR\n\nDéveloppons en Java, Jean-Michel DOUDOUX\nApprenez à programmer en Java, Zeste de savoir"
  },
  {
    "objectID": "doc/tp/tp3.html",
    "href": "doc/tp/tp3.html",
    "title": "Java - TP3",
    "section": "",
    "text": "classes dont on limite les objets que l’on peut créer\ndans l’exemple ci-dessous, on ne peut créer que 3 objets différents\n\nle constructeur est privé, ce qui interdit la création d’objets de l’enum JourSemaine avec d’autres paramètres\n\n\n\n\nJourSemaine.java\n\npublic enum JourSemaine {\n\n    LUNDI (\"Lundi\", 1),\n    MARDI (\"Mardi\", 2),\n    MERCREDI (\"Mercredi\", 3);\n \n    private String nom;\n    private int numero;\n \n    private JourSemaine(String nom, int numero) {\n        this.nom = nom;\n        this.numero = numero;\n    }\n \n    @Override\n    public String toString() {\n        return \"JourSemaine(\" + this.nom + \", \" + this.numero + \")\";\n    }\n}\n\n\n\nMain.java\n\npublic class Main {\n    public static void main(String args[]){\n        JourSemaine js = JourSemaine.LUNDI;\n\n        System.out.println(js);\n    }\n}\n\n\n\n\nInfos détaillées sur le site de Jean-Michel Doudoux :\n\nListe\nSet : pas de doublons\nMap : clé-valeurs\n\n\n\n\nUne exception est levée lorsqu’une erreur est détectée.\n\n\nFrac.java\n\npublic class Frac {\n\n    private int num;\n    private int denom;\n\n    public Frac(int num, int denom) {\n      this.num = num;\n      this.denom = denom;\n    }\n\n    public float valeur_approchee(){\n      return this.num / this.denom;\n    }\n}\n\n\n\nMain.java\n\npublic class Main{\n    public static void main(java.lang.String[] args) {\n      Frac f1 = new Frac(1, 0);\n      System.out.println(f1.valeur_approchee());\n      // Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n    }\n}\n\n\n\n\n\nnous identifions le bloc de code qui pourrait poser souci\nnous l’encapsulons dans un bloc try / catch\n\n\n\nFrac.java\n\npublic class Frac {\n\n    private int num;\n    private int denom;\n\n    public Frac(int num, int denom) {\n      this.num = num;\n      this.denom = denom;\n    }\n\n    public float valeur_approchee(){\n        float res = 0;\n\n        try{\n            res = this.num / this.denom;\n        }\n        catch(ArithmeticException e){\n            System.out.println(\"Exception levée : \" + e.toString());\n            System.out.println(\"Cause : \" + e.getMessage());\n        }\n        return res;      \n    }\n}\n\nCette fois-ci, le même Main renvoie :\nException levée : java.lang.ArithmeticException: / by zero\nCause : / by zero\n0.0\n\n\n\nUne autre possibilité est de dire que la méthode valeur_approchee() pourrait renvoyer une exception (mot clé : throws).\n\n\n\n\n\n\nCaution\n\n\n\n\nthrows Exception\n\ndans la signature d’une méthode\nindique que la méthode peut retourner une exception\n\nthrow new Exception()\n\ndéclenche volontairement une exception\n\n\n\n\n\n\nFrac.java\n\npublic class Frac {\n\n    private int num;\n    private int denom;\n\n    public Frac(int num, int denom) {\n      this.num = num;\n      this.denom = denom;\n    }\n\n    public float valeur_approchee() throws ArithmeticException{\n        if (this.denom == 0){\n            throw new ArithmeticException(\"Division par zéro\");\n        }\n        return this.num / this.denom;      \n    }\n}\n\nDans ce cas on dit que l’exception se propage. Elle devra être gérée “plus haut”, par exemple en mettant un bloc try / catch dans le Main\n\n\nMain.java\n\npublic class Main{\n    public static void main(java.lang.String[] args) {\n        Frac f1 = new Frac(1, 0);\n\n        try{\n            System.out.println(f1.valeur_approchee());\n        }catch(ArithmeticException e){\n            System.out.println(\"Impossible de diviser par zéro\");\n        }      \n    }\n}\n\n\n\n\nIl est également possible de créer ses propres exceptions.\nPar exemple, si vous décidez que le numérateur ne doit pas être impair, vous pouvez créer :\n\n\nNumerateurImpairException.java\n\npublic class NumerateurImpairException extends Exception{\n    public NumerateurImpairException(){\n        super(\"Le numérateur ne doit pas être impair\");\n    }\n}\n\nVous pouvez ensuite modifier le constructeur pour lever au cas où cette exception.\n\n\nNumerateurImpairException.java\n\npublic class Frac {\n\n    private int num;\n    private int denom;\n\n    public Frac(int num, int denom) throws NumerateurImpairException{\n\n      if (num % 2 != 0){\n          throw new NumerateurImpairException();\n      }\n      this.num = num;\n      this.denom = denom;\n    }\n}\n\nEt enfin vous gérez l’exception dans le Main.\n\n\nMain.java\n\npublic class Main{\n    public static void main(java.lang.String[] args) {\n        try{\n            Frac f1 = new Frac(1, 0);\n        }catch(Exception e){\n            System.out.println(e.getMessage());\n        }\n        //Le numérateur ne doit pas être impair\n    }\n}"
  },
  {
    "objectID": "doc/tp/tp3.html#rappels",
    "href": "doc/tp/tp3.html#rappels",
    "title": "Java - TP3",
    "section": "",
    "text": "classes dont on limite les objets que l’on peut créer\ndans l’exemple ci-dessous, on ne peut créer que 3 objets différents\n\nle constructeur est privé, ce qui interdit la création d’objets de l’enum JourSemaine avec d’autres paramètres\n\n\n\n\nJourSemaine.java\n\npublic enum JourSemaine {\n\n    LUNDI (\"Lundi\", 1),\n    MARDI (\"Mardi\", 2),\n    MERCREDI (\"Mercredi\", 3);\n \n    private String nom;\n    private int numero;\n \n    private JourSemaine(String nom, int numero) {\n        this.nom = nom;\n        this.numero = numero;\n    }\n \n    @Override\n    public String toString() {\n        return \"JourSemaine(\" + this.nom + \", \" + this.numero + \")\";\n    }\n}\n\n\n\nMain.java\n\npublic class Main {\n    public static void main(String args[]){\n        JourSemaine js = JourSemaine.LUNDI;\n\n        System.out.println(js);\n    }\n}\n\n\n\n\nInfos détaillées sur le site de Jean-Michel Doudoux :\n\nListe\nSet : pas de doublons\nMap : clé-valeurs\n\n\n\n\nUne exception est levée lorsqu’une erreur est détectée.\n\n\nFrac.java\n\npublic class Frac {\n\n    private int num;\n    private int denom;\n\n    public Frac(int num, int denom) {\n      this.num = num;\n      this.denom = denom;\n    }\n\n    public float valeur_approchee(){\n      return this.num / this.denom;\n    }\n}\n\n\n\nMain.java\n\npublic class Main{\n    public static void main(java.lang.String[] args) {\n      Frac f1 = new Frac(1, 0);\n      System.out.println(f1.valeur_approchee());\n      // Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n    }\n}\n\n\n\n\n\nnous identifions le bloc de code qui pourrait poser souci\nnous l’encapsulons dans un bloc try / catch\n\n\n\nFrac.java\n\npublic class Frac {\n\n    private int num;\n    private int denom;\n\n    public Frac(int num, int denom) {\n      this.num = num;\n      this.denom = denom;\n    }\n\n    public float valeur_approchee(){\n        float res = 0;\n\n        try{\n            res = this.num / this.denom;\n        }\n        catch(ArithmeticException e){\n            System.out.println(\"Exception levée : \" + e.toString());\n            System.out.println(\"Cause : \" + e.getMessage());\n        }\n        return res;      \n    }\n}\n\nCette fois-ci, le même Main renvoie :\nException levée : java.lang.ArithmeticException: / by zero\nCause : / by zero\n0.0\n\n\n\nUne autre possibilité est de dire que la méthode valeur_approchee() pourrait renvoyer une exception (mot clé : throws).\n\n\n\n\n\n\nCaution\n\n\n\n\nthrows Exception\n\ndans la signature d’une méthode\nindique que la méthode peut retourner une exception\n\nthrow new Exception()\n\ndéclenche volontairement une exception\n\n\n\n\n\n\nFrac.java\n\npublic class Frac {\n\n    private int num;\n    private int denom;\n\n    public Frac(int num, int denom) {\n      this.num = num;\n      this.denom = denom;\n    }\n\n    public float valeur_approchee() throws ArithmeticException{\n        if (this.denom == 0){\n            throw new ArithmeticException(\"Division par zéro\");\n        }\n        return this.num / this.denom;      \n    }\n}\n\nDans ce cas on dit que l’exception se propage. Elle devra être gérée “plus haut”, par exemple en mettant un bloc try / catch dans le Main\n\n\nMain.java\n\npublic class Main{\n    public static void main(java.lang.String[] args) {\n        Frac f1 = new Frac(1, 0);\n\n        try{\n            System.out.println(f1.valeur_approchee());\n        }catch(ArithmeticException e){\n            System.out.println(\"Impossible de diviser par zéro\");\n        }      \n    }\n}\n\n\n\n\nIl est également possible de créer ses propres exceptions.\nPar exemple, si vous décidez que le numérateur ne doit pas être impair, vous pouvez créer :\n\n\nNumerateurImpairException.java\n\npublic class NumerateurImpairException extends Exception{\n    public NumerateurImpairException(){\n        super(\"Le numérateur ne doit pas être impair\");\n    }\n}\n\nVous pouvez ensuite modifier le constructeur pour lever au cas où cette exception.\n\n\nNumerateurImpairException.java\n\npublic class Frac {\n\n    private int num;\n    private int denom;\n\n    public Frac(int num, int denom) throws NumerateurImpairException{\n\n      if (num % 2 != 0){\n          throw new NumerateurImpairException();\n      }\n      this.num = num;\n      this.denom = denom;\n    }\n}\n\nEt enfin vous gérez l’exception dans le Main.\n\n\nMain.java\n\npublic class Main{\n    public static void main(java.lang.String[] args) {\n        try{\n            Frac f1 = new Frac(1, 0);\n        }catch(Exception e){\n            System.out.println(e.getMessage());\n        }\n        //Le numérateur ne doit pas être impair\n    }\n}"
  },
  {
    "objectID": "doc/tp/tp3.html#avant-de-commencer",
    "href": "doc/tp/tp3.html#avant-de-commencer",
    "title": "Java - TP3",
    "section": "2 Avant de commencer",
    "text": "2 Avant de commencer\n\nSur votre disque P:,\n\ncréez un dossier Java,\nà l’intérieur, créez un dossier TP3\nOuvrez et enregistrez le sujet\n\nRécupérez le dépôt sur Moodle"
  },
  {
    "objectID": "doc/tp/tp3.html#datalab",
    "href": "doc/tp/tp3.html#datalab",
    "title": "Java - TP3",
    "section": "3 Datalab",
    "text": "3 Datalab\nIl est possible de faire le TP soit sur la VM, soit sur le datalab\n\nConnectez-vous sur le datalab\nLancez le service Java avec VScode puis suivez les instructions\nDans l’explorer à gauche &gt; clic droit &gt; Upload\n\nChargez le fichier JavaTP3-base.zip\n\nOuvrez un terminal\n\nrentrez unzip JavaTP3-base.zip pour extraire les fichiers\n\nFile &gt; Open Folder &gt; /home/onyxia/work/JavaTP3-base/\n\n⚠️ important d’ouvrir le bon dossier !\n\nOuvrez un terminal (CTRL+ù)\n\nPositionnez-vous dans le bon dossier : cd JavaTP3-base\nCompilez le Main : javac -d bin -sourcepath src ./src/edu/ensai/pokemon/main/Main.java\nExécutez le programme : java -cp bin edu.ensai.pokemon.main.Main"
  },
  {
    "objectID": "doc/tp/tp3.html#vm",
    "href": "doc/tp/tp3.html#vm",
    "title": "Java - TP3",
    "section": "4 VM",
    "text": "4 VM\n\nOuvrez Visual Studio Code\n\nFile &gt; Open Folder\nAllez dans le dossier TP3\nUn clic sur JavaTP3-base, ensuite Sélectionner un dossier\n\nOuvrez un terminal (CTRL+ù)\n\nPositionnez-vous dans le bon dossier : cd JavaTP3-base\nCompilez le Main : javac -d bin -sourcepath src .\\src\\edu\\ensai\\pokemon\\main\\Main.java\nExécutez le programme : java -cp bin edu.ensai.pokemon.main.Main"
  },
  {
    "objectID": "doc/tp/tp3.html#exercices",
    "href": "doc/tp/tp3.html#exercices",
    "title": "Java - TP3",
    "section": "5 Exercices",
    "text": "5 Exercices\n\n5.1 Exercice 1\n\nTransformez la classe Species en Enum\nAdaptez le code du Main\n\n\n\n5.2 Exercice 2\n\nPlayer est un singleton, on ne peut en créer qu’une seule instance\nClasse Inventory\nAjouter à Player un attribut de type Inventory\nDans le main, appeler l’instance de Player\n\nCréer et ajouter un objet à l’inventaire\nAfficher le montant total de l’inventaire\n\n\nhttps://refactoring.guru/fr/replace-inheritance-with-delegation\n\n\n5.3 Exercice 3\n\n\n5.4 Exercice 4"
  },
  {
    "objectID": "doc/tp/tp3.html#exemple-de-classe",
    "href": "doc/tp/tp3.html#exemple-de-classe",
    "title": "Java - TP3",
    "section": "6 Exemple de classe",
    "text": "6 Exemple de classe\nimport java.util.ArrayList;\n\n/**\n * Represents a student\n * Attributes : name, age, and a list of notes.\n */\npublic class Student {\n    private String name;\n    private int age;\n    private ArrayList&lt;Double&gt; notes;\n\n    /**\n     * Constructs a new Student object with the given name and age.\n     * @param name The name of the student.\n     * @param age The age of the student.\n     */\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n        this.notes = new ArrayList&lt;&gt;();     // empty list\n    }\n\n    // -------------------------------------------------------\n    // Getters and Setters (to access private attributes)\n    // -------------------------------------------------------\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    /**\n     * Sets the age of the student.\n     * @param age The age to set. It should be greater than zero.\n     * @throws IllegalArgumentException if the provided age is not greater than zero.\n     */\n    public void setAge(int age) {\n        if (age &lt;= 0) {\n            throw new IllegalArgumentException(\"Age must be greater than zero.\");\n        }\n        this.age = age;\n    }\n    \n    // -------------------------------------------------------\n    // Methods\n    // -------------------------------------------------------\n\n    /**\n     * @return A string representation of the Student object.\n     */\n    @Override\n    public String toString() {\n        return \"Student(\" +\n                \"name='\" + this.name + '\\'' +\n                \", age=\" + this.age +\n                ')';\n    }\n\n    /**\n     * Adds a note to the student's list of notes.\n     * @param note The note to be added.\n     */\n    public void addNote(double note) {\n        this.notes.add(note);\n    }\n\n    /**\n     * Computes the average note of the student.\n     * @return The average note of the student.\n     * @throws ArithmeticException if there are no notes present.\n     */\n    public double computeAverage() {\n        if (this.notes.isEmpty()) {\n            throw new ArithmeticException(\"Cannot compute average. No notes available.\");\n        }\n\n        double sum = 0.0;\n        for (double note : this.notes) {\n            sum += note;\n        }\n        return sum / this.notes.size();\n    }\n\n\n    /**\n     * Main method\n     */\n    public static void main(String[] args) {\n        Student student = new Student(\"Eva\", 20);\n        student.addNote(17.5);\n        student.addNote(12.0);\n        student.addNote(20.0);\n        \n        System.out.println(student);\n        System.out.println(\"Average Note: \" + student.computeAverage());\n    }\n}"
  },
  {
    "objectID": "doc/tp/tp3.html#modèle-de-classe",
    "href": "doc/tp/tp3.html#modèle-de-classe",
    "title": "Java - TP3",
    "section": "7 Modèle de classe",
    "text": "7 Modèle de classe\n/**\n * Represents a ...\n */\npublic class ClassName {\n    private String attribute1;\n    private int attribute2;\n\n    /**\n     * Constructs a new ...\n     * @param parameter1 parameter1_description\n     * @param parameter2 parameter2_description\n     */\n    public ClassName(String parameter1, int parameter2) {\n        this.attribute1 = parameter1;\n        this.attribute2 = parameter2;\n    }\n\n\n    // -------------------------------------------------------\n    // Methods\n    // -------------------------------------------------------\n\n    /**\n     * No parameter, return void\n     */\n    public void print_attribute1() {\n        System.out.println(this.attribute1);\n    }\n    \n    /**\n     * Increment value of attribute2\n     * A parameter, return void\n     * @param increment increment\n     */\n    public void increment_attribute2(int increment) {\n        this.attribute2 += increment;\n    }\n    \n    /**\n     * Checks if attribute2 is odd.\n     *\n     * @return true if attribute2 is odd, false otherwise.\n     */\n    public boolean isAttribute2Odd() {\n        return attribute2 % 2 != 0;\n    }\n\n\n    /**\n     * Main method\n     */\n    public static void main(String[] args) {\n\n        ClassName c = new ClassName(\"\", 0);\n        c.increment_attribute2(5);\n        System.out.println(c.isAttribute2Odd());\n    }\n}\n\n\n\n\n\nclassDiagram\n    class Item {\n        + name: String\n        + price: int\n        + isPermanent(): boolean\n        + isSingleUse(): boolean\n        + isUnusable(): boolean\n    }\n\n    class SingleUseItem {\n        - alreadyUsed: bool\n        + consume()\n    }\n\n\n    class Potion {\n        - hp_gain: int\n    }\n\n    class Sweet {\n        - xp_gain: int\n        + use(): int\n    }\n    \n    class Healer{\n        &lt;&lt;interface&gt;&gt;\n        + heal()\n    }\n\n    Item &lt;|-- SingleUseItem\n    Item &lt;|-- PermanentItem\n\n    SingleUseItem &lt;|-- Potion\n    SingleUseItem &lt;|-- Sweet\n    \n    Potion ..|&gt; Healer : implements"
  },
  {
    "objectID": "doc/tp/tp1.html",
    "href": "doc/tp/tp1.html",
    "title": "Introduction to Java syntax",
    "section": "",
    "text": "In this first tutorial, we’re simply going to familiarize ourselves with Java syntax, without using object-oriented programming.\nThis is why methods are defined as static. They are class methods. You don’t need to instantiate an object to call them."
  },
  {
    "objectID": "doc/tp/tp1.html#objectives",
    "href": "doc/tp/tp1.html#objectives",
    "title": "Introduction to Java syntax",
    "section": "",
    "text": "In this first tutorial, we’re simply going to familiarize ourselves with Java syntax, without using object-oriented programming.\nThis is why methods are defined as static. They are class methods. You don’t need to instantiate an object to call them."
  },
  {
    "objectID": "doc/tp/tp1.html#introduction",
    "href": "doc/tp/tp1.html#introduction",
    "title": "Introduction to Java syntax",
    "section": "1 Introduction",
    "text": "1 Introduction\nIn this tutorial, we will use the INSEE datalab.\nA service is available with Visual Studio Code and Java.\n\nLogin to SSPCloud\nLaunch the service VScode-Java\n\n\n\n\n\n\n\nImportant\n\n\n\nYou won’t find this service in the basic catalog. You have to use the link above to launch it.\nIt uses a specific Docker image\n\n\n\nLogin to GitHub\nFork this repository: https://github.com/ludo2ne/ENSAI-2A-Java-TP/fork\nOn the main page of your fork, click on Code\nCopy https url to clipboard\nBack to VSCode in the Datalab, Clone the forked repository using this https url"
  },
  {
    "objectID": "doc/tp/tp1.html#visual-studio-code",
    "href": "doc/tp/tp1.html#visual-studio-code",
    "title": "Introduction to Java syntax",
    "section": "Visual Studio Code",
    "text": "Visual Studio Code\n🚧\n\nOpen Folder (ENSAI-2A-Java-TP)\n\n\n\n.vscode/settings.json\n\n{\n    \"editor.inlayHints.enabled\": \"off\",\n    \"editor.formatOnSave\": true,\n    \"java.saveActions.organizeImports\": true,\n}\n\n\n1.1 Shorcuts for windows\n\nSHIFT + ALT + A: Comment / Uncomment selected lines"
  },
  {
    "objectID": "doc/tp/tp1.html#exercices",
    "href": "doc/tp/tp1.html#exercices",
    "title": "Introduction to Java syntax",
    "section": "2 Exercices",
    "text": "2 Exercices\n\nOpen a terminal\n\nTerminal &gt; New Terminal (or CTRL + ù)\n\nGo to the folder ENSAI-2A-Java-TP/tp1/src\n\nif you need help, check out Unix basic commands\n\n\n\nCompile\n\na single Java file: javac MyClass.java\nall Java files: javac *.java\nspecify output directory for .class files (recommended): javac -d bin MyClass.java\n\n\n\nRun\n\n\n\n\n\n\nImportant\n\n\n\nTo run a class, it must have a main() method.\n\n\n\njava MyClass\nwhen .class files are in the bin/ directory: java -cp bin MyClass\n\n\n\n2.1 Brute force\nYou will write a Java method that attempts to brute-force a hashed 6-digit numeric password.\n\nThe method will iterate through all numbers from 000000 to 999999\nFor each number, Generate and compare hash with the given target hash\nIf a match is found, return the original number else return null\n\n\n\nOpen File Password.java\nComplete method bruteForce6Digit()\n\n\n\n\n\n\n\nTip\n\n\n\n\nUse method hashPassword()\nString.format(\"%06d\", 123)➡️ “000123”\n\n\n\n\n\n2.2 Strong password\n\nComplete method isStrongPassword()\n\nYou will write a Java method to check if a password is strong. A password is strong if:\n\n✅ It has at least 12 characters\n✅ It contains at least one uppercase letter\n✅ It contains at least one lowercase letter\n✅ It contains at least one digit\n❌ It does not contain whitespace\n\n\n\n\n\n\n\nTip\n\n\n\nUsefull methods:\n\nCharacter.isUpperCase(&lt;char&gt;)\nCharacter.isDigit(&lt;char&gt;)\nCharacter.isWhitespace(&lt;char&gt;)\n\n\n\n\n\n2.3 Check password list\n\nComplete method checkPasswordsList()\n\nYou will write a method that takes a list of passwords (ArrayList) and checks their strength.\nThe method should return a HashMap where:\n\nThe keys are the passwords\nThe values are true if the password is strong, false otherwise\n\n\n\n2.4 Generate a Random Password\nObjective: Implement a method to generate a secure random password that includes at least:\n\n✅ 1 uppercase letter\n\n✅ 1 lowercase letter\n\n✅ 1 digit\n\n✅ 1 special character\n\n\nEnsure length is at least 4\nCreate a list of characters\nAdd at least one character from each group\n\nFill the remaining characters randomly from all groups\nShuffle the password to mix character types Collections.shuffle(&lt;myList&gt;)\nConvert the list into a String and return it\n\n\nComplete method generatePassword()\n\n\n\n\n\n\n\nGenerate random int between 0 and 20\n\n\n\nSecureRandom random = new SecureRandom();\nSystem.out.println(random.nextInt(21));\n\n\n\n\n2.5 Login System\nComplete file Login.java:\n\nLoads csv file data/user_hashpwd.csv containing usernames and hashed passwords\nAsk for a username\nIf username exists, ask for password\nIf login succeeds, print Login successful! and exit, else ask again username\n\nBonus:\n\nAfter entering username, give 3 chances to input the correct password\nIf all 3 attempts fail, restart username input\n\n\n\n\n\n\n\nUse a Scanner\n\n\n\nScanner scanner = new Scanner(System.in);\n\nSystem.out.print(\"Enter username: \");\nString username = scanner.nextLine();\n\nscanner.close();"
  },
  {
    "objectID": "doc/cours/collections.html#maps",
    "href": "doc/cours/collections.html#maps",
    "title": "Collections",
    "section": "Maps",
    "text": "Maps"
  },
  {
    "objectID": "doc/cours/collections.html#sets",
    "href": "doc/cours/collections.html#sets",
    "title": "Collections",
    "section": "Sets",
    "text": "Sets"
  },
  {
    "objectID": "doc/cours/collections-slides.html#lists",
    "href": "doc/cours/collections-slides.html#lists",
    "title": "Collections",
    "section": "Lists",
    "text": "Lists"
  },
  {
    "objectID": "doc/cours/collections-slides.html#maps",
    "href": "doc/cours/collections-slides.html#maps",
    "title": "Collections",
    "section": "Maps",
    "text": "Maps"
  },
  {
    "objectID": "doc/cours/collections-slides.html#sets",
    "href": "doc/cours/collections-slides.html#sets",
    "title": "Collections",
    "section": "Sets",
    "text": "Sets"
  },
  {
    "objectID": "doc/cours/classes.html",
    "href": "doc/cours/classes.html",
    "title": "Java Classes",
    "section": "",
    "text": "Encapsulation\nInheritance\nPolymorphism\n\n\n\n\nEncapsulation: Bundling data and methods together\nInheritance: Deriving new classes from existing ones\nPolymorphism: One interface, multiple behaviors"
  },
  {
    "objectID": "doc/cours/classes.html#oop-principles",
    "href": "doc/cours/classes.html#oop-principles",
    "title": "Java Classes",
    "section": "",
    "text": "Encapsulation\nInheritance\nPolymorphism\n\n\n\n\nEncapsulation: Bundling data and methods together\nInheritance: Deriving new classes from existing ones\nPolymorphism: One interface, multiple behaviors"
  },
  {
    "objectID": "doc/cours/classes.html#a-class",
    "href": "doc/cours/classes.html#a-class",
    "title": "Java Classes",
    "section": "A class 🚲",
    "text": "A class 🚲\n\n\nBike.java\n\npublic class Bike {\n    // Attributes\n    private String color;\n    private int speed;\n    private boolean pannierRacks;\n\n    // Constructor\n    public Bike(String color, boolean pannierRacks) {\n        this.color = color;\n        this.speed = 0;\n        this.pannierRacks = pannierRacks;\n    }\n\n    // Method\n    public void accelerate(int increment) {\n        if (increment &gt; 0) {\n            this.speed += increment;\n        }\n    }\n\n    // Getter\n    public int getSpeed() {\n        return this.speed;\n    }\n}"
  },
  {
    "objectID": "doc/cours/classes.html#attributes",
    "href": "doc/cours/classes.html#attributes",
    "title": "Java Classes",
    "section": "Attributes",
    "text": "Attributes\n\n\nBike.java\n\npublic class Bike {\n    // Attributes\n    private String color;\n    private int speed;\n    private boolean pannierRacks;\n\n    private static int nbBikes = 0;\n\n\nstatic: class attribute"
  },
  {
    "objectID": "doc/cours/classes.html#constructor",
    "href": "doc/cours/classes.html#constructor",
    "title": "Java Classes",
    "section": "Constructor",
    "text": "Constructor\n\n\nBike.java\n\npublic class Bike {\n    public Bike(String color, boolean pannierRacks) {\n        this.color = color;\n        this.speed = 0;\n        this.pannierRacks = pannierRacks;\n    }\n\n\nthis : Refers to the current object\n\n\nCreate a Bike Object\nBike greenBike = new Bike(\"Green\", true);\n\nBike: type of the variable\ngreenBike: name of the variable\nnew: Memory allocation\nBike(…): constructor call\n\n\n\nJava only uses positional arguments\nYou can create several constructors\n\n\n\n\nDefault Constructor\n\nIf no constructor is provided\n\nBike myBike = new Bike();\n\ncolor: null\npannierRacks: false\n\n\n\nError if another constructor is provided\n\n\n\n\nCall a method\nBike greenBike = new Bike(\"Green\", true);"
  },
  {
    "objectID": "doc/cours/classes.html#main-method",
    "href": "doc/cours/classes.html#main-method",
    "title": "Java Classes",
    "section": "Main method",
    "text": "Main method\n\nEntry point\nGenerally in a class called Main\n\npublic static void main(String[] args) {\n    // Program logic here\n}\n\n\npublic : Makes the method accessible from anywhere (required for JVM to call it)\nstatic : Allows calling the method without creating an instance of the class.\nvoid : The method does not return any value.\nmain The method name that JVM looks for to start execution.\nString[] args Array of command-line arguments passed when running the program"
  },
  {
    "objectID": "doc/cours/classes.html#inheritance",
    "href": "doc/cours/classes.html#inheritance",
    "title": "Java Classes",
    "section": "Inheritance",
    "text": "Inheritance\n\nParent class\n\n\nVehicle.java\n\npublic class Vehicle {\n    private String color;\n    private int speed;\n\n    public Vehicle(String color) {\n        this.color = color;\n        this.speed = 0;\n    }\n\n\n\nSubclass\n\nextends: inherit\nsuper(): constructor of the parent class\nsuper.foo(): method foo() of the parent class\n\n\n\nBike.java\n\nimport Vehicle;\n\npublic class Bike extends Vehicle {\n    private boolean pannierRacks;\n\n    // Constructor\n    public Bike(String color) {\n        super(color);\n        this.pannierRacks = pannierRacks;\n    }\n\n\n\nAbstract\n\nabstract classes: cannot be instantiated\nabstract methods: Declared without implementation, must be overridden by subclasses\n\n\n\nVehicle.java\n\npublic abstract class Vehicle {\n    private String color;\n    private int speed;\n\n    public Vehicle(String color) {\n        this.color = color;\n        this.speed = 0;\n    }\n\n    public abstract void honk();  // abstract method to be implemented in subsclasses\n\n    public void accelerate(int increment) {\n        this.speed += increment;\n    }\n\n\n\nIs it possible to create a final abstract class?\nPrivate abstract method?\n\n\n\n\nOverride method\n\n\nBike.java\n\nimport Vehicle;\n\npublic class Bike extends Vehicle {\n    private boolean pannierRacks;\n\n    // Constructor\n    public Bike(String color) {\n        super(color);\n        this.pannierRacks = pannierRacks;\n    }\n\n    @Override\n    public abstract void honk(){\n        System.out.println(\"Dring\")\n    }\n\n    @Override\n    public void accelerate(int increment) {\n        this.speed += increment + 2;\n    }\n\n\n\nOverride final method?"
  },
  {
    "objectID": "doc/cours/classes.html#polymorphism",
    "href": "doc/cours/classes.html#polymorphism",
    "title": "Java Classes",
    "section": "Polymorphism",
    "text": "Polymorphism"
  },
  {
    "objectID": "doc/cours/classes.html#javadoc",
    "href": "doc/cours/classes.html#javadoc",
    "title": "Java Classes",
    "section": "JavaDoc",
    "text": "JavaDoc"
  },
  {
    "objectID": "doc/cours/classes.html#enum",
    "href": "doc/cours/classes.html#enum",
    "title": "Java Classes",
    "section": "Enum",
    "text": "Enum"
  },
  {
    "objectID": "doc/cours/classes-slides.html#oop-principles",
    "href": "doc/cours/classes-slides.html#oop-principles",
    "title": "Java Classes",
    "section": "OOP Principles",
    "text": "OOP Principles\n\n\nEncapsulation\nInheritance\nPolymorphism\n\n\n\n\nEncapsulation: Bundling data and methods together\nInheritance: Deriving new classes from existing ones\nPolymorphism: One interface, multiple behaviors"
  },
  {
    "objectID": "doc/cours/classes-slides.html#a-class",
    "href": "doc/cours/classes-slides.html#a-class",
    "title": "Java Classes",
    "section": "A class 🚲",
    "text": "A class 🚲\n\n\nBike.java\n\npublic class Bike {\n    // Attributes\n    private String color;\n    private int speed;\n    private boolean pannierRacks;\n\n    // Constructor\n    public Bike(String color, boolean pannierRacks) {\n        this.color = color;\n        this.speed = 0;\n        this.pannierRacks = pannierRacks;\n    }\n\n    // Method\n    public void accelerate(int increment) {\n        if (increment &gt; 0) {\n            this.speed += increment;\n        }\n    }\n\n    // Getter\n    public int getSpeed() {\n        return this.speed;\n    }\n}"
  },
  {
    "objectID": "doc/cours/classes-slides.html#attributes",
    "href": "doc/cours/classes-slides.html#attributes",
    "title": "Java Classes",
    "section": "Attributes",
    "text": "Attributes\n\n\nBike.java\n\npublic class Bike {\n    // Attributes\n    private String color;\n    private int speed;\n    private boolean pannierRacks;\n\n    private static int nbBikes = 0;\n\n\nstatic: class attribute"
  },
  {
    "objectID": "doc/cours/classes-slides.html#constructor",
    "href": "doc/cours/classes-slides.html#constructor",
    "title": "Java Classes",
    "section": "Constructor",
    "text": "Constructor\n\n\nBike.java\n\npublic class Bike {\n    public Bike(String color, boolean pannierRacks) {\n        this.color = color;\n        this.speed = 0;\n        this.pannierRacks = pannierRacks;\n    }\n\n\nthis : Refers to the current object"
  },
  {
    "objectID": "doc/cours/classes-slides.html#main-method",
    "href": "doc/cours/classes-slides.html#main-method",
    "title": "Java Classes",
    "section": "Main method",
    "text": "Main method\n\nEntry point\nGenerally in a class called Main\n\npublic static void main(String[] args) {\n    // Program logic here\n}\n\n\npublic : Makes the method accessible from anywhere (required for JVM to call it)\nstatic : Allows calling the method without creating an instance of the class.\nvoid : The method does not return any value.\nmain The method name that JVM looks for to start execution.\nString[] args Array of command-line arguments passed when running the program"
  },
  {
    "objectID": "doc/cours/classes-slides.html#inheritance",
    "href": "doc/cours/classes-slides.html#inheritance",
    "title": "Java Classes",
    "section": "Inheritance",
    "text": "Inheritance"
  },
  {
    "objectID": "doc/cours/classes-slides.html#polymorphism",
    "href": "doc/cours/classes-slides.html#polymorphism",
    "title": "Java Classes",
    "section": "Polymorphism",
    "text": "Polymorphism"
  },
  {
    "objectID": "doc/cours/classes-slides.html#javadoc",
    "href": "doc/cours/classes-slides.html#javadoc",
    "title": "Java Classes",
    "section": "JavaDoc",
    "text": "JavaDoc"
  },
  {
    "objectID": "doc/cours/classes-slides.html#enum",
    "href": "doc/cours/classes-slides.html#enum",
    "title": "Java Classes",
    "section": "Enum",
    "text": "Enum"
  },
  {
    "objectID": "doc/cours/advanced-slides.html#todo",
    "href": "doc/cours/advanced-slides.html#todo",
    "title": "Advanced Java",
    "section": "Todo 🚧",
    "text": "Todo 🚧\n\nOptional\nInterface\nStream\nSpring Boot\nHibernate\nMaven"
  },
  {
    "objectID": "doc/cours/advanced.html",
    "href": "doc/cours/advanced.html",
    "title": "Advanced Java",
    "section": "",
    "text": "Optional\nInterface\nStream\nSpring Boot\nHibernate\nMaven"
  },
  {
    "objectID": "doc/cours/advanced.html#todo",
    "href": "doc/cours/advanced.html#todo",
    "title": "Advanced Java",
    "section": "",
    "text": "Optional\nInterface\nStream\nSpring Boot\nHibernate\nMaven"
  },
  {
    "objectID": "doc/cours/code-slides.html#hello-world",
    "href": "doc/cours/code-slides.html#hello-world",
    "title": "Java Basics",
    "section": "Hello World",
    "text": "Hello World\n\n\nHelloWord.java\n\nclass HelloWorld {\n    public static void main(String[] args) { \n        String message = \"Hello World!\";\n        System.out.println(message);\n    }\n}\n\n\ncompile: javac HelloWord.java\n\ncreate HelloWord.class\n\nrun: java HelloWord\nexit : CTRL + C\n\n\n\nyou only write .java files"
  },
  {
    "objectID": "doc/cours/code-slides.html#syntax",
    "href": "doc/cours/code-slides.html#syntax",
    "title": "Java Basics",
    "section": "Syntax",
    "text": "Syntax\n\nA Line of code ends with a semicolon ;\nBlocs are delimited with curly braces: { }\nComments\n\n//: one line\n/* multi-lines */"
  },
  {
    "objectID": "doc/cours/code-slides.html#variables-and-data-types",
    "href": "doc/cours/code-slides.html#variables-and-data-types",
    "title": "Java Basics",
    "section": "Variables and Data Types",
    "text": "Variables and Data Types\nint age = 25;\nfinal double PI = 3.14;        // final : Immutable\n\nboolean isJavaFun = true;\n\nchar grade = 'A';             // single quote\nString name = \"Léa\";          // double quote\n\n\nstrong typing, immuable type\nprimitive, object\nString\n\nnot a primitive data type\nString is a Class\nimmutable: Any modification creates a new string in memory"
  },
  {
    "objectID": "doc/cours/code-slides.html#print",
    "href": "doc/cours/code-slides.html#print",
    "title": "Java Basics",
    "section": "Print",
    "text": "Print\n\nSystem.out.print(\"Hello\");\nSystem.out.println(\"Hello\");: adds a new line\nSystem.out ➡️ Standard output stream"
  },
  {
    "objectID": "doc/cours/code-slides.html#structures",
    "href": "doc/cours/code-slides.html#structures",
    "title": "Java Basics",
    "section": "Structures",
    "text": "Structures"
  },
  {
    "objectID": "doc/cours/code-slides.html#function",
    "href": "doc/cours/code-slides.html#function",
    "title": "Java Basics",
    "section": "Function",
    "text": "Function\npublic int add(int a, int b) {\n    return a + b;\n}\n\nAccess modifier: public\nReturn type: int\nMethod name: add\nParameters: (int a, int b)"
  },
  {
    "objectID": "doc/cours/code-slides.html#various",
    "href": "doc/cours/code-slides.html#various",
    "title": "Java Basics",
    "section": "Various",
    "text": "Various\n\nincrement: i++"
  },
  {
    "objectID": "doc/cours/code.html",
    "href": "doc/cours/code.html",
    "title": "Java Basics",
    "section": "",
    "text": "HelloWord.java\n\nclass HelloWorld {\n    public static void main(String[] args) { \n        String message = \"Hello World!\";\n        System.out.println(message);\n    }\n}\n\n\ncompile: javac HelloWord.java\n\ncreate HelloWord.class\n\nrun: java HelloWord\nexit : CTRL + C\n\n\n\nyou only write .java files"
  },
  {
    "objectID": "doc/cours/code.html#hello-world",
    "href": "doc/cours/code.html#hello-world",
    "title": "Java Basics",
    "section": "",
    "text": "HelloWord.java\n\nclass HelloWorld {\n    public static void main(String[] args) { \n        String message = \"Hello World!\";\n        System.out.println(message);\n    }\n}\n\n\ncompile: javac HelloWord.java\n\ncreate HelloWord.class\n\nrun: java HelloWord\nexit : CTRL + C\n\n\n\nyou only write .java files"
  },
  {
    "objectID": "doc/cours/code.html#syntax",
    "href": "doc/cours/code.html#syntax",
    "title": "Java Basics",
    "section": "Syntax",
    "text": "Syntax\n\nA Line of code ends with a semicolon ;\nBlocs are delimited with curly braces: { }\nComments\n\n//: one line\n/* multi-lines */\n\n\n\nNaming Conventions\n\nClasses: PascalCase\nVariables, Methods: camelCase\nconstants: UPPER_CASE_WITH_UNDERSCORES\npackages: Lowercase, dot-separated (package com.example.utils;)"
  },
  {
    "objectID": "doc/cours/code.html#variables-and-data-types",
    "href": "doc/cours/code.html#variables-and-data-types",
    "title": "Java Basics",
    "section": "Variables and Data Types",
    "text": "Variables and Data Types\nint age = 25;\nfinal double PI = 3.14;        // final : Immutable\n\nboolean isJavaFun = true;\n\nchar grade = 'A';             // single quote\nString name = \"Léa\";          // double quote\n\n\nstrong typing, immuable type\nprimitive, object\nString\n\nnot a primitive data type\nString is a Class\nimmutable: Any modification creates a new string in memory\n\n\n\n\nBoolean\nboolean isJavaFun = true;\nboolean hasBrother = false;\n\nboolean isFast = 20 &gt; 15;\n\ntrue && !false || false;\n\n\nlowercase booleans\nNo need for == true\n\n\n\n\nString\nString myString = \"Java\";\nString fullName = \"Alain\" + \" \" + \"Philippe\";   // concat\n\nmyString.length();\nmyString.charAt(0);          // Get character at index 0\nmyString.contains(\"va\");\nmyString.toLowerCase();      // also toUpperCase\nmyString.endsWith(\"Java\");   // also startsWith\n\nmyString.equals(\"Java\");     // Use equals to compare, not ==\nOthers: replace(), split()"
  },
  {
    "objectID": "doc/cours/code.html#print",
    "href": "doc/cours/code.html#print",
    "title": "Java Basics",
    "section": "Print",
    "text": "Print\n\nSystem.out.print(\"Hello\");\nSystem.out.println(\"Hello\");: adds a new line\nSystem.out ➡️ Standard output stream"
  },
  {
    "objectID": "doc/cours/code.html#structures",
    "href": "doc/cours/code.html#structures",
    "title": "Java Basics",
    "section": "Structures",
    "text": "Structures\n\nif-else\nint number = 10;\n\nif (number &gt; 0) {\n    System.out.println(\"Positive number\");\n} else if (number &lt; 0) {\n    System.out.println(\"Negative number\");\n} else {\n    System.out.println(\"Zero\");\n}\n\n\nTernary Operator\n\nShorter alternative to if-else\n\nString status = (number &gt; 0) ? \"Positive\": \"Negative\";\n\n\nSwitch\nString fruit = \"lemon\";\n\nswitch (fruit) {\n    case \"cherry\", \"strawberry\" -&gt; System.out.println(\"Red fruit\");\n    case \"banana\", \"lemon\" -&gt; System.out.println(\"Yellow fruit\");\n    default -&gt; System.out.println(\"Unknown fruit\");\n}\n\n\nswitch can return a value\n\nString color = switch (fruit) {\n    case \"cherry\", \"strawberry\" -&gt; \"Red fruit\";\n    case \"banana\", \"lemon\" -&gt; \"Yellow fruit\";\n    default -&gt; \"Unknown fruit\";\n};\n\n\n\nFor\nfor (int i = 0; i &lt; 5; i++) {\n    System.out.println(\"Iteration: \" + i);\n}\n\ninitialization: i = 0\ncondition: i &lt; 5\nupdate: i++\n\n\n\nFor each\n\nIterating through arrays, lists\n\nint[] numbers = {1, 2, 3, 4};\n\nfor (int num: numbers) {\n    System.out.println(num);\n}\n\n\nWhile\nint i = 10;\nwhile (i &gt;= 0) {\n    System.out.println(i);\n    i--;\n}\n\ndo-while to check after each iteration\ndo { ...\n} while { ... }\n\n\n\nbreak / continue\nfor (int i = 0; i &lt; 10; i++) {\n    if (i == 2)\n        continue;\n    else if (i == 4)\n        break;\n    System.out.println(\"Iteration: \" + i);\n}\n\nIteration: 0\nIteration: 1\nIteration: 3"
  },
  {
    "objectID": "doc/cours/code.html#function",
    "href": "doc/cours/code.html#function",
    "title": "Java Basics",
    "section": "Function",
    "text": "Function\npublic int add(int a, int b) {\n    return a + b;\n}\n\nAccess modifier: public\nReturn type: int\nMethod name: add\nParameters: (int a, int b)\n\n\nVoid\n\nIndicate that a method does not return any value\n\npublic void printIsOdd(int n) {\n    System.out.println(n % 2 != 0);\n}\n\n\nAccess Modifiers\nMethods and Attributes Accessiblility\n\n\n\n\n\n\n\n\n\n\nModifier\nSame Class\nSame Package\nSubclasses\nEverywhere\n\n\n\n\npublic\n✅\n✅\n✅\n✅\n\n\nprotected\n✅\n✅\n✅\n❌\n\n\ndefault (no modifier)\n✅\n✅\n❌\n❌\n\n\nprivate\n✅\n❌\n❌\n❌"
  },
  {
    "objectID": "doc/cours/code.html#various",
    "href": "doc/cours/code.html#various",
    "title": "Java Basics",
    "section": "Various",
    "text": "Various\n\nincrement: i++"
  },
  {
    "objectID": "doc/cours/intro-slides.html#introduction-to-java",
    "href": "doc/cours/intro-slides.html#introduction-to-java",
    "title": "Introduction",
    "section": "Introduction to Java",
    "text": "Introduction to Java\n\n6h CM\n12h TP\nludovic.deneuville@ensai.fr\noffice 161\nbased on those by Ikko Yamane, Benjamin Girault, Romaric Gaudel, Samuel Toubon and Olivier Levitt"
  },
  {
    "objectID": "doc/cours/intro-slides.html#objectives",
    "href": "doc/cours/intro-slides.html#objectives",
    "title": "Introduction",
    "section": "Objectives",
    "text": "Objectives"
  },
  {
    "objectID": "doc/cours/intro-slides.html#tp",
    "href": "doc/cours/intro-slides.html#tp",
    "title": "Introduction",
    "section": "TP",
    "text": "TP"
  },
  {
    "objectID": "doc/cours/intro-slides.html#evaluation",
    "href": "doc/cours/intro-slides.html#evaluation",
    "title": "Introduction",
    "section": "Evaluation",
    "text": "Evaluation"
  },
  {
    "objectID": "doc/cours/intro-slides.html#why-java",
    "href": "doc/cours/intro-slides.html#why-java",
    "title": "Introduction",
    "section": "Why Java",
    "text": "Why Java"
  },
  {
    "objectID": "doc/cours/intro-slides.html#compiler",
    "href": "doc/cours/intro-slides.html#compiler",
    "title": "Introduction",
    "section": "Compiler",
    "text": "Compiler\n\nTransform java code into bytecode\nDetects syntax and type errors\nOptimization\njavac MyClass.java ➡️ MyClass.class"
  },
  {
    "objectID": "doc/cours/intro-slides.html#jvm",
    "href": "doc/cours/intro-slides.html#jvm",
    "title": "Introduction",
    "section": "JVM",
    "text": "JVM\n\n\n\n\n\n\n\nDefinition\n\n\nThe Java Virtual Machine (JVM) is the runtime environment for Java programs. It acts as an interpreter between Java code and the operating system.\nThe JVM :\n\nExecutes bytecode\nInteracts with OS\nManages Memory (Garbage Collection)\n\n\n\n\n\n\njava MyClass"
  },
  {
    "objectID": "doc/cours/intro-slides.html#java-vs-python",
    "href": "doc/cours/intro-slides.html#java-vs-python",
    "title": "Introduction",
    "section": "Java Vs Python",
    "text": "Java Vs Python\n\n\n\n\n\n\n\n\nCriterion\nJava\nPython\n\n\n\n\nTyping\nStrongly typed, static\nStrongly typed, dynamic\n\n\nCompilation\nCompiled into bytecode\nInterpreted\n\n\nPerformance\nVery fast\nSlower\n\n\nSyntax\nVerbose, requires {}\nConcise, uses indentation\n\n\nParadigm\nObject-oriented\nMulti-paradigm\n\n\nEcosystem\nHuge (Spring, Hibernate…)\nLarge (Django, Flask, Pandas…)\n\n\n\n\n\nTyping: int x = 10; vs x = 10\nInterpreted: exécution à la volée\nMulti-paradigm (objet, fonctionnel, impératif)"
  },
  {
    "objectID": "doc/cours/intro.html",
    "href": "doc/cours/intro.html",
    "title": "Introduction",
    "section": "",
    "text": "6h CM\n12h TP\nludovic.deneuville@ensai.fr\noffice 161\nbased on those by Ikko Yamane, Benjamin Girault, Romaric Gaudel, Samuel Toubon and Olivier Levitt"
  },
  {
    "objectID": "doc/cours/intro.html#introduction-to-java",
    "href": "doc/cours/intro.html#introduction-to-java",
    "title": "Introduction",
    "section": "",
    "text": "6h CM\n12h TP\nludovic.deneuville@ensai.fr\noffice 161\nbased on those by Ikko Yamane, Benjamin Girault, Romaric Gaudel, Samuel Toubon and Olivier Levitt"
  },
  {
    "objectID": "doc/cours/intro.html#objectives",
    "href": "doc/cours/intro.html#objectives",
    "title": "Introduction",
    "section": "Objectives",
    "text": "Objectives"
  },
  {
    "objectID": "doc/cours/intro.html#tp",
    "href": "doc/cours/intro.html#tp",
    "title": "Introduction",
    "section": "TP",
    "text": "TP"
  },
  {
    "objectID": "doc/cours/intro.html#evaluation",
    "href": "doc/cours/intro.html#evaluation",
    "title": "Introduction",
    "section": "Evaluation",
    "text": "Evaluation"
  },
  {
    "objectID": "doc/cours/intro.html#why-java",
    "href": "doc/cours/intro.html#why-java",
    "title": "Introduction",
    "section": "Why Java",
    "text": "Why Java\n\nHistory / Version\n\nCreated in 1991 by James Gosling and Mike Sheridan (Sun Microsystems)\nJava 8 (2014) : Lambda, Stream, Optional\nJava 17 (2021)\nJava 21 (2023)\n\n\n\nFacebook story\n2009 Oracle\n2017 Java 9 -&gt; Modules\n2018 Java 11\nJava 17 : Sealed Classes, Refactor JDK\n\n\n\n\nPopular / Mature\n\nWidely used in all sectors\nBack-end\nHeavily object-oriented\n\n\n\nPortability\n\nCompiled to bytecode\nRuns on any machine with a JVM\n“Write Once, Run Anywhere”\n\n\nWORA: desktop, servers, smartphones\n\n\n\nRobust / Secure\n\nAutomatic memory management\nStrong Static Typing\nCompile-Time Checks"
  },
  {
    "objectID": "doc/cours/intro.html#compiler",
    "href": "doc/cours/intro.html#compiler",
    "title": "Introduction",
    "section": "Compiler",
    "text": "Compiler\n\nTransform java code into bytecode\nDetects syntax and type errors\nOptimization\njavac MyClass.java ➡️ MyClass.class"
  },
  {
    "objectID": "doc/cours/intro.html#jvm",
    "href": "doc/cours/intro.html#jvm",
    "title": "Introduction",
    "section": "JVM",
    "text": "JVM\n\n\n\n\n\n\nDefinition\n\n\n\nThe Java Virtual Machine (JVM) is the runtime environment for Java programs. It acts as an interpreter between Java code and the operating system.\nThe JVM :\n\nExecutes bytecode\nInteracts with OS\nManages Memory (Garbage Collection)\n\n\n\n\njava MyClass\n\n\nJVM, JDK, JRE\n\nJRE: Java Runtime Environment\nJDK: Java Development Kit\n\n\n\n\nComponent\nPurpose\n\n\n\n\nJVM\nRuns Java bytecode\n\n\nJRE\nContains JVM + libraries to run Java apps\n\n\nJDK\nIncludes JRE + compiler + development tools"
  },
  {
    "objectID": "doc/cours/intro.html#java-vs-python",
    "href": "doc/cours/intro.html#java-vs-python",
    "title": "Introduction",
    "section": "Java Vs Python",
    "text": "Java Vs Python\n\n\n\n\n\n\n\n\nCriterion\nJava\nPython\n\n\n\n\nTyping\nStrongly typed, static\nStrongly typed, dynamic\n\n\nCompilation\nCompiled into bytecode\nInterpreted\n\n\nPerformance\nVery fast\nSlower\n\n\nSyntax\nVerbose, requires {}\nConcise, uses indentation\n\n\nParadigm\nObject-oriented\nMulti-paradigm\n\n\nEcosystem\nHuge (Spring, Hibernate…)\nLarge (Django, Flask, Pandas…)\n\n\n\n\n\nTyping: int x = 10; vs x = 10\nInterpreted: exécution à la volée\nMulti-paradigm (objet, fonctionnel, impératif)"
  },
  {
    "objectID": "doc/tp/tp2.html",
    "href": "doc/tp/tp2.html",
    "title": "Java - TP2",
    "section": "",
    "text": "Langage orienté objet\nCompilé en bytecode puis exécuté par la JVM\n\nfichier.java (dossier src) ➡️ compilation ➡️ fichier.class (dossier bin) ➡️ éxécution ➡️ run\ncompiler : javac fichier.java\néxécuter : java fichier\n\nPoints-virgules pour terminer les déclarations\nAccolades pour délimiter les blocs de code\nFortement typé statiquement\n\nvous devez déclarer le type de chaque variable\nces types sont vérifiés à la compilation\n\nConventions de nommage : utilisation du CamelCase\n\nclasse : première lettre MAJUSCULE, ex : VeloElectrique\nméthodes et variables : première lettre minuscule, ex : ajouterPanier()"
  },
  {
    "objectID": "doc/tp/tp2.html#rappels-sur-java",
    "href": "doc/tp/tp2.html#rappels-sur-java",
    "title": "Java - TP2",
    "section": "",
    "text": "Langage orienté objet\nCompilé en bytecode puis exécuté par la JVM\n\nfichier.java (dossier src) ➡️ compilation ➡️ fichier.class (dossier bin) ➡️ éxécution ➡️ run\ncompiler : javac fichier.java\néxécuter : java fichier\n\nPoints-virgules pour terminer les déclarations\nAccolades pour délimiter les blocs de code\nFortement typé statiquement\n\nvous devez déclarer le type de chaque variable\nces types sont vérifiés à la compilation\n\nConventions de nommage : utilisation du CamelCase\n\nclasse : première lettre MAJUSCULE, ex : VeloElectrique\nméthodes et variables : première lettre minuscule, ex : ajouterPanier()"
  },
  {
    "objectID": "doc/tp/tp2.html#datalab",
    "href": "doc/tp/tp2.html#datalab",
    "title": "Java - TP2",
    "section": "2 Datalab",
    "text": "2 Datalab\nIl est possible de faire le TP soit sur la VM, soit sur le datalab\n\nConnectez-vous sur le datalab\nLancez le service Java avec VScode puis suivez les instructions\nOuvrez un terminal (CTRL + ù)\n\nDans le terminal, collez git clone https://github.com/i-yamane/JavaOOP-Practical-2.git\n\nFile &gt; Open Folder &gt; /home/onyxia/work/JavaOOP-Practical-2/\n\n⚠️ important d’ouvrir le bon dossier !\n\nOuvrez à nouveau un terminal\n\nPositionnez-vous dans le bon dossier : cd JavaOOP-Practical-2\nCompilez le Main : javac -d bin -sourcepath src ./src/Main.java\nExécutez le programme : java -classpath bin Main"
  },
  {
    "objectID": "doc/tp/tp2.html#vm",
    "href": "doc/tp/tp2.html#vm",
    "title": "Java - TP2",
    "section": "3 VM",
    "text": "3 VM\n\nSur votre disque P:,\n\ncréez un dossier Java,\nà l’intérieur, créez un dossier TP2\n\nClic droit &gt; Ouvrir Git Bash\n\ngit clone https://github.com/i-yamane/JavaOOP-Practical-2.git\n\nOuvrez Visual Studio Code\n\nFile &gt; Open Folder\nAllez dans le dossier TP2\nUn clic sur JavaOOP-Practical-2, ensuite Sélectionner un dossier\nOuvrez un terminal (CTRL+ù)"
  },
  {
    "objectID": "doc/tp/tp2.html#exercices",
    "href": "doc/tp/tp2.html#exercices",
    "title": "Java - TP2",
    "section": "4 Exercices",
    "text": "4 Exercices\n\n4.1 Exercice 1\n\nCompilez puis exécutez le Main\n\njavac -d bin -sourcepath src .\\src\\Main.java\njava -classpath bin Main\n\nRangez les fichiers dans les bons dossiers\n\nMettez à jour les imports\njavac -d bin -sourcepath src .\\src\\edu\\ensai\\pokemon\\main\\Main.java\njava -cp bin edu.ensai.pokemon.main.Main\n\n\n\n\n4.2 Exercice 2\n\nPour tous les attributs\n\npublic ➡️ private\nCréez Getter et Setters\nAdaptez et corrigez le Main.java\n\n\n\n\n4.3 Exercice 3\n\nCommencez par bien faire le diagramme UML\nHéritage, classe abstraite ➡️ comme en Python\nImplémentation\n\nEn Java, il n’y a pas d’Héritage multiple\nPermet de forcer les classes à implémenter des méthodes\nPossible d’implémenter plusieurs interfaces\n\n\n\n\n4.4 Exercice 4\n\nParamétrage pour utiliser la commande javadoc\n\nLancez les 2 commandes suivantes dans votre terminal powershell\n\n$env:JAVA_HOME = \"C:\\Program Files\\Java\\jdk-11.0.11\"\n$env:PATH += \";$env:JAVA_HOME\\bin\"\n\nElles permettent de dire où est installée le programme javadoc\n\nGénérez la javadoc\n\njavadoc -d doc -sourcepath src -subpackages edu.ensai.pokemon\n\nDans votre dossier, ouvrez dans doc/index.html\n\npour ceux sur le Datalab :\n\nClic droit sur le dossier doc\nDownload"
  },
  {
    "objectID": "doc/tp/tp2.html#exemple-de-classe",
    "href": "doc/tp/tp2.html#exemple-de-classe",
    "title": "Java - TP2",
    "section": "5 Exemple de classe",
    "text": "5 Exemple de classe\nimport java.util.ArrayList;\n\n/**\n * Represents a student\n * Attributes : name, age, and a list of notes.\n */\npublic class Student {\n    private String name;\n    private int age;\n    private ArrayList&lt;Double&gt; notes;\n\n    /**\n     * Constructs a new Student object with the given name and age.\n     * @param name The name of the student.\n     * @param age The age of the student.\n     */\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n        this.notes = new ArrayList&lt;&gt;();     // empty list\n    }\n\n    // -------------------------------------------------------\n    // Getters and Setters (to access private attributes)\n    // -------------------------------------------------------\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    /**\n     * Sets the age of the student.\n     * @param age The age to set. It should be greater than zero.\n     * @throws IllegalArgumentException if the provided age is not greater than zero.\n     */\n    public void setAge(int age) {\n        if (age &lt;= 0) {\n            throw new IllegalArgumentException(\"Age must be greater than zero.\");\n        }\n        this.age = age;\n    }\n    \n    // -------------------------------------------------------\n    // Methods\n    // -------------------------------------------------------\n\n    /**\n     * @return A string representation of the Student object.\n     */\n    @Override\n    public String toString() {\n        return \"Student(\" +\n                \"name='\" + this.name + '\\'' +\n                \", age=\" + this.age +\n                ')';\n    }\n\n    /**\n     * Adds a note to the student's list of notes.\n     * @param note The note to be added.\n     */\n    public void addNote(double note) {\n        this.notes.add(note);\n    }\n\n    /**\n     * Computes the average note of the student.\n     * @return The average note of the student.\n     * @throws ArithmeticException if there are no notes present.\n     */\n    public double computeAverage() {\n        if (this.notes.isEmpty()) {\n            throw new ArithmeticException(\"Cannot compute average. No notes available.\");\n        }\n\n        double sum = 0.0;\n        for (double note : this.notes) {\n            sum += note;\n        }\n        return sum / this.notes.size();\n    }\n\n\n    /**\n     * Main method\n     */\n    public static void main(String[] args) {\n        Student student = new Student(\"Eva\", 20);\n        student.addNote(17.5);\n        student.addNote(12.0);\n        student.addNote(20.0);\n        \n        System.out.println(student);\n        System.out.println(\"Average Note: \" + student.computeAverage());\n    }\n}"
  },
  {
    "objectID": "doc/tp/tp2.html#modèle-de-classe",
    "href": "doc/tp/tp2.html#modèle-de-classe",
    "title": "Java - TP2",
    "section": "6 Modèle de classe",
    "text": "6 Modèle de classe\n/**\n * Represents a ...\n */\npublic class ClassName {\n    private String attribute1;\n    private int attribute2;\n\n    /**\n     * Constructs a new ...\n     * @param parameter1 parameter1_description\n     * @param parameter2 parameter2_description\n     */\n    public ClassName(String parameter1, int parameter2) {\n        this.attribute1 = parameter1;\n        this.attribute2 = parameter2;\n    }\n\n\n    // -------------------------------------------------------\n    // Methods\n    // -------------------------------------------------------\n\n    /**\n     * No parameter, return void\n     */\n    public void print_attribute1() {\n        System.out.println(this.attribute1);\n    }\n    \n    /**\n     * Increment value of attribute2\n     * A parameter, return void\n     * @param increment increment\n     */\n    public void increment_attribute2(int increment) {\n        this.attribute2 += increment;\n    }\n    \n    /**\n     * Checks if attribute2 is odd.\n     *\n     * @return true if attribute2 is odd, false otherwise.\n     */\n    public boolean isAttribute2Odd() {\n        return attribute2 % 2 != 0;\n    }\n\n\n    /**\n     * Main method\n     */\n    public static void main(String[] args) {\n\n        ClassName c = new ClassName(\"\", 0);\n        c.increment_attribute2(5);\n        System.out.println(c.isAttribute2Odd());\n    }\n}\n\n\n\n\n\nclassDiagram\n    class Item {\n        + name: String\n        + price: int\n        + isPermanent(): boolean\n        + isSingleUse(): boolean\n        + isUnusable(): boolean\n    }\n\n    class SingleUseItem {\n        - alreadyUsed: bool\n        + consume()\n    }\n\n\n    class Potion {\n        - hp_gain: int\n    }\n\n    class Sweet {\n        - xp_gain: int\n        + use(): int\n    }\n    \n    class Healer{\n        &lt;&lt;interface&gt;&gt;\n        + heal()\n    }\n\n    Item &lt;|-- SingleUseItem\n    Item &lt;|-- PermanentItem\n\n    SingleUseItem &lt;|-- Potion\n    SingleUseItem &lt;|-- Sweet\n    \n    Potion ..|&gt; Healer : implements"
  },
  {
    "objectID": "doc/tp/tp4.html",
    "href": "doc/tp/tp4.html",
    "title": "Java - TP4",
    "section": "",
    "text": "Sur votre disque P:, créez un dossier Java,\nà l’intérieur, créez un dossier TP4\nOuvrez et enregistrez le sujet\nRécupérez le dépôt sur Moodle"
  },
  {
    "objectID": "doc/tp/tp4.html#avant-de-commencer",
    "href": "doc/tp/tp4.html#avant-de-commencer",
    "title": "Java - TP4",
    "section": "",
    "text": "Sur votre disque P:, créez un dossier Java,\nà l’intérieur, créez un dossier TP4\nOuvrez et enregistrez le sujet\nRécupérez le dépôt sur Moodle"
  },
  {
    "objectID": "doc/tp/tp4.html#datalab",
    "href": "doc/tp/tp4.html#datalab",
    "title": "Java - TP4",
    "section": "2 Datalab",
    "text": "2 Datalab\nIl est possible de faire le TP soit sur la VM, soit sur le datalab\n\nConnectez-vous sur le datalab\nLancez le service Java avec VScode puis suivez les instructions\nDans l’explorer à gauche &gt; clic droit &gt; Upload\n\nChargez le fichier JavaTP4-unit-test-base\n\nOuvrez un terminal\n\nrentrez unzip JavaTP4-unit-test-base pour extraire les fichiers\n\nFile &gt; Open Folder &gt; /home/onyxia/work/JavaTP4-unit-test-base/\n\n⚠️ important d’ouvrir le bon dossier !\n\n\nRemplacez le contenu du fichier .vscode/settings.json par :\n{\n    \"java.project.sourcePaths\": [\n        \"src/main/java\",\n        \"src/test/java\"\n    ],\n    \"java.project.referencedLibraries\": [\n        \"lib/**/*.jar\"\n    ]\n}"
  },
  {
    "objectID": "doc/tp/tp4.html#vm",
    "href": "doc/tp/tp4.html#vm",
    "title": "Java - TP4",
    "section": "3 VM",
    "text": "3 VM\n\nOuvrez Visual Studio Code\nFile &gt; Open Folder\nAllez dans le dossier TP3\nUn clic sur JavaTP4-unit-test-base, ensuite Sélectionner un dossier"
  },
  {
    "objectID": "doc/tp/tp4.html#tests-unitaires",
    "href": "doc/tp/tp4.html#tests-unitaires",
    "title": "Java - TP4",
    "section": "4 Tests unitaires",
    "text": "4 Tests unitaires\n\n4.1 Bonnes pratiques\n\nTests indépendants : Chaque test devrait être indépendant des autres tests. Assurez-vous que l’exécution d’un test ne dépend pas du résultat d’un autre test.\nClarté et lisibilité : Écrivez des noms de méthodes de test descriptifs pour indiquer clairement ce qui est testé. Utilisez des noms qui décrivent le comportement attendu.\nIsolation des tests : Les tests doivent être isolés, c’est-à-dire qu’ils ne doivent pas dépendre de l’état du système, de l’ordre d’exécution ou d’autres facteurs externes. Utilisez des mocks ou des données de test spécifiques pour isoler chaque test.\nTestez les cas limites : Assurez-vous de tester les cas limites ainsi que les cas typiques. Cela inclut les valeurs nulles, les limites des boucles, les bornes d’entrée, etc.\nMinimisez les assertions par test : Chaque test ne devrait vérifier qu’une seule chose. Si un test contient plusieurs assertions, cela rendra plus difficile de comprendre quelle assertion a échoué en cas d’échec du test.\nMise en place et nettoyage : Utilisez les méthodes @Before et @After pour effectuer la mise en place et le nettoyage des objets nécessaires pour chaque test. Assurez-vous que l’état initial est correct avant chaque test.\nUtilisation de données de test significatives : Utilisez des données de test significatives et représentatives pour vos cas de test. Cela garantit que les tests couvrent des scénarios réels et non seulement les cas triviaux.\nGestion des exceptions : Testez les cas où des exceptions peuvent être levées et assurez-vous qu’elles sont gérées correctement dans vos tests.\nDocumentation des tests : Écrivez des commentaires ou des descriptions claires pour expliquer le but de chaque test, ce qu’il teste et pourquoi c’est important.\nExécution régulière des tests : Exécutez vos tests régulièrement pour vous assurer qu’ils restent valides au fil du temps, en particulier après des modifications du code source.\n\n\n\n4.2 Un exemple avec JUnit\n\n\nfrac.java\n\npublic class Frac {\n\n    private int num;\n    private int denom;\n\n    public Frac(int num, int denom) {\n        this.num = num;\n        this.denom = denom;\n    }\n\n    public boolean est_valide() {\n        return denom != 0;\n    }\n\n    public float valeur_approchee() {\n        return (float) this.num / this.denom;\n    }\n\n    public Frac inverse() {\n        return new Frac(this.denom, this.num);\n    }\n\n    public Frac addition(Frac other) {\n        int newNum = this.num * other.denom + other.num * this.denom;\n        int newDenom = this.denom * other.denom;\n        return new Frac(newNum, newDenom);\n    }\n\n    public Frac multiplication(Frac other) {\n        int newNum = this.num * other.num;\n        int newDenom = this.denom * other.denom;\n        return new Frac(newNum, newDenom);\n    }\n\n    public String toString() {\n        return num + \"/\" + denom;\n    }\n}\n\n\n\nFracTest.java\n\nimport org.junit.Test;\nimport org.junit.Assert;\n\npublic class FracTest {\n\n    @Test\n    public void testEstValideOK() {\n\n        //GIVEN\n        Frac frac1 = new Frac(1, 2);\n\n        //WHEN\n        boolean res = frac1.est_valide();\n\n        //THEN\n        Assert.assertTrue(res);\n    }\n    \n    public void testEstValideEchec() {\n        Frac frac2 = new Frac(3, 0);\n        Assert.assertFalse(frac2.est_valide());\n    }\n\n    @Test\n    public void testValeurApprochee() {\n        Frac frac1 = new Frac(1, 2);\n        Assert.assertEquals(0.5, frac1.valeur_approchee(), 0.001);\n    }\n\n    @Test\n    public void testInverse() {\n        Frac frac1 = new Frac(1, 2);\n        Frac inverse1 = frac1.inverse();\n\n        Assert.assertEquals(2, inverse1.num);\n        Assert.assertEquals(1, inverse1.denom);\n    }\n\n    @Test\n    public void testAddition() {\n        Frac frac1 = new Frac(1, 2);\n        Frac frac2 = new Frac(1, 4);\n        Frac result = frac1.addition(frac2);\n\n        Assert.assertEquals(6, result.num);\n        Assert.assertEquals(8, result.denom);\n    }\n\n    @Test\n    public void testMultiplication() {\n        Frac frac1 = new Frac(1, 2);\n        Frac frac2 = new Frac(3, 4);\n        Frac result = frac1.multiplication(frac2);\n\n        Assert.assertEquals(3, result.num);\n        Assert.assertEquals(8, result.denom);\n    }\n\n    @Test\n    public void testToString() {\n        Frac frac1 = new Frac(1, 2);\n        Assert.assertEquals(\"1/2\", frac1.toString());\n    }\n}\n\n\n\n4.3 Lancer les tests manuellement\n\nOuvrir un terminal bash\nCompliler tous les tests\n\njavac -cp .:lib/*:src/test/java:src/main/java -d bin src/test/java/fr/ensai/java/tp4/core/*.java\nen ajoutant manuellement au classpath (-cp …) les dossiers lib, main et test\n\nExécuter une classe de tests\n\njava -cp .:bin:lib/* org.junit.runner.JUnitCore fr.ensai.java.tp4.core.LevelTest\nen ajoutant au classpath bin et lib"
  },
  {
    "objectID": "doc/tp/tp4.html#exercices",
    "href": "doc/tp/tp4.html#exercices",
    "title": "Java - TP4",
    "section": "5 Exercices",
    "text": "5 Exercices\n\n5.1 Exercice 1\nDes tests unitaires ont déjà été écrits\n\ndans VSCode à gauche, cliquez sur l’icone en forme de fiole\n\npatientez quelques secondes le temps que VSCode trouve les tests unitaires\n\nlancez les tests en cliquant sur les 2 triangles pointants vers la droite\ncorrigez les tests (voir sujet)\n\nQuestion 2 :\n\ncréez la classe de tests SpecieTest\nécrivez les TU de la classe Specie en vous inspirant de ce qui a été fait pour Player\nMéthodes à tester :\n\nConstructeur de BULBZAURUS\nConstructeur de CHARMANDUS\ntoString() de BULBZAURUS : Species [number=0, name=Bulbzaurus, type=GRASS, initialHp=10, initialStrength=1]\n\n\n\n\n5.2 Exercice 2\n\ncréez la classe InventoryTest et écrivez les TU de la méthode add()\ncréez la classe SingleUseItemTest\n\n\n\n5.3 Exercice 3\nRappels sur les interfaces :\n\ncréez une Interface Coordinates contenant les méthodes communes\nmodifiez la classe CartesianCoordinates pour qu’elle implémente cette interface\ncréez la classe PolarCoordinates implémentant la même interface\n\nEnsuite compilez, puis exécutez le main :\n\npour un terminal Bash\n\nCompilez le Main : javac -d bin -sourcepath src ./src/main/Main.java\nExécutez le programme : java -cp bin main.Main\n\npour un terminal PowerShell\nCompilez le Main : javac -d bin -sourcepath src .\\src\\main\\Main.java\nExécutez le programme : java -cp bin main.Main"
  }
]