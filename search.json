[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Java",
    "section": "",
    "text": "TP1 : Classes, Objects, Attributes, Methods\nTP2 : Full-Fledged Object Oriented Programming\nTP3 : Enums, Containers, Exceptions\nTP3 : Unit Tests, OOP\n\nQuelques ressources utiles :\n\nZeste de savoir - Apprenez à programmer en Java"
  },
  {
    "objectID": "index.html#tp",
    "href": "index.html#tp",
    "title": "Java",
    "section": "",
    "text": "TP1 : Classes, Objects, Attributes, Methods\nTP2 : Full-Fledged Object Oriented Programming\nTP3 : Enums, Containers, Exceptions\nTP3 : Unit Tests, OOP\n\nQuelques ressources utiles :\n\nZeste de savoir - Apprenez à programmer en Java"
  },
  {
    "objectID": "doc/tp/tp3.html",
    "href": "doc/tp/tp3.html",
    "title": "Java - TP3",
    "section": "",
    "text": "classes dont on limite les objets que l’on peut créer\ndans l’exemple ci-dessous, on ne peut créer que 3 objets différents\n\nle constructeur est privé, ce qui interdit la création d’objets de l’enum JourSemaine avec d’autres paramètres\n\n\n\n\nJourSemaine.java\n\npublic enum JourSemaine {\n\n    LUNDI (\"Lundi\", 1),\n    MARDI (\"Mardi\", 2),\n    MERCREDI (\"Mercredi\", 3);\n \n    private String nom;\n    private int numero;\n \n    private JourSemaine(String nom, int numero) {\n        this.nom = nom;\n        this.numero = numero;\n    }\n \n    @Override\n    public String toString() {\n        return \"JourSemaine(\" + this.nom + \", \" + this.numero + \")\";\n    }\n}\n\n\n\nMain.java\n\npublic class Main {\n    public static void main(String args[]){\n        JourSemaine js = JourSemaine.LUNDI;\n\n        System.out.println(js);\n    }\n}\n\n\n\n\nInfos détaillées sur le site de Jean-Michel Doudoux :\n\nListe\nSet : pas de doublons\nMap : clé-valeurs\n\n\n\n\nUne exception est levée lorsqu’une erreur est détectée.\n\n\nFrac.java\n\npublic class Frac {\n\n    private int num;\n    private int denom;\n\n    public Frac(int num, int denom) {\n      this.num = num;\n      this.denom = denom;\n    }\n\n    public float valeur_approchee(){\n      return this.num / this.denom;\n    }\n}\n\n\n\nMain.java\n\npublic class Main{\n    public static void main(java.lang.String[] args) {\n      Frac f1 = new Frac(1, 0);\n      System.out.println(f1.valeur_approchee());\n      // Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n    }\n}\n\n\n\n\n\nnous identifions le bloc de code qui pourrait poser souci\nnous l’encapsulons dans un bloc try / catch\n\n\n\nFrac.java\n\npublic class Frac {\n\n    private int num;\n    private int denom;\n\n    public Frac(int num, int denom) {\n      this.num = num;\n      this.denom = denom;\n    }\n\n    public float valeur_approchee(){\n        float res = 0;\n\n        try{\n            res = this.num / this.denom;\n        }\n        catch(ArithmeticException e){\n            System.out.println(\"Exception levée : \" + e.toString());\n            System.out.println(\"Cause : \" + e.getMessage());\n        }\n        return res;      \n    }\n}\n\nCette fois-ci, le même Main renvoie :\nException levée : java.lang.ArithmeticException: / by zero\nCause : / by zero\n0.0\n\n\n\nUne autre possibilité est de dire que la méthode valeur_approchee() pourrait renvoyer une exception (mot clé : throws).\n\n\n\n\n\n\nCaution\n\n\n\n\nthrows Exception\n\ndans la signature d’une méthode\nindique que la méthode peut retourner une exception\n\nthrow new Exception()\n\ndéclenche volontairement une exception\n\n\n\n\n\n\nFrac.java\n\npublic class Frac {\n\n    private int num;\n    private int denom;\n\n    public Frac(int num, int denom) {\n      this.num = num;\n      this.denom = denom;\n    }\n\n    public float valeur_approchee() throws ArithmeticException{\n        if (this.denom == 0){\n            throw new ArithmeticException(\"Division par zéro\");\n        }\n        return this.num  / this.denom;      \n    }\n}\n\nDans ce cas on dit que l’exception se propage. Elle devra être gérée “plus haut”, par exemple en mettant un bloc try / catch dans le Main\n\n\nMain.java\n\npublic class Main{\n    public static void main(java.lang.String[] args) {\n        Frac f1 = new Frac(1, 0);\n\n        try{\n            System.out.println(f1.valeur_approchee());\n        }catch(ArithmeticException e){\n            System.out.println(\"Impossible de diviser par zéro\");\n        }      \n    }\n}\n\n\n\n\nIl est également possible de créer ses propres exceptions.\nPar exemple, si vous décidez que le numérateur ne doit pas être impair, vous pouvez créer :\n\n\nNumerateurImpairException.java\n\npublic class NumerateurImpairException extends Exception{\n    public NumerateurImpairException(){\n        super(\"Le numérateur ne doit pas être impair\");\n    }\n}\n\nVous pouvez ensuite modifier le constructeur pour lever au cas où cette exception.\n\n\nNumerateurImpairException.java\n\npublic class Frac {\n\n    private int num;\n    private int denom;\n\n    public Frac(int num, int denom) throws NumerateurImpairException{\n\n      if (num % 2 != 0){\n          throw new NumerateurImpairException();\n      }\n      this.num = num;\n      this.denom = denom;\n    }\n}\n\nEt enfin vous gérez l’exception dans le Main.\n\n\nMain.java\n\npublic class Main{\n    public static void main(java.lang.String[] args) {\n        try{\n            Frac f1 = new Frac(1, 0);\n        }catch(Exception e){\n            System.out.println(e.getMessage());\n        }\n        //Le numérateur ne doit pas être impair\n    }\n}"
  },
  {
    "objectID": "doc/tp/tp3.html#rappels",
    "href": "doc/tp/tp3.html#rappels",
    "title": "Java - TP3",
    "section": "",
    "text": "classes dont on limite les objets que l’on peut créer\ndans l’exemple ci-dessous, on ne peut créer que 3 objets différents\n\nle constructeur est privé, ce qui interdit la création d’objets de l’enum JourSemaine avec d’autres paramètres\n\n\n\n\nJourSemaine.java\n\npublic enum JourSemaine {\n\n    LUNDI (\"Lundi\", 1),\n    MARDI (\"Mardi\", 2),\n    MERCREDI (\"Mercredi\", 3);\n \n    private String nom;\n    private int numero;\n \n    private JourSemaine(String nom, int numero) {\n        this.nom = nom;\n        this.numero = numero;\n    }\n \n    @Override\n    public String toString() {\n        return \"JourSemaine(\" + this.nom + \", \" + this.numero + \")\";\n    }\n}\n\n\n\nMain.java\n\npublic class Main {\n    public static void main(String args[]){\n        JourSemaine js = JourSemaine.LUNDI;\n\n        System.out.println(js);\n    }\n}\n\n\n\n\nInfos détaillées sur le site de Jean-Michel Doudoux :\n\nListe\nSet : pas de doublons\nMap : clé-valeurs\n\n\n\n\nUne exception est levée lorsqu’une erreur est détectée.\n\n\nFrac.java\n\npublic class Frac {\n\n    private int num;\n    private int denom;\n\n    public Frac(int num, int denom) {\n      this.num = num;\n      this.denom = denom;\n    }\n\n    public float valeur_approchee(){\n      return this.num / this.denom;\n    }\n}\n\n\n\nMain.java\n\npublic class Main{\n    public static void main(java.lang.String[] args) {\n      Frac f1 = new Frac(1, 0);\n      System.out.println(f1.valeur_approchee());\n      // Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n    }\n}\n\n\n\n\n\nnous identifions le bloc de code qui pourrait poser souci\nnous l’encapsulons dans un bloc try / catch\n\n\n\nFrac.java\n\npublic class Frac {\n\n    private int num;\n    private int denom;\n\n    public Frac(int num, int denom) {\n      this.num = num;\n      this.denom = denom;\n    }\n\n    public float valeur_approchee(){\n        float res = 0;\n\n        try{\n            res = this.num / this.denom;\n        }\n        catch(ArithmeticException e){\n            System.out.println(\"Exception levée : \" + e.toString());\n            System.out.println(\"Cause : \" + e.getMessage());\n        }\n        return res;      \n    }\n}\n\nCette fois-ci, le même Main renvoie :\nException levée : java.lang.ArithmeticException: / by zero\nCause : / by zero\n0.0\n\n\n\nUne autre possibilité est de dire que la méthode valeur_approchee() pourrait renvoyer une exception (mot clé : throws).\n\n\n\n\n\n\nCaution\n\n\n\n\nthrows Exception\n\ndans la signature d’une méthode\nindique que la méthode peut retourner une exception\n\nthrow new Exception()\n\ndéclenche volontairement une exception\n\n\n\n\n\n\nFrac.java\n\npublic class Frac {\n\n    private int num;\n    private int denom;\n\n    public Frac(int num, int denom) {\n      this.num = num;\n      this.denom = denom;\n    }\n\n    public float valeur_approchee() throws ArithmeticException{\n        if (this.denom == 0){\n            throw new ArithmeticException(\"Division par zéro\");\n        }\n        return this.num  / this.denom;      \n    }\n}\n\nDans ce cas on dit que l’exception se propage. Elle devra être gérée “plus haut”, par exemple en mettant un bloc try / catch dans le Main\n\n\nMain.java\n\npublic class Main{\n    public static void main(java.lang.String[] args) {\n        Frac f1 = new Frac(1, 0);\n\n        try{\n            System.out.println(f1.valeur_approchee());\n        }catch(ArithmeticException e){\n            System.out.println(\"Impossible de diviser par zéro\");\n        }      \n    }\n}\n\n\n\n\nIl est également possible de créer ses propres exceptions.\nPar exemple, si vous décidez que le numérateur ne doit pas être impair, vous pouvez créer :\n\n\nNumerateurImpairException.java\n\npublic class NumerateurImpairException extends Exception{\n    public NumerateurImpairException(){\n        super(\"Le numérateur ne doit pas être impair\");\n    }\n}\n\nVous pouvez ensuite modifier le constructeur pour lever au cas où cette exception.\n\n\nNumerateurImpairException.java\n\npublic class Frac {\n\n    private int num;\n    private int denom;\n\n    public Frac(int num, int denom) throws NumerateurImpairException{\n\n      if (num % 2 != 0){\n          throw new NumerateurImpairException();\n      }\n      this.num = num;\n      this.denom = denom;\n    }\n}\n\nEt enfin vous gérez l’exception dans le Main.\n\n\nMain.java\n\npublic class Main{\n    public static void main(java.lang.String[] args) {\n        try{\n            Frac f1 = new Frac(1, 0);\n        }catch(Exception e){\n            System.out.println(e.getMessage());\n        }\n        //Le numérateur ne doit pas être impair\n    }\n}"
  },
  {
    "objectID": "doc/tp/tp3.html#avant-de-commencer",
    "href": "doc/tp/tp3.html#avant-de-commencer",
    "title": "Java - TP3",
    "section": "2 Avant de commencer",
    "text": "2 Avant de commencer\n\nSur votre disque P:,\n\ncréez un dossier Java,\nà l’intérieur, créez un dossier TP3\nOuvrez et enregistrez le sujet\n\nRécupérez le dépôt sur Moodle"
  },
  {
    "objectID": "doc/tp/tp3.html#datalab",
    "href": "doc/tp/tp3.html#datalab",
    "title": "Java - TP3",
    "section": "3 Datalab",
    "text": "3 Datalab\nIl est possible de faire le TP soit sur la VM, soit sur le datalab\n\nConnectez-vous sur le datalab\nLancez le service Java avec VScode puis suivez les instructions\nDans l’explorer à gauche &gt; clic droit &gt; Upload\n\nChargez le fichier JavaTP3-base.zip\n\nOuvrez un terminal\n\nrentrez unzip JavaTP3-base.zip pour extraire les fichiers\n\nFile &gt; Open Folder &gt; /home/onyxia/work/JavaTP3-base/\n\n⚠️ important d’ouvrir le bon dossier !\n\nOuvrez un terminal (CTRL+ù)\n\nPositionnez-vous dans le bon dossier : cd JavaTP3-base\nCompilez le Main : javac -d bin -sourcepath src ./src/edu/ensai/pokemon/main/Main.java\nExéctuez le programme : java -cp bin edu.ensai.pokemon.main.Main"
  },
  {
    "objectID": "doc/tp/tp3.html#vm",
    "href": "doc/tp/tp3.html#vm",
    "title": "Java - TP3",
    "section": "4 VM",
    "text": "4 VM\n\nOuvrez Visual Studio Code\n\nFile &gt; Open Folder\nAllez dans le dossier TP3\nUn clic sur JavaTP3-base, ensuite Sélectionner un dossier\n\nOuvrez un terminal (CTRL+ù)\n\nPositionnez-vous dans le bon dossier : cd JavaTP3-base\nCompilez le Main : javac -d bin -sourcepath src .\\src\\edu\\ensai\\pokemon\\main\\Main.java\nExéctuez le programme : java -cp bin edu.ensai.pokemon.main.Main"
  },
  {
    "objectID": "doc/tp/tp3.html#exercices",
    "href": "doc/tp/tp3.html#exercices",
    "title": "Java - TP3",
    "section": "5 Exercices",
    "text": "5 Exercices\n\n5.1 Exercice 1\n\nTransformez la classe Species en Enum\nAdaptez le code du Main\n\n\n\n5.2 Exercice 2\n\nPlayer est un singleton, on ne peut en créer qu’une seule instance\nClasse Inventory\nAjouter à Player un attribut de type Inventory\nDans le main, appeler l’instance de Player\n\nCréer et ajouter un objet à l’inventaire\nAfficher le montant total de l’inventaire\n\n\nhttps://refactoring.guru/fr/replace-inheritance-with-delegation\n\n\n5.3 Exercice 3\n\n\n5.4 Exercice 4"
  },
  {
    "objectID": "doc/tp/tp3.html#exemple-de-classe",
    "href": "doc/tp/tp3.html#exemple-de-classe",
    "title": "Java - TP3",
    "section": "6 Exemple de classe",
    "text": "6 Exemple de classe\nimport java.util.ArrayList;\n\n/**\n * Represents a student\n * Attributes : name, age, and a list of notes.\n */\npublic class Student {\n    private String name;\n    private int age;\n    private ArrayList&lt;Double&gt; notes;\n\n    /**\n     * Constructs a new Student object with the given name and age.\n     * @param name The name of the student.\n     * @param age The age of the student.\n     */\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n        this.notes = new ArrayList&lt;&gt;();     // empty list\n    }\n\n    // -------------------------------------------------------\n    // Getters and Setters (to access private attributes)\n    // -------------------------------------------------------\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    /**\n     * Sets the age of the student.\n     * @param age The age to set. It should be greater than zero.\n     * @throws IllegalArgumentException if the provided age is not greater than zero.\n     */\n    public void setAge(int age) {\n        if (age &lt;= 0) {\n            throw new IllegalArgumentException(\"Age must be greater than zero.\");\n        }\n        this.age = age;\n    }\n    \n    // -------------------------------------------------------\n    // Methods\n    // -------------------------------------------------------\n\n    /**\n     * @return A string representation of the Student object.\n     */\n    @Override\n    public String toString() {\n        return \"Student(\" +\n                \"name='\" + this.name + '\\'' +\n                \", age=\" + this.age +\n                ')';\n    }\n\n    /**\n     * Adds a note to the student's list of notes.\n     * @param note The note to be added.\n     */\n    public void addNote(double note) {\n        this.notes.add(note);\n    }\n\n    /**\n     * Computes the average note of the student.\n     * @return The average note of the student.\n     * @throws ArithmeticException if there are no notes present.\n     */\n    public double computeAverage() {\n        if (this.notes.isEmpty()) {\n            throw new ArithmeticException(\"Cannot compute average. No notes available.\");\n        }\n\n        double sum = 0.0;\n        for (double note : this.notes) {\n            sum += note;\n        }\n        return sum / this.notes.size();\n    }\n\n\n    /**\n     * Main method\n     */\n    public static void main(String[] args) {\n        Student student = new Student(\"Eva\", 20);\n        student.addNote(17.5);\n        student.addNote(12.0);\n        student.addNote(20.0);\n        \n        System.out.println(student);\n        System.out.println(\"Average Note: \" + student.computeAverage());\n    }\n}"
  },
  {
    "objectID": "doc/tp/tp3.html#modèle-de-classe",
    "href": "doc/tp/tp3.html#modèle-de-classe",
    "title": "Java - TP3",
    "section": "7 Modèle de classe",
    "text": "7 Modèle de classe\n/**\n * Represents a ...\n */\npublic class ClassName {\n    private String attribute1;\n    private int attribute2;\n\n    /**\n     * Constructs a new ...\n     * @param parameter1 parameter1_description\n     * @param parameter2 parameter2_description\n     */\n    public ClassName(String parameter1, int parameter2) {\n        this.attribute1 = parameter1;\n        this.attribute2 = parameter2;\n    }\n\n\n    // -------------------------------------------------------\n    // Methods\n    // -------------------------------------------------------\n\n    /**\n     * No parameter, return void\n     */\n    public void print_attribute1() {\n        System.out.println(this.attribute1);\n    }\n    \n    /**\n     * Increment value of attribute2\n     * A parameter, return void\n     * @param increment increment\n     */\n    public void increment_attribute2(int increment) {\n        this.attribute2 += increment;\n    }\n    \n    /**\n     * Checks if attribute2 is odd.\n     *\n     * @return true if attribute2 is odd, false otherwise.\n     */\n    public boolean isAttribute2Odd() {\n        return attribute2 % 2 != 0;\n    }\n\n\n    /**\n     * Main method\n     */\n    public static void main(String[] args) {\n\n        ClassName c = new ClassName(\"\", 0);\n        c.increment_attribute2(5);\n        System.out.println(c.isAttribute2Odd());\n    }\n}\n\n\n\n\n\nclassDiagram\n    class Item {\n        + name: String\n        + price: int\n        + isPermanent(): boolean\n        + isSingleUse(): boolean\n        + isUnusable(): boolean\n    }\n\n    class SingleUseItem {\n        - alreadyUsed: bool\n        + consume()\n    }\n\n\n    class Potion {\n        - hp_gain: int\n    }\n\n    class Sweet {\n        - xp_gain: int\n        + use(): int\n    }\n    \n    class Healer{\n        &lt;&lt;interface&gt;&gt;\n        + heal()\n    }\n\n    Item &lt;|-- SingleUseItem\n    Item &lt;|-- PermanentItem\n\n    SingleUseItem &lt;|-- Potion\n    SingleUseItem &lt;|-- Sweet\n    \n    Potion ..|&gt; Healer : implements"
  },
  {
    "objectID": "doc/tp/tp1.html",
    "href": "doc/tp/tp1.html",
    "title": "Java - TP1",
    "section": "",
    "text": "Langage orienté objet\nCompilé en bytecode puis exécuté par la JVM\n\nfichier.java ➡️ compilation ➡️ fichier.class ➡️ éxécution ➡️ run\ncompiler : javac fichier.java\néxécuter : java fichier\n\nPoints-virgules pour terminer les déclarations\nAccolades pour délimiter les blocs de code\nFortement typé statiquement\n\nvous devez déclarer le type de chaque variable\nces types sont vérifiés à la compilation\n\nConventions de nommage : utilisation du CamelCase\n\nclasse : première lettre MAJUSCULE, ex : VeloElectrique\nméthodes et variables : première lettre minuscule, ex : ajouterPanier()\n\n\nclass HelloWorld {\n    public static void main(String[] args) { \n        String message = \"Hello World!\"; \n        System.out.println(message);\n    }\n}"
  },
  {
    "objectID": "doc/tp/tp1.html#java-en-quelques-mots",
    "href": "doc/tp/tp1.html#java-en-quelques-mots",
    "title": "Java - TP1",
    "section": "",
    "text": "Langage orienté objet\nCompilé en bytecode puis exécuté par la JVM\n\nfichier.java ➡️ compilation ➡️ fichier.class ➡️ éxécution ➡️ run\ncompiler : javac fichier.java\néxécuter : java fichier\n\nPoints-virgules pour terminer les déclarations\nAccolades pour délimiter les blocs de code\nFortement typé statiquement\n\nvous devez déclarer le type de chaque variable\nces types sont vérifiés à la compilation\n\nConventions de nommage : utilisation du CamelCase\n\nclasse : première lettre MAJUSCULE, ex : VeloElectrique\nméthodes et variables : première lettre minuscule, ex : ajouterPanier()\n\n\nclass HelloWorld {\n    public static void main(String[] args) { \n        String message = \"Hello World!\"; \n        System.out.println(message);\n    }\n}"
  },
  {
    "objectID": "doc/tp/tp1.html#introduction",
    "href": "doc/tp/tp1.html#introduction",
    "title": "Java - TP1",
    "section": "2 Introduction",
    "text": "2 Introduction\n\n\n\n\n\n\nConseil\n\n\n\n\nSur votre disque P:, créez un dossier Java, puis à l’intérieur, créez un dossier TP1\nSur Moodle, téléchargez le sujet et le code de départ : JavaTP1.zip\n\nEnregistrez ces fichiers dans votre dossier TP1\nDézippez le fichier JavaTP1.zip\n\n\n\n\n\nOuvrez Visual Studio Code\n\nFile &gt; Open Folder\n\nAllez dans le dossier JavaTP1\nUn clic sur array_project , ensuite Sélectionner un dossier\n\nOuvrez un terminal (Terminal &gt; New)\n\n\nLisez le code du fichier ArrayListExample.java\n\ncompilez le fichier : javac -d bin ./src/edu/ensai/ArrayListExample.java\néxécutez le programme : java -cp bin edu.ensai.ArrayListExample\n\n\ni++ et ++i\n    int n = 10;\n    System.out.println(n++);\n    System.out.println(n);\n    n = 10;\n    System.out.println(++n);\n    System.out.println(n);\n\n\nCommandes Powershell\n\n\n\n\n\n\n\nCommande\nDescription\n\n\n\n\ncd [directory]\nChange le répertoire de travail\n\n\ncd P:\nAller dans le lecteur P:\n\n\ncd ..\nRetour dans le dossier parent\n\n\ndir\nListe le contenu du répertoire courant\n\n\ntree /F\nVisualiser l’arborscence\n\n\nmkdir [directory]\nCrée un nouveau répertoire\n\n\ndel [file]\nSupprime un fichier\n\n\ncopy [source] [dest]\nCopie un fichier ou un répertoire\n\n\nmove [source] [dest]\nDéplace un fichier ou un répertoire\n\n\ncat [file]\nAffiche le contenu d’un fichier"
  },
  {
    "objectID": "doc/tp/tp1.html#exercices",
    "href": "doc/tp/tp1.html#exercices",
    "title": "Java - TP1",
    "section": "3 Exercices",
    "text": "3 Exercices\n\n3.1 Exercice 1\n\nFile &gt; Open Folder\nAllez dans le dossier JavaTP1\nUn clic sur car_project , ensuite Sélectionner un dossier\n\n\n\n3.2 Exercice 2\n\nFile &gt; Open Folder\nAllez dans le dossier JavaTP1\nUn clic sur domino_project, ensuite Sélectionner un dossier"
  },
  {
    "objectID": "doc/tp/tp1.html#une-classe",
    "href": "doc/tp/tp1.html#une-classe",
    "title": "Java - TP1",
    "section": "4 Une classe",
    "text": "4 Une classe\n/**\n * A Student\n */\npublic class Student {\n    // Attributs\n    private String name;\n    private int age;\n\n    /**\n     * Constructor\n     */\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n\n    // -------------------------------------------------------\n    // Getters et Setters\n    // -------------------------------------------------------\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        if (age &gt; 0) {\n            this.age = age;\n        } else {\n            System.out.println(\"L'âge doit être supérieur à zéro.\");\n        }\n    }\n    \n    // -------------------------------------------------------\n    // Methods\n    // -------------------------------------------------------\n\n    @Override\n    public String toString() {\n        return \"Student{\" +\n                \"name='\" + name + '\\'' +\n                \", age=\" + age +\n                '}';\n    }\n\n    /**\n     * Main method\n     */\n    public static void main(String[] args) {\n\n        // Création d'un objet Student\n        Student student = new Student(\"John Doe\", 20);\n        System.out.println(student);\n    }\n}"
  },
  {
    "objectID": "doc/tp/tp2.html",
    "href": "doc/tp/tp2.html",
    "title": "Java - TP2",
    "section": "",
    "text": "Langage orienté objet\nCompilé en bytecode puis exécuté par la JVM\n\nfichier.java (dossier src) ➡️ compilation ➡️ fichier.class (dossier bin) ➡️ éxécution ➡️ run\ncompiler : javac fichier.java\néxécuter : java fichier\n\nPoints-virgules pour terminer les déclarations\nAccolades pour délimiter les blocs de code\nFortement typé statiquement\n\nvous devez déclarer le type de chaque variable\nces types sont vérifiés à la compilation\n\nConventions de nommage : utilisation du CamelCase\n\nclasse : première lettre MAJUSCULE, ex : VeloElectrique\nméthodes et variables : première lettre minuscule, ex : ajouterPanier()"
  },
  {
    "objectID": "doc/tp/tp2.html#rappels-sur-java",
    "href": "doc/tp/tp2.html#rappels-sur-java",
    "title": "Java - TP2",
    "section": "",
    "text": "Langage orienté objet\nCompilé en bytecode puis exécuté par la JVM\n\nfichier.java (dossier src) ➡️ compilation ➡️ fichier.class (dossier bin) ➡️ éxécution ➡️ run\ncompiler : javac fichier.java\néxécuter : java fichier\n\nPoints-virgules pour terminer les déclarations\nAccolades pour délimiter les blocs de code\nFortement typé statiquement\n\nvous devez déclarer le type de chaque variable\nces types sont vérifiés à la compilation\n\nConventions de nommage : utilisation du CamelCase\n\nclasse : première lettre MAJUSCULE, ex : VeloElectrique\nméthodes et variables : première lettre minuscule, ex : ajouterPanier()"
  },
  {
    "objectID": "doc/tp/tp2.html#datalab",
    "href": "doc/tp/tp2.html#datalab",
    "title": "Java - TP2",
    "section": "2 Datalab",
    "text": "2 Datalab\nIl est possible de faire le TP soit sur la VM, soit sur le datalab\n\nConnectez-vous sur le datalab\nLancez le service Java avec VScode puis suivez les instructions\nOuvrez un terminal (CTRL + ù)\n\nDans le terminal, collez git clone https://github.com/i-yamane/JavaOOP-Practical-2.git\n\nFile &gt; Open Folder &gt; /home/onyxia/work/JavaOOP-Practical-2/\n\n⚠️ important d’ouvrir le bon dossier !\n\nOuvrez à nouveau un terminal\n\nPositionnez-vous dans le bon dossier : cd JavaOOP-Practical-2\nCompilez le Main : javac -d bin -sourcepath src ./src/Main.java\nExéctuez le programme : java -classpath bin Main"
  },
  {
    "objectID": "doc/tp/tp2.html#vm",
    "href": "doc/tp/tp2.html#vm",
    "title": "Java - TP2",
    "section": "3 VM",
    "text": "3 VM\n\nSur votre disque P:,\n\ncréez un dossier Java,\nà l’intérieur, créez un dossier TP2\n\nClic droit &gt; Ouvrir Git Bash\n\ngit clone https://github.com/i-yamane/JavaOOP-Practical-2.git\n\nOuvrez Visual Studio Code\n\nFile &gt; Open Folder\nAllez dans le dossier TP2\nUn clic sur JavaOOP-Practical-2, ensuite Sélectionner un dossier\nOuvrez un terminal (CTRL+ù)"
  },
  {
    "objectID": "doc/tp/tp2.html#exercices",
    "href": "doc/tp/tp2.html#exercices",
    "title": "Java - TP2",
    "section": "4 Exercices",
    "text": "4 Exercices\n\n4.1 Exercice 1\n\nCompilez puis exécutez le Main\n\njavac -d bin -sourcepath src .\\src\\Main.java\njava -classpath bin Main\n\nRangez les fichiers dans les bons dossiers\n\nMettez à jour les imports\njavac -d bin -sourcepath src .\\src\\edu\\ensai\\pokemon\\main\\Main.java\njava -cp bin edu.ensai.pokemon.main.Main\n\n\n\n\n4.2 Exercice 2\n\nPour tous les attributs\n\npublic ➡️ private\nCréez Getter et Setters\nAdaptez et corrigez le Main.java\n\n\n\n\n4.3 Exercice 3\n\nCommencez par bien faire le diagramme UML\nHéritage, classe abstraite ➡️ comme en Python\nImplémentation\n\nEn Java, il n’y a pas d’Héritage multiple\nPermet de forcer les classes à implémenter des méthodes\nPossible d’implémenter plusieurs interfaces\n\n\n\n\n4.4 Exercice 4\n\nParamétrage pour utiliser la commande javadoc\n\nLancez les 2 commandes suivantes dans votre terminal powershell\n\n$env:JAVA_HOME = \"C:\\Program Files\\Java\\jdk-11.0.11\"\n$env:PATH += \";$env:JAVA_HOME\\bin\"\n\nElles permettent de dire où est installée le programme javadoc\n\nGénérez la javadoc\n\njavadoc -d doc -sourcepath src -subpackages edu.ensai.pokemon\n\nDans votre dossier, ouvrez dans doc/index.html\n\npour ceux sur le Datalab :\n\nClic droit sur le dossier doc\nDownload"
  },
  {
    "objectID": "doc/tp/tp2.html#exemple-de-classe",
    "href": "doc/tp/tp2.html#exemple-de-classe",
    "title": "Java - TP2",
    "section": "5 Exemple de classe",
    "text": "5 Exemple de classe\nimport java.util.ArrayList;\n\n/**\n * Represents a student\n * Attributes : name, age, and a list of notes.\n */\npublic class Student {\n    private String name;\n    private int age;\n    private ArrayList&lt;Double&gt; notes;\n\n    /**\n     * Constructs a new Student object with the given name and age.\n     * @param name The name of the student.\n     * @param age The age of the student.\n     */\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n        this.notes = new ArrayList&lt;&gt;();     // empty list\n    }\n\n    // -------------------------------------------------------\n    // Getters and Setters (to access private attributes)\n    // -------------------------------------------------------\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    /**\n     * Sets the age of the student.\n     * @param age The age to set. It should be greater than zero.\n     * @throws IllegalArgumentException if the provided age is not greater than zero.\n     */\n    public void setAge(int age) {\n        if (age &lt;= 0) {\n            throw new IllegalArgumentException(\"Age must be greater than zero.\");\n        }\n        this.age = age;\n    }\n    \n    // -------------------------------------------------------\n    // Methods\n    // -------------------------------------------------------\n\n    /**\n     * @return A string representation of the Student object.\n     */\n    @Override\n    public String toString() {\n        return \"Student(\" +\n                \"name='\" + this.name + '\\'' +\n                \", age=\" + this.age +\n                ')';\n    }\n\n    /**\n     * Adds a note to the student's list of notes.\n     * @param note The note to be added.\n     */\n    public void addNote(double note) {\n        this.notes.add(note);\n    }\n\n    /**\n     * Computes the average note of the student.\n     * @return The average note of the student.\n     * @throws ArithmeticException if there are no notes present.\n     */\n    public double computeAverage() {\n        if (this.notes.isEmpty()) {\n            throw new ArithmeticException(\"Cannot compute average. No notes available.\");\n        }\n\n        double sum = 0.0;\n        for (double note : this.notes) {\n            sum += note;\n        }\n        return sum / this.notes.size();\n    }\n\n\n    /**\n     * Main method\n     */\n    public static void main(String[] args) {\n        Student student = new Student(\"Eva\", 20);\n        student.addNote(17.5);\n        student.addNote(12.0);\n        student.addNote(20.0);\n        \n        System.out.println(student);\n        System.out.println(\"Average Note: \" + student.computeAverage());\n    }\n}"
  },
  {
    "objectID": "doc/tp/tp2.html#modèle-de-classe",
    "href": "doc/tp/tp2.html#modèle-de-classe",
    "title": "Java - TP2",
    "section": "6 Modèle de classe",
    "text": "6 Modèle de classe\n/**\n * Represents a ...\n */\npublic class ClassName {\n    private String attribute1;\n    private int attribute2;\n\n    /**\n     * Constructs a new ...\n     * @param parameter1 parameter1_description\n     * @param parameter2 parameter2_description\n     */\n    public ClassName(String parameter1, int parameter2) {\n        this.attribute1 = parameter1;\n        this.attribute2 = parameter2;\n    }\n\n\n    // -------------------------------------------------------\n    // Methods\n    // -------------------------------------------------------\n\n    /**\n     * No parameter, return void\n     */\n    public void print_attribute1() {\n        System.out.println(this.attribute1);\n    }\n    \n    /**\n     * Increment value of attribute2\n     * A parameter, return void\n     * @param increment increment\n     */\n    public void increment_attribute2(int increment) {\n        this.attribute2 += increment;\n    }\n    \n    /**\n     * Checks if attribute2 is odd.\n     *\n     * @return true if attribute2 is odd, false otherwise.\n     */\n    public boolean isAttribute2Odd() {\n        return attribute2 % 2 != 0;\n    }\n\n\n    /**\n     * Main method\n     */\n    public static void main(String[] args) {\n\n        ClassName c = new ClassName(\"\", 0);\n        c.increment_attribute2(5);\n        System.out.println(c.isAttribute2Odd());\n    }\n}\n\n\n\n\n\nclassDiagram\n    class Item {\n        + name: String\n        + price: int\n        + isPermanent(): boolean\n        + isSingleUse(): boolean\n        + isUnusable(): boolean\n    }\n\n    class SingleUseItem {\n        - alreadyUsed: bool\n        + consume()\n    }\n\n\n    class Potion {\n        - hp_gain: int\n    }\n\n    class Sweet {\n        - xp_gain: int\n        + use(): int\n    }\n    \n    class Healer{\n        &lt;&lt;interface&gt;&gt;\n        + heal()\n    }\n\n    Item &lt;|-- SingleUseItem\n    Item &lt;|-- PermanentItem\n\n    SingleUseItem &lt;|-- Potion\n    SingleUseItem &lt;|-- Sweet\n    \n    Potion ..|&gt; Healer : implements"
  },
  {
    "objectID": "doc/tp/tp4.html#avant-de-commencer",
    "href": "doc/tp/tp4.html#avant-de-commencer",
    "title": "Java - TP3",
    "section": "2 Avant de commencer",
    "text": "2 Avant de commencer\n\nSur votre disque P:,\n\ncréez un dossier Java,\nà l’intérieur, créez un dossier TP4\nOuvrez et enregistrez le sujet\n\nRécupérez le dépôt sur Moodle"
  },
  {
    "objectID": "doc/tp/tp4.html#datalab",
    "href": "doc/tp/tp4.html#datalab",
    "title": "Java - TP3",
    "section": "3 Datalab",
    "text": "3 Datalab\nIl est possible de faire le TP soit sur la VM, soit sur le datalab\n\nConnectez-vous sur le datalab\nLancez le service Java avec VScode puis suivez les instructions\nDans l’explorer à gauche &gt; clic droit &gt; Upload\n\nChargez le fichier JavaTP4-unit-test-base\n\nOuvrez un terminal\n\nrentrez unzip JavaTP4-unit-test-base pour extraire les fichiers\n\nFile &gt; Open Folder &gt; /home/onyxia/work/JavaTP4-unit-test-base/\n\n⚠️ important d’ouvrir le bon dossier !\n\n\nNe pas faire :\n\nOuvrez un terminal (CTRL+ù)\n\nPositionnez-vous dans le bon dossier : cd JavaTP4-unit-test-base\n\nCompilez le Main : javac -d bin -sourcepath src ./src/edu/ensai/pokemon/main/Main.java\nExéctuez le programme : java -cp bin edu.ensai.pokemon.main.Main"
  },
  {
    "objectID": "doc/tp/tp4.html#vm",
    "href": "doc/tp/tp4.html#vm",
    "title": "Java - TP3",
    "section": "4 VM",
    "text": "4 VM\n\nOuvrez Visual Studio Code\n\nFile &gt; Open Folder\nAllez dans le dossier TP3\nUn clic sur JavaTP4-unit-test-base, ensuite Sélectionner un dossier\n\n\nNe pas faire :\n\nOuvrez un terminal (CTRL+ù)\n\nPositionnez-vous dans le bon dossier : cd JavaTP4-unit-test-base\n\nCompilez le Main : javac -d bin -sourcepath src .\\src\\main\\java\\fr\\ensai\\java\\tp4\\main\\Main.java\nExéctuez le programme : java -cp bin edu.ensai.pokemon.main.Main"
  },
  {
    "objectID": "doc/tp/tp4.html#tests-unitaires",
    "href": "doc/tp/tp4.html#tests-unitaires",
    "title": "Java - TP3",
    "section": "5 Tests unitaires",
    "text": "5 Tests unitaires\n\n5.1 Bonnes pratiques\n\nTests indépendants : Chaque test devrait être indépendant des autres tests. Assurez-vous que l’exécution d’un test ne dépend pas du résultat d’un autre test.\nClarté et lisibilité : Écrivez des noms de méthodes de test descriptifs pour indiquer clairement ce qui est testé. Utilisez des noms qui décrivent le comportement attendu.\nIsolation des tests : Les tests doivent être isolés, c’est-à-dire qu’ils ne doivent pas dépendre de l’état du système, de l’ordre d’exécution ou d’autres facteurs externes. Utilisez des mocks ou des données de test spécifiques pour isoler chaque test.\nTestez les cas limites : Assurez-vous de tester les cas limites ainsi que les cas typiques. Cela inclut les valeurs nulles, les limites des boucles, les bornes d’entrée, etc.\nMinimisez les assertions par test : Chaque test ne devrait vérifier qu’une seule chose. Si un test contient plusieurs assertions, cela rendra plus difficile de comprendre quelle assertion a échoué en cas d’échec du test.\nMise en place et nettoyage : Utilisez les méthodes @Before et @After pour effectuer la mise en place et le nettoyage des objets nécessaires pour chaque test. Assurez-vous que l’état initial est correct avant chaque test.\nUtilisation de données de test significatives : Utilisez des données de test significatives et représentatives pour vos cas de test. Cela garantit que les tests couvrent des scénarios réels et non seulement les cas triviaux.\nGestion des exceptions : Testez les cas où des exceptions peuvent être levées et assurez-vous qu’elles sont gérées correctement dans vos tests.\nDocumentation des tests : Écrivez des commentaires ou des descriptions claires pour expliquer le but de chaque test, ce qu’il teste et pourquoi c’est important.\nExécution régulière des tests : Exécutez vos tests régulièrement pour vous assurer qu’ils restent valides au fil du temps, en particulier après des modifications du code source.\n\n\n\n5.2 Un exemple avec JUnit\n\n\nfrac.java\n\npublic class Frac {\n\n    private int num;\n    private int denom;\n\n    public Frac(int num, int denom) {\n        this.num = num;\n        this.denom = denom;\n    }\n\n    public boolean est_valide() {\n        return denom != 0;\n    }\n\n    public float valeur_approchee() {\n        return (float) this.num / this.denom;\n    }\n\n    public Frac inverse() {\n        return new Frac(this.denom, this.num);\n    }\n\n    public Frac addition(Frac other) {\n        int newNum = this.num * other.denom + other.num * this.denom;\n        int newDenom = this.denom * other.denom;\n        return new Frac(newNum, newDenom);\n    }\n\n    public Frac multiplication(Frac other) {\n        int newNum = this.num * other.num;\n        int newDenom = this.denom * other.denom;\n        return new Frac(newNum, newDenom);\n    }\n\n    public String toString() {\n        return num + \"/\" + denom;\n    }\n}\n\n\n\nFracTest.java\n\nimport org.junit.Test;\nimport org.junit.Assert;\n\npublic class FracTest {\n\n    @Test\n    public void testEstValideOK() {\n        Frac frac1 = new Frac(1, 2);\n        Assert.assertTrue(frac1.est_valide());\n    }\n    \n    public void testEstValideEchec() {\n        Frac frac2 = new Frac(3, 0);\n        Assert.assertFalse(frac2.est_valide());\n    }\n\n    @Test\n    public void testValeurApprochee() {\n        Frac frac1 = new Frac(1, 2);\n        Assert.assertEquals(0.5, frac1.valeur_approchee(), 0.001);\n    }\n\n    @Test\n    public void testInverse() {\n        Frac frac1 = new Frac(1, 2);\n        Frac inverse1 = frac1.inverse();\n\n        Assert.assertEquals(2, inverse1.num);\n        Assert.assertEquals(1, inverse1.denom);\n    }\n\n    @Test\n    public void testAddition() {\n        Frac frac1 = new Frac(1, 2);\n        Frac frac2 = new Frac(1, 4);\n        Frac result = frac1.addition(frac2);\n\n        Assert.assertEquals(6, result.num);\n        Assert.assertEquals(8, result.denom);\n    }\n\n    @Test\n    public void testMultiplication() {\n        Frac frac1 = new Frac(1, 2);\n        Frac frac2 = new Frac(3, 4);\n        Frac result = frac1.multiplication(frac2);\n\n        Assert.assertEquals(3, result.num);\n        Assert.assertEquals(8, result.denom);\n    }\n\n    @Test\n    public void testToString() {\n        Frac frac1 = new Frac(1, 2);\n        Assert.assertEquals(\"1/2\", frac1.toString());\n    }\n}"
  },
  {
    "objectID": "doc/tp/tp4.html#exercices",
    "href": "doc/tp/tp4.html#exercices",
    "title": "Java - TP3",
    "section": "6 Exercices",
    "text": "6 Exercices\n\n6.1 Exercice 1\nDes tests unitaires ont déjà été écrits\n\ndans VSCode à gauche, cliquez sur l’icone en forme de fiole\n\npatientez quelques secondes le temps que VSCode trouve les tests unitaires\n\nlancez les tests en cliquant sur les 2 triangles pointants vers la droite\ncorrigez les tests (voir sujet)\n\nQuestion 2 :\n\ncréez la classe de tests SpecieTest\nécrivez les TU de la classe Specie en vous inspirant de ce qui a été fait pour Player\nMéthodes à tester :\n\nConstructeur de BULBZAURUS\nConstructeur de CHARMANDUS\ntoString() de BULBZAURUS : Species [number=0, name=Bulbzaurus, type=GRASS, initialHp=10, initialStrength=1]\n\n\n\n\n6.2 Exercice 2\n\ncréez la classe InventoryTest et écrivez les TU de la méthode add()\ncréez la classe SingleUseItemTest\n\n\n\n6.3 Exercice 3\nRappels sur les interfaces :\n\ncréez une Interface Coordinates contenant les méthodes communes\nmodifiez la classe CartesianCoordinates pour qu’elle implémente cette interface\ncréez la classe PolarCoordinates implémentant la même interface\n\nEnsuite compilez, puis exécutez le main :\n\npour un terminal Bash\n\nCompilez le Main : javac -d bin -sourcepath src ./src/main/Main.java\nExéctuez le programme : java -cp bin main.Main\n\npour un terminal PowerShell\nCompilez le Main : javac -d bin -sourcepath src .\\src\\main\\Main.java\nExéctuez le programme : java -cp bin main.Main"
  }
]