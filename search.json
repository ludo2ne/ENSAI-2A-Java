[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Java",
    "section": "",
    "text": "üöß This course is currently being refactored"
  },
  {
    "objectID": "index.html#class",
    "href": "index.html#class",
    "title": "Java",
    "section": "Class",
    "text": "Class\n6h\n\nIntroduction (why Java)\nJava syntax (variables, structures, loops, etc.)\nContainers (ArrayList, HashMap)\nOOP (Classes, Objects, Inheritance, Polymorphism, etc.)\nJava Project (Tree structure, Packages, Maven)\nUnit Tests (JUnit)\nAdvanced (Interface, Enum, Stream)\nSpring Boot, Hibernate ?"
  },
  {
    "objectID": "index.html#tp",
    "href": "index.html#tp",
    "title": "Java",
    "section": "TP",
    "text": "TP\n4x3h\n\nTP1 : Discover Java syntax\nTP2 : Object Oriented Programming, Unit Tests\nTP3 : Rated TP\nTP4 : ?"
  },
  {
    "objectID": "index.html#bibliography",
    "href": "index.html#bibliography",
    "title": "Java",
    "section": "Bibliography",
    "text": "Bibliography\n\nJava Tutorial, w3schools\nhttps://www.baeldung.com/get-started-with-java-series\n\n\nFR\n\nD√©veloppons en Java, Jean-Michel DOUDOUX\nApprenez √† programmer en Java, Zeste de savoir\nhttps://blog.paumard.org/cours/java/"
  },
  {
    "objectID": "doc/tp/tp3.html",
    "href": "doc/tp/tp3.html",
    "title": "Java - TP3",
    "section": "",
    "text": "üöß"
  },
  {
    "objectID": "doc/tp/tp3.html#instructions",
    "href": "doc/tp/tp3.html#instructions",
    "title": "Java - TP3",
    "section": "1 Instructions",
    "text": "1 Instructions\n\nGroups of 1 or 2 students (from the same TP group)\n\nEdit the README.md (when it‚Äôs created) file to enter your names\nInter-group plagiarism will be severely punished\n\nDue Date: Wednesday 26 March at 10pm\n\n1 point deducted for each half-hour delay\n\nZip your project repository and load it on Moodle\n\nDon‚Äôt include target folder\n\n\nYour code must be functional, with no compilation or runtime errors.\nDon‚Äôt forget to include the javadoc and to comment your code if necessary.\n\n\n\n\n\n\nImportant\n\n\n\n\nEverything you need is in the course and the practical exercises\nYou are permitted to conduct internet searches to find information and documentation\nThe use of any LLM is strictly prohibited during this exam\n\nAs Olivier so rightly says: LLMs are good servants, but bad masters\nThey can be useful tools, but they must not replace your own comprehension and programming skills\n\n\nIf you are caught using an LLM, it will be considered cheating and you will receive a zero.\n\n\n\n1.1 Create a private repo\n\nLogin to GitHub\nCreate a new repository\n\nRepository name: ENSAI-Java-TP3\nPrivate\n‚úÖ Add a README file\nAdd .gitignore: Java\nLicence: Apache License 2.0 (or another)\n\n\n\n\n1.2 Launch service VSCode Java\n\nLaunch the service VScode-Java using this link.\nClone your repository (https)\nOpen Folder home/onyxia/work/ENSAI-Java-TP3\n\n\n\n\n\n\n\nCaution\n\n\n\nService interruptions are possible. To prevent data loss, back up your code regularly with Git.\nAfter each part, create a commit and push your code to the remote repository.\n\n\n\n\n1.3 When you‚Äôve finished\n\nSave your work using git\nDelete your service"
  },
  {
    "objectID": "doc/tp/tp3.html#subject",
    "href": "doc/tp/tp3.html#subject",
    "title": "Java - TP3",
    "section": "2 Subject",
    "text": "2 Subject\nThis exercise involves designing and implementing a media management system in Java. You‚Äôll create classes for media types (songs, podcasts), playlists, and a media player. Focus on object-oriented principles, defining attributes, methods, and relationships. The goal is a functional system for managing and playing media.\nGiven files :\n\nSong.java\npom.xml\n\n\n\n\n\n\n\nGiven files (click here to expand)\n\n\n\n\n\n\n\nSong.java\n\npackage fr.ensai.mediaplayer;\n\n/**\n * Represents a song with essential attributes.\n */\npublic class Song {\n    private String singer;\n    private String title;\n    private int year;\n    private int duration;\n    private String lyrics;\n    private String author;\n    private String composer;\n\n    /**\n     * Constructs a new Song object.\n     *\n     * @param title    The title of the song.\n     * @param singer   The singer of the song.\n     * @param title    The title of the song.\n     * @param year     The year the song was released.\n     * @param duration The duration of the song in seconds.\n     * @param lyrics   The lyrics of the song.\n     * @param author   The author of the song.\n     * @param composer The composer of the song.\n     */\n    public Song(String title, String singer, int year, int duration, String lyrics, String author, String composer) {\n        this.title = title;\n        this.singer = singer;\n        this.year = year;\n        this.duration = duration;\n        this.lyrics = lyrics;\n        this.author = author;\n        this.composer = composer;\n    }\n\n    /**\n     * String representation of the Song.\n     */\n    @Override\n    public String toString() {\n        return \"Song \" + this.title + \" by \" + this.singer;\n    }\n    \n    /**\n     * Indicates whether some other object is \"equal to\" this one. Two Song\n     * objects are considered equal if they have the same title, singer, and year.\n     */\n    @Override\n    public boolean equals(Object o) {\n        if (this == o)\n            return true;\n        if (o == null || this.getClass() != o.getClass())\n            return false;\n        Song otherSong = (Song) o;\n        return this.year == otherSong.year &&\n                Objects.equals(this.title, otherSong.title) &&\n                Objects.equals(this.singer, otherSong.singer);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(this.title, this.singer, this.year);\n    }\n\n}\n\n\n\n\npom.mxl\n\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;fr.ensai&lt;/groupId&gt;\n    &lt;artifactId&gt;mediaplayer&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n\n    &lt;properties&gt;\n        &lt;maven.compiler.source&gt;21&lt;/maven.compiler.source&gt;\n        &lt;maven.compiler.target&gt;21&lt;/maven.compiler.target&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;!-- JUnit for testing --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n            &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt;\n            &lt;version&gt;5.9.1&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n            &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt;\n            &lt;version&gt;5.9.1&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;!-- Compiler Plugin --&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n                &lt;version&gt;3.8.1&lt;/version&gt;\n                &lt;configuration&gt;\n                    &lt;source&gt;21&lt;/source&gt;\n                    &lt;target&gt;21&lt;/target&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;\n                &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;\n                &lt;version&gt;3.0.0&lt;/version&gt;\n                &lt;configuration&gt;\n                    &lt;mainClass&gt;fr.ensai.mediaplayer.Main&lt;/mainClass&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;\n                &lt;version&gt;3.2.5&lt;/version&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n&lt;/project&gt;\n\n\n\n\n\n\nCreate the arborscence of a Maven project"
  },
  {
    "objectID": "doc/tp/tp3.html#questions",
    "href": "doc/tp/tp3.html#questions",
    "title": "Java - TP3",
    "section": "3 Questions",
    "text": "3 Questions\n\n3.1 Artist\nIn the Song class, we want to replace the String types for attributes singer, author, and composer with instances of an Artist class.\n\n\n\n\n\nclassDiagram\n\nclass Artist {\n     - -firstName: String\n     - -lastName: String\n     - -nationality: String\n     + toString(): String\n}\n\n\n\n\n\n\nIn the toString() method, concat ‚ÄúArtist‚Äù with firstName and lastName.\n\nCreate Artist class\nRefactor Song class updating attributes types\n\nWe‚Äôll assume that the songs have a single singer, a single author, a single composer\n\nIn Song class, create method play(),\n\nthis method will print each word of lyrics\nuse the code below to add a brief delay between each word\n\n\ntry {\n    Thread.sleep(100);\n} catch (InterruptedException e) {\n    Thread.currentThread().interrupt();\n    System.err.println(\"Thread was interrupted\");\n}\n\nCreate a class Main with a main method\nIn the main() method, create an instance of Song and play it\n\nuse a real Song, singer and lyrics\nyou are allowed to leave author and composer blank\nfor the lyrics, you can limit them to a few hundred words\n\n\n\n\n3.2 Podcast\nIn your player you will also read Podcasts :\n\n\n\n\n\nclassDiagram\n\nclass Podcast {\n    - -title: String\n    - -host: String\n    - -topic: String\n    - -duration: int\n    - -year: int\n    - -subtitles: String\n    + play()\n}\n\n\n\n\n\n\n\nImplement class Podcast\n\nUse OOP to avoid code duplication\n\nCreate method play(), printing subtitles\nImplement the toString() method in the same way as for songs\n\n\n\n3.3 Pop, Rock, Electro\nWe want to add a new attribute to the Song to store the musical genres it is associated with.\n\nCreate a structure to store musical genres\nAdd 10 values of your choice\nModify the Song class to add a list of musical genres to each song\nDon‚Äôt forget to update the main() method\n\n\n\n3.4 Playlist\nWe now want to be able to create playlists with these songs and podcasts.\n\n\n\n\n\nclassDiagram\n\nclass Playlist {\n    - -name: String\n    - -mediaList: List~Media~\n    - -totalDuration: int\n    + addMedia(Media media)\n    + removeMedia(Media media): bool\n    + removeMedia(int index)\n    + play(boolean random)\n}\n\n\n\n\n\n\n\nCreate a Playlist class with a name, a list of media and total duration\nDevelop the addMedia() method to add a media at the end of the playlist\nCreate the removeMedia(Media media) method\n\nit deletes occurences of a media if it exists in the playlist\n\nCreate unit tests with Junit for these last two methods\nInstanciate the removeMedia(Int i) method to delete a media by index\nDevelop a method for playing the playlist\n\nInclude a parameter to play the tracks randomly\n\nAdd the option of copying the playlist\n\n\n\n3.5 Create some objects\nIn the main method:\n\nCreate a new song (in addition to the one created at the beginning), as well as a Podcast\nInstantiate a playlist named p1 and add these three media to it\nCopy your playlist and name it p2\nRemove a song from p1\nPrint the total duration of p1 and p2\nPlay p2"
  },
  {
    "objectID": "doc/tp/tp1.html",
    "href": "doc/tp/tp1.html",
    "title": "Introduction to Java syntax",
    "section": "",
    "text": "In this first tutorial, we‚Äôre simply going to familiarize ourselves with Java syntax, without using object-oriented programming.\nThis is why methods are defined as static. They are class methods. You don‚Äôt need to instantiate an object to call them.\nWe‚Äôre going to do a few exercises on the subject of passwords."
  },
  {
    "objectID": "doc/tp/tp1.html#objectives",
    "href": "doc/tp/tp1.html#objectives",
    "title": "Introduction to Java syntax",
    "section": "",
    "text": "In this first tutorial, we‚Äôre simply going to familiarize ourselves with Java syntax, without using object-oriented programming.\nThis is why methods are defined as static. They are class methods. You don‚Äôt need to instantiate an object to call them.\nWe‚Äôre going to do a few exercises on the subject of passwords."
  },
  {
    "objectID": "doc/tp/tp1.html#introduction",
    "href": "doc/tp/tp1.html#introduction",
    "title": "Introduction to Java syntax",
    "section": "1 Introduction",
    "text": "1 Introduction\nIn this tutorial, we will use the INSEE SSPCloud Datalab.\n\nLogin to SSPCloud\n\n\n1.1 Git setup\n\n\n\n\n\n\nCaution\n\n\n\nOn the datalab, your services have a limited lifespan.\nTo save your programs, the best practice is to use a git repository. We will therefore create and use a token to communicate with GitHub.\nTo follow the process, you need to have a GitHub account. It is also possible to follow a similar process with GitLab.\n\n\n\nGenerate a GitHub Token\n\n\n\n\n\n\nAlready done?\n\n\n\nIf you have already generated and declared a GitHub token, there‚Äôs no need to repeat these 2 steps.\n\n\n\nLogin to GitHub\nGo to settings ‚û°Ô∏è Developer settings ‚û°Ô∏è Personal access tokens ‚û°Ô∏è Tokens (classic)\nGenerate a new classic token\n\nFill in:\n\ntoken name: Datalab GENES\nexpiration date ‚û°Ô∏è Custom ‚û°Ô∏è 1 year\n\n‚úÖ Check the repo box\nClick on Generate token\nCopy the token starting with ghp_ and keep it safe for a few minutes\n\n\n\n\n\n\n\n\nWarning\n\n\n\n\nThis token will only be visible once\nIf you lose it or if it expires, you must generate a new one\n\n\n\n\n\nDeclare Your Token\nGitHub has provided you with a token. Now, you need to declare it on the Datalab:\n\nGo to My Account ‚û°Ô∏è Git tab\nFill in the following information:\n\nGit username\nemail (the one used for your GitHub account)\n\nPaste your token\n\n\n\n\n\n\n\nGit Config\n\n\n\nYou can now exchange code between the Datalab services and your GitHub repositories. üéâ\n\n\n\n\n\n1.2 Launch Vscode Java\nA service is available with Visual Studio Code and Java.\n\nLaunch the service VScode-Java\n\n\n\n\n\n\n\nImportant\n\n\n\nYou won‚Äôt find this service in the basic catalog. You have to use the link above to launch it.\nIt uses a specific Docker image\n\n\n\nBack to GitHub, fork this repository: https://github.com/ludo2ne/ENSAI-2A-Java-TP/fork\nOn the main page of your fork, click on Code\nCopy https url to clipboard\nBack to VSCode in the Datalab, Clone the forked repository using this https url\nIn the menu (3 parallel bars top left) ‚û°Ô∏è File ‚û°Ô∏è Open Folder\n\nenter : /home/onyxia/work/ENSAI-2A-Java-TP/ ‚û°Ô∏è OK\n\n\n\n\n\n\n\n\nShorcuts\n\n\n\n\nSHIFT + ALT + A: Comment / Uncomment selected lines"
  },
  {
    "objectID": "doc/tp/tp1.html#exercices",
    "href": "doc/tp/tp1.html#exercices",
    "title": "Introduction to Java syntax",
    "section": "2 Exercices",
    "text": "2 Exercices\n\nOpen a terminal\n\nTerminal &gt; New Terminal (or CTRL + √π)\n\nGo to the folder ENSAI-2A-Java-TP/tp1/src\n\nif you need help, check out Unix basic commands\n\n\n\nCompile\n\na single Java file: javac MyClass.java\nall Java files: javac *.java\nspecify output directory for .class files (recommended): javac -d bin MyClass.java\n\n\n\nRun\n\n\n\n\n\n\nImportant\n\n\n\nTo run a class, it must have a main() method.\n\n\n\njava MyClass\nwhen .class files are in the bin/ directory: java -cp bin MyClass\n\n\n\n\n\n\n\nStatic Methods\n\n\n\nAs mentioned at the beginning, the aim of this tutorial is not OOP, but simply basic Java syntax.\nSo all the methods defined here are static ‚û°Ô∏è They are class methods ‚û°Ô∏è They can be called without instantiating an object.\n\n\n\n\n2.1 Brute force\nYou will write a Java method that attempts to brute-force a hashed 6-digit numeric password.\n\nThe method will iterate through all numbers from 000000 to 999999\nFor each number, Generate and compare hash with the given target hash\nIf a match is found, return the original number else return null\n\n\n\nOpen File Password.java\nComplete method bruteForce6Digit()\n\n\n\n\n\n\n\nTip\n\n\n\n\nUse method hashPassword()\nString.format(\"%06d\", 123)‚û°Ô∏è ‚Äú000123‚Äù\n\n\n\n\n\n2.2 Strong password\n\nCommit and Push the code of the last exercise\nComplete method isStrongPassword()\n\nYou will write a Java method to check if a password is strong. A password is strong if:\n\n‚úÖ It has at least 12 characters\n‚úÖ It contains at least one uppercase letter\n‚úÖ It contains at least one lowercase letter\n‚úÖ It contains at least one digit\n‚ùå It does not contain whitespace\n\n\n\n\n\n\n\nTip\n\n\n\nUsefull methods:\n\nCharacter.isUpperCase(&lt;char&gt;)\nCharacter.isDigit(&lt;char&gt;)\nCharacter.isWhitespace(&lt;char&gt;)\n\n\n\n\n\n2.3 Check password list\n\nCommit and Push the code of the last exercise\nComplete method checkPasswordsList()\n\nYou will write a method that takes a list of passwords (ArrayList) and checks their strength.\nThe method should return a HashMap where:\n\nThe keys are the passwords\nThe values are true if the password is strong, false otherwise\n\n\n\n2.4 Generate a Random Password\nObjective: Implement a method to generate a secure random password that includes at least:\n\n‚úÖ 1 uppercase letter\n\n‚úÖ 1 lowercase letter\n\n‚úÖ 1 digit\n\n‚úÖ 1 special character\n\n\nEnsure length is at least 4\nCreate a list of characters\nAdd at least one character from each group\n\nFill the remaining characters randomly from all groups\nShuffle the password to mix character types Collections.shuffle(&lt;myList&gt;)\nConvert the list into a String and return it\n\n\nComplete method generatePassword()\n\n\n\n\n\n\n\nGenerate random int between 0 and 20\n\n\n\nSecureRandom random = new SecureRandom();\nSystem.out.println(random.nextInt(21));\n\n\n\n\n2.5 Login System\nComplete file Login.java:\n\nLoads csv file data/user_hashpwd.csv containing usernames and hashed passwords\nAsk for a username\nIf username exists, ask for password\nIf login succeeds, print Login successful! and exit, else ask again username\n\nBonus:\n\nAfter entering username, give 3 chances to input the correct password\nIf all 3 attempts fail, restart username input\n\n\n\n\n\n\n\nUse a Scanner\n\n\n\nScanner scanner = new Scanner(System.in);\n\nSystem.out.print(\"Enter username: \");\nString username = scanner.nextLine();\n\nscanner.close();"
  },
  {
    "objectID": "doc/cours/project.html",
    "href": "doc/cours/project.html",
    "title": "Java Project",
    "section": "",
    "text": "Maintainability: Easier to find and modify code\nReadability: Improves understanding for developers\nCollaboration: Essential for team projects\nBuild Process: Tools (Maven/Gradle) rely on it\n\n\n\n\n\nsrc: The root directory for source code.\nmain: Contains the application‚Äôs core code.\ntest: Contains code for testing the application.\nresources: Non-Code Files (config files, images, text files‚Ä¶)\ntarget: Output directory for compiled code\n\n\nlibrary-project/\n‚îú‚îÄ‚îÄ pom.xml\n‚îî‚îÄ‚îÄ src/\n|   ‚îú‚îÄ‚îÄ main/\n|   ‚îÇ   ‚îú‚îÄ‚îÄ java/\n|   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ fr/\n|   ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ ensai/\n|   ‚îÇ   ‚îÇ           ‚îî‚îÄ‚îÄ library/\n|   ‚îÇ   ‚îÇ               ‚îú‚îÄ‚îÄ Book.java\n|   ‚îÇ   ‚îÇ               ‚îî‚îÄ‚îÄ Author.java\n|   ‚îÇ   ‚îî‚îÄ‚îÄ resources/\n|   ‚îÇ       ‚îî‚îÄ‚îÄ books.csv\n|   ‚îî‚îÄ‚îÄ test/\n|       ‚îî‚îÄ‚îÄ java/\n|           ‚îî‚îÄ‚îÄ fr/\n|               ‚îî‚îÄ‚îÄ ensai/\n|                   ‚îî‚îÄ‚îÄ library/\n|                       ‚îî‚îÄ‚îÄ BookTest.java\n‚îî‚îÄ‚îÄ target/\n\nbottom level library divided :\n\nservice\ndao\nbusiness_object\n\ntest : Mirrors the main structure"
  },
  {
    "objectID": "doc/cours/project.html#tree-structure",
    "href": "doc/cours/project.html#tree-structure",
    "title": "Java Project",
    "section": "",
    "text": "Maintainability: Easier to find and modify code\nReadability: Improves understanding for developers\nCollaboration: Essential for team projects\nBuild Process: Tools (Maven/Gradle) rely on it\n\n\n\n\n\nsrc: The root directory for source code.\nmain: Contains the application‚Äôs core code.\ntest: Contains code for testing the application.\nresources: Non-Code Files (config files, images, text files‚Ä¶)\ntarget: Output directory for compiled code\n\n\nlibrary-project/\n‚îú‚îÄ‚îÄ pom.xml\n‚îî‚îÄ‚îÄ src/\n|   ‚îú‚îÄ‚îÄ main/\n|   ‚îÇ   ‚îú‚îÄ‚îÄ java/\n|   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ fr/\n|   ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ ensai/\n|   ‚îÇ   ‚îÇ           ‚îî‚îÄ‚îÄ library/\n|   ‚îÇ   ‚îÇ               ‚îú‚îÄ‚îÄ Book.java\n|   ‚îÇ   ‚îÇ               ‚îî‚îÄ‚îÄ Author.java\n|   ‚îÇ   ‚îî‚îÄ‚îÄ resources/\n|   ‚îÇ       ‚îî‚îÄ‚îÄ books.csv\n|   ‚îî‚îÄ‚îÄ test/\n|       ‚îî‚îÄ‚îÄ java/\n|           ‚îî‚îÄ‚îÄ fr/\n|               ‚îî‚îÄ‚îÄ ensai/\n|                   ‚îî‚îÄ‚îÄ library/\n|                       ‚îî‚îÄ‚îÄ BookTest.java\n‚îî‚îÄ‚îÄ target/\n\nbottom level library divided :\n\nservice\ndao\nbusiness_object\n\ntest : Mirrors the main structure"
  },
  {
    "objectID": "doc/cours/project.html#packages",
    "href": "doc/cours/project.html#packages",
    "title": "Java Project",
    "section": "Packages",
    "text": "Packages\n\nA way to organize Java classes and interfaces into namespaces\nUsed to group related classes together\nHelp to prevent naming conflicts\n\n\n\nSimilar to folders or directories in a file system\n\n\n\nPackage Naming Conventions\n\nNamed in lowercase\nReverse domain name notation\nExamples:\n\nfr.ensai.library\ncom.myorg.myapp.service\n\n\n\nservice, dao‚Ä¶\n\n\n\nExample\npackage fr.ensai.library;\n\npublic class Book{\n    ...\n}\n\n\nImporting Packages\n\nTo use classes from other packages\nimport fr.ensai.library.dao;\n\n\n\nNo need to import classes from the same package\nAvoid import fr.ensai.library.*"
  },
  {
    "objectID": "doc/cours/project.html#maven",
    "href": "doc/cours/project.html#maven",
    "title": "Java Project",
    "section": "Maven",
    "text": "Maven\n\nWhat is Maven?\n\nA powerful build automation tool for Java projects\nHelps manage dependencies\n\nDownload from Maven Central repo\n\nProvides a standardized build lifecycle\n\n\n\ndependencies: external libraries your project needs\nlifecycle: compile, test, package\n\nessential just to manage dependencies\nAlternative: Gradle\n\n\n\nWhy Use Maven?\n\nSimplifies dependency management: No more manual downloads\nEnsures consistent builds: Everyone uses the same process\nPromotes best practices: Encourages a well-defined project structure\n\n\n\nwithoud maven : java -cp &lt;all_dependencies&gt; Main\n\n\n\n\nPOM\n\nProject Object Model\na configuration file: pom.xml\ndescribes your project and its dependencies\n\n\n\npom.xml\n\n\npom.xml\n\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;fr.ensai&lt;/groupId&gt;\n    &lt;artifactId&gt;library&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n\n    &lt;properties&gt;\n        &lt;maven.compiler.source&gt;21&lt;/maven.compiler.source&gt;\n        &lt;maven.compiler.target&gt;21&lt;/maven.compiler.target&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;!-- JUnit for testing --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n            &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt;\n            &lt;version&gt;5.9.1&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n            &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt;\n            &lt;version&gt;5.9.1&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n                &lt;version&gt;3.8.1&lt;/version&gt;\n                &lt;configuration&gt;\n                    &lt;source&gt;21&lt;/source&gt;\n                    &lt;target&gt;21&lt;/target&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n&lt;/project&gt;\n\n\n\nArtifacts\n\nPackaged component with unique ID: groupId, artifactId, version.\nVersioning: Essential to identify artifacts\n\nMajor.Minor.Bugfix\nDevelopment: -SNAPSHOT versions\n\n\n\n\nmaven.compiler.source: Java source version compatibility for the compiler\nmaven.compiler.target: Determines the Java Runtime Environment (JRE) versions on which the compiled code can run\n\n\n\n\nDependencies\n\nExternal libraries your project relies on\nMaven downloads and manages these dependencies automatically\nExample: JUnit, database connectors, logging frameworks\n\n\n\nPlugins\n\nExtend Maven‚Äôs functionality\nExamples:\n\nmaven-compiler-plugin,\nmaven-surefire-plugin (for testing)\n\nHelp with tasks like compiling code, running tests, creating JAR files\n\n\n\nLifecycles\n\nmvn clean: Deletes the target directory\nmvn compile: Compiles your Java code\nmvn test: Runs your unit tests\nmvn package: Creates a JAR file of your project\nmvn exec:java: Run your program\nmvn site: Creates a website for your project"
  },
  {
    "objectID": "doc/cours/project.html#deployment",
    "href": "doc/cours/project.html#deployment",
    "title": "Java Project",
    "section": "Deployment",
    "text": "Deployment\n\nPackaging for deployment\n\nCreation of a JAR file (for API)\nOr a WAR file (for web applications)\n\nUse a Tomcat server\n\n\n\n\n\n\n\n\nJAR file\n\n\n\n\nA package file format used to aggregate many Java class files and associated resources into a single file\nBased on the ZIP file format\n\n\n\n\n\nWAR: Designed for deployment on a Java web server (e.g., Tomcat, Jetty, WildFly).\nJAR: simply run it java -jar my-api.jar on a server or using Docker\nUse Docker\nBackend (Business logic)\n\nJava Application history\n\nmonolith struts\nback Java / front JS\nArchi 3-tiers\n\n\n\n\nDeployment history\n\nMonolith\nVirtualisation\nContainerization\nOrchestration\n\n\n\nMonolith\n\none physical server: one app\nUnderutilized server resources\n\nVirtualisation\n\nApplication isolation\nIssue: compatibility\n\nContainerization\n\nPortability\n\nOrchestration\n\nAutomated container management\n\n\nBefore: Filezilla, integrator, it work on my machine\nNow: CICD, git, devops"
  },
  {
    "objectID": "doc/cours/project-slides.html#tree-structure",
    "href": "doc/cours/project-slides.html#tree-structure",
    "title": "Java Project",
    "section": "Tree structure",
    "text": "Tree structure"
  },
  {
    "objectID": "doc/cours/project-slides.html#packages",
    "href": "doc/cours/project-slides.html#packages",
    "title": "Java Project",
    "section": "Packages",
    "text": "Packages\n\nA way to organize Java classes and interfaces into namespaces\nUsed to group related classes together\nHelp to prevent naming conflicts\n\n\n\nSimilar to folders or directories in a file system"
  },
  {
    "objectID": "doc/cours/project-slides.html#maven",
    "href": "doc/cours/project-slides.html#maven",
    "title": "Java Project",
    "section": "Maven",
    "text": "Maven"
  },
  {
    "objectID": "doc/cours/project-slides.html#deployment",
    "href": "doc/cours/project-slides.html#deployment",
    "title": "Java Project",
    "section": "Deployment",
    "text": "Deployment"
  },
  {
    "objectID": "doc/cours/intro.html",
    "href": "doc/cours/intro.html",
    "title": "Introduction",
    "section": "",
    "text": "6h CM\n12h TP\nludovic.deneuville@ensai.fr\noffice 181\nclass based on those by Ikko Yamane, Benjamin Girault, Romaric Gaudel, Samuel Toubon and Olivier Levitt"
  },
  {
    "objectID": "doc/cours/intro.html#introduction-to-java",
    "href": "doc/cours/intro.html#introduction-to-java",
    "title": "Introduction",
    "section": "",
    "text": "6h CM\n12h TP\nludovic.deneuville@ensai.fr\noffice 181\nclass based on those by Ikko Yamane, Benjamin Girault, Romaric Gaudel, Samuel Toubon and Olivier Levitt"
  },
  {
    "objectID": "doc/cours/intro.html#objectives",
    "href": "doc/cours/intro.html#objectives",
    "title": "Introduction",
    "section": "Objectives",
    "text": "Objectives\n\nLearn the basic syntax of Java\nUnderstand key OOP concepts\nLearn how to use collections\nBest practices"
  },
  {
    "objectID": "doc/cours/intro.html#tp",
    "href": "doc/cours/intro.html#tp",
    "title": "Introduction",
    "section": "TP",
    "text": "TP\n\n4 x 3h\nDatalab SSPCloud\nFollow instructions precisely\nDon‚Äôt use LLM"
  },
  {
    "objectID": "doc/cours/intro.html#evaluation",
    "href": "doc/cours/intro.html#evaluation",
    "title": "Introduction",
    "section": "Evaluation",
    "text": "Evaluation\n\nGraded TP\n\n2 students max per group\nto be completed at home\n\nTable-top exam\n\nduration: 1h30\na handwritten A4 sheet allowed"
  },
  {
    "objectID": "doc/cours/intro.html#why-java",
    "href": "doc/cours/intro.html#why-java",
    "title": "Introduction",
    "section": "Why Java",
    "text": "Why Java\n\nHistory / Version\n\nCreated in 1991\n\nby James Gosling and Mike Sheridan (Sun Microsystems)\n\nJava 8 (2014) : Lambda, Stream, Optional\nJava 17 (2021)\nJava 21 (2023)\n\nhttps://www.java.com/\n\n\nFacebook story\nLTS\n2009 Oracle\n2017 Java 9 -&gt; Modules\n2018 Java 11\nJava 17 : Sealed Classes, Refactor JDK\n\n\n\n\nPopular / Mature\n\nWidely used in all sectors\nBack-end, Mobile, Big Data\nHeavily object-oriented\n\n\n\nEnterprise Applications\nBackend Development (Spring Boot)\nMobile Development (via Kotlin & Android SDK)\nBig Data & Machine Learning\n\n\n\n\nPortability\n\nCompiled to bytecode\nRuns on any machine with a JVM\n‚ÄúWrite Once, Run Anywhere‚Äù\n\n\nWORA: desktop, servers, smartphones\n\n\n\nRobust / Secure\n\nAutomatic memory management\nStrong Static Typing\nCompile-Time Checks"
  },
  {
    "objectID": "doc/cours/intro.html#compiler",
    "href": "doc/cours/intro.html#compiler",
    "title": "Introduction",
    "section": "Compiler",
    "text": "Compiler\n\nTransform java code into bytecode\nDetects syntax and type errors\nOptimization\njavac MyClass.java ‚û°Ô∏è create file MyClass.class"
  },
  {
    "objectID": "doc/cours/intro.html#jvm",
    "href": "doc/cours/intro.html#jvm",
    "title": "Introduction",
    "section": "JVM",
    "text": "JVM\n\n\n\n\n\n\nDefinition\n\n\n\nThe Java Virtual Machine (JVM) is the runtime environment for Java programs. It acts as an interpreter between Java code and the operating system.\nThe JVM :\n\nExecutes bytecode\nInteracts with OS\nManages Memory (Garbage Collection)\n\n\n\n\njava MyClass ‚û°Ô∏è run main method\n\n\nJVM, JDK, JRE\n\nJRE: Java Runtime Environment\nJDK: Java Development Kit\n\n\n\n\nComponent\nPurpose\n\n\n\n\nJVM\nRuns Java bytecode\n\n\nJRE\nContains JVM + libraries to run Java apps\n\n\nJDK\nIncludes JRE + compiler + dev tools\n\n\n\nhttps://openjdk.org/projects/jdk/\n\n\nJRE: java.util, java.io‚Ä¶, $java\n\nto execute java app\n\nJDK: $javac, new libraries\n\nto dev java app"
  },
  {
    "objectID": "doc/cours/intro.html#java-vs-python",
    "href": "doc/cours/intro.html#java-vs-python",
    "title": "Introduction",
    "section": "Java Vs Python",
    "text": "Java Vs Python\n\n\n\n\n\n\n\n\n\nJava\nPython\n\n\n\n\nTyping\nStrongly typed, static\nStrongly typed, dynamic\n\n\nCompilation\nCompiled into bytecode\nInterpreted\n\n\nPerformance\nVery fast\nSlower\n\n\nSyntax\nVerbose, requires {}\nConcise, uses indentation\n\n\nParadigm\nObject-oriented\nMulti-paradigm\n\n\nEcosystem\nHuge (Spring, Hibernate‚Ä¶)\nLarge (Django, Flask, Pandas‚Ä¶)\n\n\n\n\n\nTyping: int x = 10; vs x = 10\nInterpreted: ex√©cution √† la vol√©e\nMulti-paradigm (objet, fonctionnel, imp√©ratif)"
  },
  {
    "objectID": "doc/cours/intro.html#resources",
    "href": "doc/cours/intro.html#resources",
    "title": "Introduction",
    "section": "Resources",
    "text": "Resources\n\nhttps://www.baeldung.com/get-started-with-java-series\nhttps://www.w3schools.com/java/\nhttps://www.jmdoudoux.fr/accueil_java.htm\n\n\nPractice java language\n\nhttps://codingbat.com/java\nhttps://adventofcode.com/"
  },
  {
    "objectID": "doc/cours/intro-slides.html#introduction-to-java",
    "href": "doc/cours/intro-slides.html#introduction-to-java",
    "title": "Introduction",
    "section": "Introduction to Java",
    "text": "Introduction to Java\n\n6h CM\n12h TP\nludovic.deneuville@ensai.fr\noffice 181\nclass based on those by Ikko Yamane, Benjamin Girault, Romaric Gaudel, Samuel Toubon and Olivier Levitt"
  },
  {
    "objectID": "doc/cours/intro-slides.html#objectives",
    "href": "doc/cours/intro-slides.html#objectives",
    "title": "Introduction",
    "section": "Objectives",
    "text": "Objectives\n\nLearn the basic syntax of Java\nUnderstand key OOP concepts\nLearn how to use collections\nBest practices"
  },
  {
    "objectID": "doc/cours/intro-slides.html#tp",
    "href": "doc/cours/intro-slides.html#tp",
    "title": "Introduction",
    "section": "TP",
    "text": "TP\n\n4 x 3h\nDatalab SSPCloud\nFollow instructions precisely\nDon‚Äôt use LLM"
  },
  {
    "objectID": "doc/cours/intro-slides.html#evaluation",
    "href": "doc/cours/intro-slides.html#evaluation",
    "title": "Introduction",
    "section": "Evaluation",
    "text": "Evaluation\n\nGraded TP\n\n2 students max per group\nto be completed at home\n\nTable-top exam\n\nduration: 1h30\na handwritten A4 sheet allowed"
  },
  {
    "objectID": "doc/cours/intro-slides.html#why-java",
    "href": "doc/cours/intro-slides.html#why-java",
    "title": "Introduction",
    "section": "Why Java",
    "text": "Why Java"
  },
  {
    "objectID": "doc/cours/intro-slides.html#compiler",
    "href": "doc/cours/intro-slides.html#compiler",
    "title": "Introduction",
    "section": "Compiler",
    "text": "Compiler\n\nTransform java code into bytecode\nDetects syntax and type errors\nOptimization\njavac MyClass.java ‚û°Ô∏è create file MyClass.class"
  },
  {
    "objectID": "doc/cours/intro-slides.html#jvm",
    "href": "doc/cours/intro-slides.html#jvm",
    "title": "Introduction",
    "section": "JVM",
    "text": "JVM\n\n\n\n\n\n\n\nDefinition\n\n\nThe Java Virtual Machine (JVM) is the runtime environment for Java programs. It acts as an interpreter between Java code and the operating system.\nThe JVM :\n\nExecutes bytecode\nInteracts with OS\nManages Memory (Garbage Collection)\n\n\n\n\n\n\njava MyClass ‚û°Ô∏è run main method"
  },
  {
    "objectID": "doc/cours/intro-slides.html#java-vs-python",
    "href": "doc/cours/intro-slides.html#java-vs-python",
    "title": "Introduction",
    "section": "Java Vs Python",
    "text": "Java Vs Python\n\n\n\n\n\n\n\n\n\nJava\nPython\n\n\n\n\nTyping\nStrongly typed, static\nStrongly typed, dynamic\n\n\nCompilation\nCompiled into bytecode\nInterpreted\n\n\nPerformance\nVery fast\nSlower\n\n\nSyntax\nVerbose, requires {}\nConcise, uses indentation\n\n\nParadigm\nObject-oriented\nMulti-paradigm\n\n\nEcosystem\nHuge (Spring, Hibernate‚Ä¶)\nLarge (Django, Flask, Pandas‚Ä¶)\n\n\n\n\n\nTyping: int x = 10; vs x = 10\nInterpreted: ex√©cution √† la vol√©e\nMulti-paradigm (objet, fonctionnel, imp√©ratif)"
  },
  {
    "objectID": "doc/cours/intro-slides.html#resources",
    "href": "doc/cours/intro-slides.html#resources",
    "title": "Introduction",
    "section": "Resources",
    "text": "Resources\n\nhttps://www.baeldung.com/get-started-with-java-series\nhttps://www.w3schools.com/java/\nhttps://www.jmdoudoux.fr/accueil_java.htm"
  },
  {
    "objectID": "doc/cours/code.html",
    "href": "doc/cours/code.html",
    "title": "Java Basics",
    "section": "",
    "text": "Important\n\n\n\nIn Java, all executable code must be inside a class."
  },
  {
    "objectID": "doc/cours/code.html#first-of-all",
    "href": "doc/cours/code.html#first-of-all",
    "title": "Java Basics",
    "section": "",
    "text": "Important\n\n\n\nIn Java, all executable code must be inside a class."
  },
  {
    "objectID": "doc/cours/code.html#hello-world",
    "href": "doc/cours/code.html#hello-world",
    "title": "Java Basics",
    "section": "Hello World",
    "text": "Hello World\n\n\nHelloWord.java\n\nclass HelloWorld {\n    public static void main(String[] args) { \n        String message = \"Hello World!\";\n        System.out.println(message);\n    }\n}\n\n\ncompile: javac HelloWord.java\n\ncreate file HelloWord.class\n\nrun: java HelloWord\nexit: CTRL + C\n\n\n\nyou only write .java files\nmain method"
  },
  {
    "objectID": "doc/cours/code.html#syntax",
    "href": "doc/cours/code.html#syntax",
    "title": "Java Basics",
    "section": "Syntax",
    "text": "Syntax\n\nA Line of code ends with a semicolon ;\nBlocs are delimited with curly braces: { }\nComments\n\n// one line\n/* multi-lines */\n\n\n\nNaming Conventions\n\nClasses: PascalCase\nVariables, Methods: camelCase\nConstants: UPPERCASE_WITH_UNDERSCORES\nPackages: lowercase, dot-separated\n\npackage com.example.utils;"
  },
  {
    "objectID": "doc/cours/code.html#variables-and-data-types",
    "href": "doc/cours/code.html#variables-and-data-types",
    "title": "Java Basics",
    "section": "Variables and Data Types",
    "text": "Variables and Data Types\nint age = 25;\nfinal double PI = 3.14;        // final : Immutable\n\nboolean isJavaFun = true;\n\nchar grade = 'A';             // single quote\nString name = \"L√©a\";          // double quote\n\nvar i = 2F;                   // type inference -&gt; float\n\n\nstrong typing, immuable type\nprimitive, object\nString\n\nnot a primitive data type\nString is a Class\nimmutable: Any modification creates a new string in memory\n\n\n\n\nBoolean\nboolean isJavaFun = true;\nboolean hasBrother = false;\n\nboolean isFast = 20 &gt; 15;\n\nisJavaFun && !false || true;\n\n\nlowercase booleans\nNo need for == true\n\n\n\n\nString\nString myString = \"Java\";\nString fullName = \"Alain\" + \" \" + \"Philippe\";   // concat\n\nmyString.length();\nmyString.charAt(0);          // Get character at index 0\nmyString.contains(\"va\");\nmyString.toLowerCase();      // also toUpperCase\nmyString.endsWith(\"Java\");   // also startsWith\n\nmyString.equals(\"Java\");     // Use equals to compare, not ==\nOthers: replace(), split()\n\n\nType casting\ndouble num1 = 9.78;\nint num2 = (int) num1;                   // Casting Narrowing\n\nString str1 = \"123\";\nint num1 = Integer.parseInt(str1);       // String to int\n\nString str2 = String.valueOf(num1);      // int to String\nString str3 = num1 + \"\"\ntoString() for Object types"
  },
  {
    "objectID": "doc/cours/code.html#print",
    "href": "doc/cours/code.html#print",
    "title": "Java Basics",
    "section": "Print",
    "text": "Print\n\nSystem.out.print(\"Hello\");\nSystem.out.println(\"Hello\");\n\nadds a new line\n\nSystem.out ‚û°Ô∏è Standard output stream\n\n\n\n\\n: carriage return"
  },
  {
    "objectID": "doc/cours/code.html#structures",
    "href": "doc/cours/code.html#structures",
    "title": "Java Basics",
    "section": "Structures",
    "text": "Structures\n\nif-else\nint number = 10;\n\nif (number &gt; 0) {\n    System.out.println(\"Positive number\");\n} else if (number &lt; 0) {\n    System.out.println(\"Negative number\");\n} else {\n    System.out.println(\"Zero\");\n}\n\n\nTernary Operator\n\nShorter alternative to if-else\n\nString status = (number &gt; 0) ? \"Positive\" : \"Negative\";\n\n\nSwitch\nString fruit = \"lemon\";\n\nswitch (fruit) {\n    case \"cherry\", \"strawberry\" -&gt; System.out.println(\"Red fruit\");\n    case \"banana\", \"lemon\" -&gt; System.out.println(\"Yellow fruit\");\n    default -&gt; System.out.println(\"Unknown fruit\");\n}\n\n\nswitch can return a value\n\nString color = switch (fruit) {\n    case \"cherry\", \"strawberry\" -&gt; \"Red fruit\";\n    case \"banana\", \"lemon\" -&gt; \"Yellow fruit\";\n    default -&gt; \"Unknown fruit\";\n};\n\n\n\nFor\nfor (int i = 0; i &lt; 5; i++) {\n    System.out.println(\"Iteration: \" + i);\n}\n\ninitialization: i = 0\ncondition: i &lt; 5\nupdate: i++\n\n\n\ncondition: checked before entering\nupdate: after each iteration\n\n\n\ncasimir.java\n\nint i = 0;\nfor ( ; ; ) {\n    if ( i &lt; 5)\n        break;\n    System.out.println(\"Iteration: \" + i);\n    i++;\n}\n\n\n\n\nFor each\n\nIterating through arrays, lists\n\nint[] numbers = {1, 2, 3, 4};\n\nfor (int num: numbers) {\n    System.out.println(num);\n}\n\nfirst and last time I‚Äôm going to talk about arrays\n\n\n\nWhile\nint i = 10;\nwhile (i &gt;= 0) {\n    System.out.println(i);\n    i--;\n}\n\ndo-while to check after each iteration\ndo { ...\n} while { ... }\n\n\n\nbreak / continue\nfor (int i = 0; i &lt; 10; i++) {\n    if (i == 2)\n        continue;\n    else if (i == 4)\n        break;\n    System.out.println(\"Iteration: \" + i);\n}\n\n\nIteration: 0\nIteration: 1\nIteration: 3\n\n\nbreak: exit a single loop"
  },
  {
    "objectID": "doc/cours/code.html#function",
    "href": "doc/cours/code.html#function",
    "title": "Java Basics",
    "section": "Function",
    "text": "Function\npublic int add(int a, int b) {\n    return a + b;\n}\n\nAccess modifier: public\nReturn type: int\nMethod name: add\nParameters: (int a, int b)\n\n\n\nreminder: we are still in a class\nMethod name : camelCase\n\n\n\nVoid\n\nIndicate that a method does not return any value\n\npublic void printIsOdd(int n) {\n    System.out.println(n % 2 != 0);\n}\n\n\nAccess Modifiers\nMethods and Attributes Accessiblility\n\n\n\n\n\n\n\n\n\n\nModifier\nSame Class\nSame Package\nSubclasses\nEverywhere\n\n\n\n\npublic\n‚úÖ\n‚úÖ\n‚úÖ\n‚úÖ\n\n\nprotected\n‚úÖ\n‚úÖ\n‚úÖ\n‚ùå\n\n\ndefault (no modifier)\n‚úÖ\n‚úÖ\n‚ùå\n‚ùå\n\n\nprivate\n‚úÖ\n‚ùå\n‚ùå\n‚ùå"
  },
  {
    "objectID": "doc/cours/code.html#various",
    "href": "doc/cours/code.html#various",
    "title": "Java Basics",
    "section": "Various",
    "text": "Various\nint i = 0;\n\ni++;                // increment by 1\ni += 3;             // i = i + 3 \n\nMath.sqrt(3);\nMath.max(8, 5);\nMath.pow(2, 10);   // 1024\n\n\n++i\n+= works with Strings\n`%: modulo"
  },
  {
    "objectID": "doc/cours/code-slides.html#first-of-all",
    "href": "doc/cours/code-slides.html#first-of-all",
    "title": "Java Basics",
    "section": "First of all",
    "text": "First of all\n\n\n\n\n\n\nImportant\n\n\nIn Java, all executable code must be inside a class."
  },
  {
    "objectID": "doc/cours/code-slides.html#hello-world",
    "href": "doc/cours/code-slides.html#hello-world",
    "title": "Java Basics",
    "section": "Hello World",
    "text": "Hello World\n\n\nHelloWord.java\n\nclass HelloWorld {\n    public static void main(String[] args) { \n        String message = \"Hello World!\";\n        System.out.println(message);\n    }\n}\n\n\ncompile: javac HelloWord.java\n\ncreate file HelloWord.class\n\nrun: java HelloWord\nexit: CTRL + C\n\n\n\nyou only write .java files\nmain method"
  },
  {
    "objectID": "doc/cours/code-slides.html#syntax",
    "href": "doc/cours/code-slides.html#syntax",
    "title": "Java Basics",
    "section": "Syntax",
    "text": "Syntax\n\nA Line of code ends with a semicolon ;\nBlocs are delimited with curly braces: { }\nComments\n\n// one line\n/* multi-lines */"
  },
  {
    "objectID": "doc/cours/code-slides.html#variables-and-data-types",
    "href": "doc/cours/code-slides.html#variables-and-data-types",
    "title": "Java Basics",
    "section": "Variables and Data Types",
    "text": "Variables and Data Types\nint age = 25;\nfinal double PI = 3.14;        // final : Immutable\n\nboolean isJavaFun = true;\n\nchar grade = 'A';             // single quote\nString name = \"L√©a\";          // double quote\n\nvar i = 2F;                   // type inference -&gt; float\n\n\nstrong typing, immuable type\nprimitive, object\nString\n\nnot a primitive data type\nString is a Class\nimmutable: Any modification creates a new string in memory"
  },
  {
    "objectID": "doc/cours/code-slides.html#print",
    "href": "doc/cours/code-slides.html#print",
    "title": "Java Basics",
    "section": "Print",
    "text": "Print\n\nSystem.out.print(\"Hello\");\nSystem.out.println(\"Hello\");\n\nadds a new line\n\nSystem.out ‚û°Ô∏è Standard output stream\n\n\n\n\\n: carriage return"
  },
  {
    "objectID": "doc/cours/code-slides.html#structures",
    "href": "doc/cours/code-slides.html#structures",
    "title": "Java Basics",
    "section": "Structures",
    "text": "Structures"
  },
  {
    "objectID": "doc/cours/code-slides.html#function",
    "href": "doc/cours/code-slides.html#function",
    "title": "Java Basics",
    "section": "Function",
    "text": "Function\npublic int add(int a, int b) {\n    return a + b;\n}\n\nAccess modifier: public\nReturn type: int\nMethod name: add\nParameters: (int a, int b)\n\n\n\nreminder: we are still in a class\nMethod name : camelCase"
  },
  {
    "objectID": "doc/cours/code-slides.html#various",
    "href": "doc/cours/code-slides.html#various",
    "title": "Java Basics",
    "section": "Various",
    "text": "Various\nint i = 0;\n\ni++;                // increment by 1\ni += 3;             // i = i + 3 \n\nMath.sqrt(3);\nMath.max(8, 5);\nMath.pow(2, 10);   // 1024\n\n\n++i\n+= works with Strings\n`%: modulo"
  },
  {
    "objectID": "doc/cours/advanced.html",
    "href": "doc/cours/advanced.html",
    "title": "Advanced Java",
    "section": "",
    "text": "Advices for Rated TP:\n\nJavadoc\nComment if necessary\nPascalCase (Class, Method, Variables)\nUse clear, meaningful names for variables and methods\nwell-indented code, easy to read"
  },
  {
    "objectID": "doc/cours/advanced.html#reminder",
    "href": "doc/cours/advanced.html#reminder",
    "title": "Advanced Java",
    "section": "",
    "text": "Advices for Rated TP:\n\nJavadoc\nComment if necessary\nPascalCase (Class, Method, Variables)\nUse clear, meaningful names for variables and methods\nwell-indented code, easy to read"
  },
  {
    "objectID": "doc/cours/advanced.html#exception",
    "href": "doc/cours/advanced.html#exception",
    "title": "Advanced Java",
    "section": "Exception",
    "text": "Exception\n\nWhat are Exceptions?\n\nEvents that disrupt the normal flow of program execution\nIndicate errors or unexpected conditions that occur during runtime\n\n\n\n\n\n\n\nTip\n\n\n\nExceptions are your friends.\n\n\n\n\nReminder\nExceptions are your friend\nError (OutOfMemoryError, StackOverflowError)\n\n\n\n\nNullPointerException\npublic class NullPointerExceptionExample {\n\n    public static void printLength(String text){\n        System.out.println(text.length());\n    }\n\n    public static void main(String[] args) {\n        String myText = null;\n        printLength(myText); // will throw a NullPointerException.\n    }\n}\n\n\n\n\n\n\nHow to Prevent\n\n\n\nAlways check if an object reference is null before using it.\n\n\n\n\nArithmeticException\npublic class ArithmeticExceptionExample {\n    public static void main(String[] args) {\n        int numerator = 10;\n        int denominator = 0;\n        int result = numerator / denominator; // Will throw ArithmeticException\n        System.out.println(\"The division result is: \" + result);\n    }\n}\n\n\nWhy Should We Raise Exceptions?\n\nTo controll error management\nTo preventing unexpected program crashes\nTo alter the normal execution flow when an error occurs\nTo prevent the system from entering an unstable or inconsistent state\n\n\nWe are also allowed to raise exceptions.\nTo control the execution.\n\n\n\nExample\n\n\nBankAccount.java\n\npackage fr.ensai.bank.domain;\n\n@AllArgsConstructor\nclass BankAccount {\n    private double balance;\n    private double transferLimit;\n\n    /**\n     * Transfers a specified amount from this account to another account.\n     * The amount cannot exceed the available balance or the transfer limit.\n     *\n     * @param recipient the account to which the amount will be transferred\n     * @param amount the amount to be transferred\n     */\n    public void transfer(BankAccount recipient, double amount) {\n        this.balance -= amount;\n        recipient.balance += amount;\n    }\n}\n\n\nThis code can lead to an incoherent state\n\nrecipient: OtherBankAccount\n@AllArgsConstructor: Lombok\nrecipient.balance += amount;: valid code, no need of a setter inside\nOther solution: return boolean instead of void\n\nFalse if the transfert cannot be done\n\n\n\n\n\nThrow an Exception\n\n\nBankAccount.java\n\n/**\n * Transfers a specified amount from this account to another account.\n *\n * @param recipient the account to which the amount will be transferred\n * @param amount the amount to be transferred\n * @throws IllegalArgumentException if the amount exceeds the available balance or the transfer limit\n */\npublic void transfer(BankAccount recipient, double amount)\n        throws IllegalArgumentException {       \n    if (amount &gt; this.balance)\n        throw new IllegalArgumentException(\n            \"Insufficient balance for the transfer. Attempted: \" + amount + \", Available: \" + this.balance);\n    if (amount &gt; this.transferLimit)\n        throw new IllegalArgumentException(\n            \"Transfer amount exceeds the transfer limit. Attempted: \" + amount + \", Limit: \" + this.transferLimit);\n    this.balance -= amount;\n    recipient.balance += amount;\n}\n\n\n\nIf amount &lt; 0 ?\nthrows: method can throw this exception\nthrow: raise\n\n\n\n\nDefine Custom Exceptions\n\n\nInsufficientBalanceException.java\n\npackage fr.ensai.bank.exception;\n\npublic class InsufficientBalanceException extends Exception {\n    public InsufficientBalanceException(String message) {\n        super(message);\n    }\n}\n\n\n\n\nTransferLimitExceededException.java\n\npackage fr.ensai.bank.exception;\n\npublic class TransferLimitExceededException extends Exception {\n    public TransferLimitExceededException(String message) {\n        super(message);\n    }\n}\n\n\n\nInherit class Exception\n\npublic class Exception extends Throwable\n\nas a class\nyou can specify message\n\n\n\n\nUse Custom Exceptions\n\n\nBankAccount.java\n\nimport fr.ensai.bank.exception.InsufficientBalanceException;\nimport fr.ensai.bank.exception.TransferLimitExceededException;\n\npublic class Bank {\n\n    ...\n\n    public void transfer(BankAccount recipient, double amount)\n            throws InsufficientBalanceException, TransferLimitExceededException {\n        if (amount &gt; this.balance)\n            throw new InsufficientBalanceException(\n                \"Insufficient balance for the transfer. Attempted: \" + amount + \", Available: \" + this.balance);\n        if (amount &gt; this.transferLimit)\n            throw new TransferLimitExceededException(\n                \"Transfer amount exceeds the transfer limit. Attempted: \" + amount + \", Limit: \" + this.transferLimit);\n        this.balance -= amount;\n        recipient.balance += amount;\n    }\n}\n\n\npackage exception\n\n\n\nException Handling\n\n\nBank.java\n\npublic class Bank {\n    public void makeTransfert(BankAccount sender, BankAccount receiver, amount) {\n        try {\n            sender.transfer(receiver, 250.0);\n        } catch (InsufficientBalanceException e) {\n            System.out.println(\"Transfer failed: \" + e.getMessage());\n        } catch (TransferLimitExceededException e) {\n            System.out.println(\"Transfer failed: \" + e.getMessage());\n        } finally {\n            System.out.println(\"Account 1 balance: \" + sender.getBalance());\n            System.out.println(\"Account 2 balance: \" + receiver.getBalance());\n        }\n    }\n}\n\n\n\nYou can have multiple catch blocks to handle different types of exceptions\n\nThe order of catch blocks matters (most specific to most general).\nsimpliest way: catch (Exception e)\n\nFinally: block always executes, regardless of whether an exception occurred or not.\n\nUsed for cleanup code (e.g., closing resources).\nWithout finally, code after catch blocks is only executed if no unhandled exception occurs.\n\n\n\n\n\nEncountering Exceptions\nWhen an exception occurs in your code, you have two primary options:\n\npropagate the exception\nresolve the exception\n\n\n\nTypes of Exception\n\n\n\n\n\n\n\n\n\nException\nDescription\nChecked at Compilation\n\n\n\n\nClassNotFoundException\nTrying to access a class whose definition is not found.\nYes\n\n\nFileNotFoundException\nFile is not accessible or does not open.\nYes\n\n\nIOException\nInput-output operation failed or was interrupted.\nYes\n\n\nNoSuchFieldException\nA class does not contain the specified field.\nYes\n\n\nNoSuchMethodException\nAccessing a method that is not found.\nYes\n\n\nNullPointerException\nReferring to the members of a null object.\nNo\n\n\nNumberFormatException\nA method could not convert a string into a numeric format.\nNo\n\n\nArithmeticException\nAn exceptional condition has occurred in an arithmetic operation.\nNo\n\n\nArrayIndexOutOfBoundsException\nAn array has been accessed with an illegal index.\nNo\n\n\nRuntimeException\nRepresents an exception that occurs during runtime.\nNo\n\n\nIllegalArgumentException\nA method receives an argument that does not fit the given condition.\nNo\n\n\n\n\nsee Types of Exception in Java with Examples\n\n\nRuntimException (not checked at compilation)"
  },
  {
    "objectID": "doc/cours/advanced.html#stream",
    "href": "doc/cours/advanced.html#stream",
    "title": "Advanced Java",
    "section": "Stream",
    "text": "Stream\n\n\nhttps://www.geeksforgeeks.org/java-8-stream-tutorial/\nhttps://www.baeldung.com/java-8-streams\n\n\n\nJava Streams\n\nIntroduced in Java 8\nDeclarative style\nConcise and readable code\nEfficient data processing\nSupport for parallel processing\n\n\n\nHow it works\n\nTakes input from the Collections, Arrays, or I/O channels\nProvide a result as per the pipelined methods\nIntermediate operation is lazily executed and returns a stream\nTerminal operations mark the end of the stream and return the result\n\n\n\nA first example\nLong sumOdds = Stream\n    .iterate(0L, i -&gt; i + 1L)        // Generate an infinite stream of Longs starting from 0, incrementing by 1\n    .limit(10)                       // Limit the stream to the first 10 elements\n    .filter(i -&gt; (i % 2) == 0)       // Filter the stream to keep only even numbers\n    .map(i -&gt; i + 1)                 // Transform each element by adding 1\n    .sorted()                        // Sort the stream\n    .reduce(0L, Long::sum);          // Reduce the stream to a single Long by summing all elements\n\n\nLazy evaluation:\n\n!= eager\nComputation on the elements of the stream is only performed when it‚Äôs necessary\ndon‚Äôt generate all natural number\nlimit 10\n\n\nIntermediate operations are not executed until a terminal operation is invoked.\nThis approach can optimize performance, especially for large datasets, by reducing the number of iterations and computations.\n\n\n\nKey Concepts\n\nSource (List, Array‚Ä¶)\nIntermediate Operations (filter, map‚Ä¶)\nTerminal Operation (reduce, collect, forEach‚Ä¶)\nLazy evaluation\n\n\n\nLazy evaluation: very important concept\n\nLike dplyr\n\n\n\n\n\nCreate a Stream\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\nArrayList&lt;String&gt; arrayList = new ArrayList&lt;&gt;(List.of(\"a\", \"b\", \"c\", \"d\"));\nMap&lt;String, Integer&gt; map = Map.of(\"a\", 1, \"b\", 2, \"c\", 3);\nString text = \"I am your father\";\n\n// Creates a stream from an arrayList\nStream&lt;String&gt; arrayListStream = arrayList.stream();\n\n// Creates a stream from the map's entry set\nStream&lt;Map.Entry&lt;String, Integer&gt;&gt; mapEntryStream = map.entrySet().stream();\n\n// Extract list of words from a text an store it in a List\nList&lt;String&gt; wordsList = Stream.of(text.split(\" \")).collect(Collectors.toList());\n\n\nIntermediate Operations\n\nThey return a new stream.\n\n\n\n\n\n\n\n\nOperation\nDescription\nExample\n\n\n\n\nfilter(predicate)\nSelects matching elements.\nstream.filter(x -&gt; x &gt; 10)\n\n\nmap(function)\nTransforms elements.\nstream.map(String::toUpperCase)\n\n\nflatMap(function)\nTransforms to streams, then flattens.\nstream.flatMap(List::stream)\n\n\ndistinct()\nRemoves duplicates.\nstream.distinct()\n\n\nsorted()\nSorts elements.\nstream.sorted()\n\n\nsorted(comparator)\nSorts elements (using comparator).\nstream.sorted(Comparator.reverseOrder())\n\n\npeek(consumer)\nPerforms action on each element.\nstream.peek(System.out::println)\n\n\nlimit(maxSize)\nTruncates to maxSize elements.\nstream.limit(10)\n\n\nskip(n)\nDiscards first n elements.\nstream.skip(5)\n\n\n\n\n\n\nLambda functions\nmethod reference (String::toUpperCase)\nIntermediate operations return a new modified stream\n\n\n\n\nTerminal Operations\n\n\n\n\n\n\n\n\n\nOperation\nDescription\nExample\n\n\n\n\nforEach(action)\nPerforms an action on each element.\nstream.forEach(System.out::println)\n\n\ncollect(collector)\nAccumulates elements into a result container.\nstream.collect(Collectors.toList())\n\n\nreduce(identity, accumulator)\nReduces elements to a single value.\nstream.reduce(0, Integer::sum)\n\n\ncount()\nReturns the number of elements.\nstream.count()\n\n\nanyMatch(predicate)\nChecks if any element matches.\nstream.anyMatch(x -&gt; x &gt; 10)\n\n\nallMatch(predicate)\nChecks if all elements match.\nstream.allMatch(x -&gt; x &gt; 0)\n\n\nnoneMatch(predicate)\nChecks if no elements match.\nstream.noneMatch(x -&gt; x &lt; 0)\n\n\nfindFirst()\nReturns the first element.\nstream.findFirst()\n\n\nmin(comparator)\nReturns the minimum element.\nstream.min(Comparator.naturalOrder())\n\n\n\n\n\n\nan attempt to reuse the same reference after calling the terminal operation will trigger the IllegalStateException\nJava 8 streams can‚Äôt be reused\n\n\n\n\nParallel Streams\n\nprocessed in parallel for improved performance\nUse parallelStream()\nSuitable for CPU-intensive operations on large datasets\n\n\n\nMapReduce\n\nA programming model for processing and generating large datasets\nDesigned for distributed computing on clusters of machines.\nBreaks down complex tasks into simpler, parallel operations\n\n\n\nInvented by Google in the 2000s\nIf memory space is not enought to load the full data set\nhttps://ludo2ne.github.io/ENSAI-2A-Big-Data/docs/lab/lab2/lab2.html#how-to-distribute-elementary-statistical-tasks\n\n\n\n\nMapReduce workflow\n\nSplit: Input data is divided into smaller chunks\nMap: Each chunk is processed by a Map function\nReduce: Values are aggregated by a Reduce function\n\n\n\nMapReduce principle\nList&lt;Integer&gt; values = Arrays.asList(1, 2, 5, 10, 3, 4, 6, 8, 9);\nList&lt;Integer&gt; valuesSquares = new ArrayList&lt;&gt;();\n\nFunction&lt;Integer, Integer&gt; square = n -&gt; n * n;\n\nfor (int n : values) {\n    valuesSquares.add(square.apply(n));\n}\n\nint sumOfSquares = 0;\nfor (int v : valuesSquares) {\n    sumOfSquares += v * v;\n}\n\ndouble meanSumOfSquares = sumOfSquares / valuesSquares.size();\n\n\ncompute squares (map)\nsum squares (reduce)\nfinal step (O(1))\n\n\n\n\nManual implementation\npublic List&lt;Double&gt; manualMap(List&lt;Double&gt; list, DoubleUnaryOperator function) {\n    List&lt;Double&gt; result = new ArrayList&lt;&gt;();\n    for (double element : list) {\n        result.add(function.applyAsDouble(element));\n    }\n    return result;\n}\n\npublic double manualReduce(List&lt;Double&gt; list, double identity, DoubleBinaryOperator accumulator) {\n    double result = identity;\n    for (double element : list) {\n        result = accumulator.applyAsDouble(result, element);\n    }\n    return result;\n}\n\n\nDoubleUnaryOperator (sqrt, power‚Ä¶)\n\nInterface with one method\napplyAsDouble(Double d) -&gt; double\n\nDoubleBinaryOperator (add, mult‚Ä¶)\n\napplyAsDouble(Double d1, Double d2) -&gt; double\n\n\n\n\n\nMapReduce using streams\nList&lt;Integer&gt; values = Arrays.asList(1, 2, 5, 10, 3, 4, 6, 8, 9);\n\ndouble sumOfSquares = values.stream()\n    .map(n -&gt; n * n)\n    .reduce(0, (a, b) -&gt; a + b);\n\ndouble meanSumOfSquares = sumOfSquares / values.size();\n\ndouble meanSumOfSquaresAvg = values.stream()\n    .mapToInt(n -&gt; n * n)\n    .average();\n\n\nmapToInt() -&gt; IntStream\n\nmap() specialization"
  },
  {
    "objectID": "doc/cours/advanced.html#enum",
    "href": "doc/cours/advanced.html#enum",
    "title": "Advanced Java",
    "section": "Enum",
    "text": "Enum\n\nWhat are Enums?\n\nDefines a set of named constants\nRepresents a fixed and predefined set of possible values\nExamples: Day of week, colors, playing cards\n\n\n\nDeclare a basic Enum\n\n\nGrade.java\n\npublic enum Grade {\n    EXCELLENT,\n    VERY_GOOD,\n    GOOD,\n    AVERAGE,\n    INSUFFICIENT\n}\n\n\n\nThese are the constant values of the enum\n\n\n\n\nUse an Enum\nGrade grade = Grade.VERY_GOOD;\n\nswitch (grade) {\n    case EXCELLENT:\n        System.out.println(\"Excellent!\");\n        break;\n    case VERY_GOOD:\n        System.out.println(\"Very good!\");\n        break;\n        \n    ...\n}\n\n\nEnums are implicitly:\n\nstatic (no need to create an instance)\nfinal (no modification allowed)\n\n\n\n\n\nAdding Behavior to Enum\n\nEnums are More Than Just Constants\nThey are special classes\n\nThey can have methods and attributes\n\n\n\n\n\nGrade.java\n\npublic enum Grade {\n    EXCELLENT(90), VERY_GOOD(80), GOOD(70), AVERAGE(60), INSUFFICIENT(50);\n\n    @Getter\n    private final int minimumScore;\n\n    private Grade(int minimumScore) {\n        this.minimumScore = minimumScore;\n    }\n\n    public String getFeedback() {\n        switch (this) {\n            case EXCELLENT: return \"Outstanding!\";\n            case VERY_GOOD: return \"Well done!\";\n            case GOOD: return \"Satisfactory.\";\n            case AVERAGE: return \"Needs more effort.\";\n            case INSUFFICIENT: return \"Requires significant improvement.\";\n            default: return \"Unknown grade.\";\n        }\n    }\n}\n\n\n\nconstructor is private\n\nwe cannot access it from outside the class\nwe can use enum constants to call the constructor\n\ncompiler error if constructor is public\n\n\n\n\nEnum methods\nGrade studentGrade = Grade.VERY_GOOD;\n\nSystem.out.println(\"Grade: \" + studentGrade);\nSystem.out.println(\"Minimum Score: \" + studentGrade.getMinimumScore());\nSystem.out.println(\"Feedback: \" + studentGrade.getFeedback());\n\n// Iterate\nfor (Grade g : Grade.values()) {\n    System.out.println(g);\n}\n\n\nEnums: Pros and Cons\n\n‚úÖ Readability: Makes code easier to understand by using descriptive names for values\n‚úÖ Type Safety: Avoids errors related to typos or invalid values\n‚úÖ Maintainability: Easier to modify and add new values (for dev)\n‚ùå Limited Extensibility: Difficult to add or modify values at runtime\n‚ùå Reduced Flexibility: Restricts values to a predefined set\n\n\n\n‚úÖ Compile-Time Validation: Catches enum-related issues early during compilation."
  },
  {
    "objectID": "doc/cours/advanced.html#interface",
    "href": "doc/cours/advanced.html#interface",
    "title": "Advanced Java",
    "section": "Interface",
    "text": "Interface\n\nBack to Inheritance\n\nFighter: Primarily focused on combat.\nDoctor: Primarily focused on healing.\n\n\n\n\n\n\nclassDiagram\n\nclass Person {\n    - name: String\n    - health: int\n    + takeDamage(int amount)\n    + receiveHealing(int amount)\n}\n\nclass Fighter {\n    - attackPower: int\n    + fight(Person target)\n}\n\nclass Doctor {\n    - healingPower: int\n    + heal(Person patient)\n}\n\nPerson &lt;|-- Fighter\nPerson &lt;|-- Doctor\n\n\n\n\n\n\n\n\nPython: Allows multiple inheritance.\nExample: A Square could be considered both a Rectangle and a Rhombus.\n\n\n\n\nIntroducing a New Character\n\nArmyDoctor: A special character that can both heal and combat.\nJava does not support multiple inheritance directly\n\n\n\n\n\n\n\nclassDiagram\n\nclass Person {\n    - name: String\n    - health: int\n    + takeDamage(int amount)\n    + receiveHealing(int amount)\n}\n\nclass Fighter {\n    - attackPower: int\n    + fight(Person target)\n}\n\n\nclass Doctor {\n    - healingPower: int\n    + heal(Person patient)\n}\n\nPerson &lt;|-- Fighter\nFighter &lt;|-- ArmyDoctor\nDoctor &lt;|-- ArmyDoctor\nPerson &lt;|-- Doctor\n\n\n\n\n\n\n\n\nDefining Abilities as Contracts\nInstead of focusing solely on fixed ‚Äúclasses,‚Äù let‚Äôs think about abilities.\nWe can define contracts for different types of actions:\n\nThe ability to combat\nThe ability to heal\n\nThis approach provides flexibility in how we define our game characters.\n\n\nWhat is a Java Interface?\n\nA Java Interface acts as a blueprint\nIt specifies a particular set of abilities or behaviors\nIt defines a contract that any class can choose to implement.\n\n\n\nCreate an Interface\n\n\nCombatant.java\n\npublic interface Combatant {\n    /**\n     * Represents the ability to engage in combat.\n     */\n    void fight(Person p);\n}\n\n\n\n\nHealer.java\n\npublic interface Healer {\n    /**\n     * Represents the ability to provide healing to a Person.\n     */\n    void heal(Person p);\n}\n\n\n\nAll methods are public abstract\ndefault method\n\ndefault void heal(Person p) { ...}) -&gt; no longer abstract\n\nstatic method:\n\ncalled using interface name without instanciation\n\nprivate method:\n\nto factorize code inside (no access from outside)\n\nattribute (constants) are implicitly public, static and final\n\n\n\n\nParent class\n\n\nPerson.java\n\npublic class Person {\n    private String name;\n    private int health;\n\n    public Person(String name, int health) {\n        this.name = name;\n        this.health = health;\n    }\n\n    public void takeDamage(int amount) {\n        this.health -= amount;\n    }\n\n    public void receiveHealing(int amount) {\n        this.health += amount;\n    }\n}\n\n\n\nImplementing the Interfaces\n\n\nDoctor.java\n\npublic class Doctor extends Person implements Healer {\n    private int healingPower;\n\n    public Doctor(String name, int health, int healingPower) {\n        super(name, health);\n        this.healingPower = healingPower;\n    }\n\n    @Override\n    public void heal(Person patient) {\n        patient.receiveHealing(this.healingPower);\n    }\n}\n\n\n\nMultiple Interfaces\n\n\nArmyDoctor.java\n\npublic class ArmyDoctor extends Person implements Healer, Combatant {\n    private int healingPower;\n    private int combatSkill;\n\n    public ArmyDoctor(String name, int health, int healingPower, int combatSkill) {\n        super(name, health);\n        this.healingPower = healingPower;\n        this.combatSkill = combatSkill;\n    }\n\n    @Override\n    public void heal(Person patient) {\n        patient.receiveHealing(this.healingPower * 0.5);\n    }\n\n    @Override\n    public void fight(Person target) {\n        target.takeDamage(this.combatSkill * 0.2);\n    }\n}\n\n\n\nUML\n\n\n\n\n\nclassDiagram\n\nclass Person {\n    - name: String\n    - health: int\n    + takeDamage(int amount)\n    + receiveHealing(int amount)\n}\n\nclass Fighter {\n    - attackPower: int\n}\n\nclass ArmyDoctor {\n    - healingPower: int\n    - combatSkill: int\n}\n\nclass Doctor {\n    - healingPower: int\n}\n\n\nclass Combatant {\n    &lt;&lt;interface&gt;&gt;\n    + fight(Person target)\n}\n\nclass Healer {\n    &lt;&lt;interface&gt;&gt;\n    + heal(Person patient)\n}\n\nPerson &lt;|-- Fighter\nPerson &lt;|-- Doctor\nPerson &lt;|-- ArmyDoctor\n\nFighter ..|&gt; Combatant\nArmyDoctor ..|&gt; Combatant\nArmyDoctor ..|&gt; Healer\nDoctor ..|&gt; Healer"
  },
  {
    "objectID": "doc/cours/advanced.html#upcasting-and-downcasting",
    "href": "doc/cours/advanced.html#upcasting-and-downcasting",
    "title": "Advanced Java",
    "section": "Upcasting and Downcasting",
    "text": "Upcasting and Downcasting\n\nUpcasting\nConvert an object:\n\nof a more specific type\nto a more general type\n\n\nspecific type: a subclass or a class that implements an interface\n\n\nDoes this code compile and run?\nDoctor d = new Doctor(...);\n\nPerson p = (Person) d;\nd.takeDamage(5);\n\nDoctor d = new Doctor(...);\n\nPerson p = (Person) d;\np.heal(anotherPerson);\n\n\nCompiles and runs\nCompile error\n\n\n\n\nDowncasting\nConverting an object of:\n\na more general type\nto a more specific type\n\n\nDoes this code compile and run?\nPerson p = new Doctor(...);\n\nDoctor d = (Doctor) p;\nd.heal(anotherPerson);\n\nPerson p = new Doctor(...);\n\nFighter f = (Fighter) p;\np.takeDamage(5);\n\n\nCompiles and runs\nCompile error java.lang.ClassCastException\n\n\n\n\nDowncasting with instanceof\nPerson p = new Doctor(...);\n\nif (p instanceof Doctor d) {\n    d.heal(anotherPerson);\n} else {\n    System.out.println(p + \" is not a Doctor.\");\n}\n\nif (p instanceof Doctor d)\n\n// equivalent since Java 16\n\nif (p instanceof Doctor){\n    Doctor d = (Doctor) p;\n}"
  },
  {
    "objectID": "doc/cours/advanced.html#to-go-further",
    "href": "doc/cours/advanced.html#to-go-further",
    "title": "Advanced Java",
    "section": "To go further",
    "text": "To go further\n\nOptional\nGenericity\nAnnotations\n\n\n\nOptional: deal with null value\n\n    public static &lt;T&gt; void printArray(T[] array) {\n        for (T element : array) {\n            System.out.print(element + \" \");\n        }\n        System.out.println();\n    }"
  },
  {
    "objectID": "doc/cours/advanced-slides.html#reminder",
    "href": "doc/cours/advanced-slides.html#reminder",
    "title": "Advanced Java",
    "section": "Reminder",
    "text": "Reminder\n\nAdvices for Rated TP:\n\nJavadoc\nComment if necessary\nPascalCase (Class, Method, Variables)\nUse clear, meaningful names for variables and methods\nwell-indented code, easy to read"
  },
  {
    "objectID": "doc/cours/advanced-slides.html#exception",
    "href": "doc/cours/advanced-slides.html#exception",
    "title": "Advanced Java",
    "section": "Exception",
    "text": "Exception"
  },
  {
    "objectID": "doc/cours/advanced-slides.html#stream",
    "href": "doc/cours/advanced-slides.html#stream",
    "title": "Advanced Java",
    "section": "Stream",
    "text": "Stream\n\n\nhttps://www.geeksforgeeks.org/java-8-stream-tutorial/\nhttps://www.baeldung.com/java-8-streams"
  },
  {
    "objectID": "doc/cours/advanced-slides.html#enum",
    "href": "doc/cours/advanced-slides.html#enum",
    "title": "Advanced Java",
    "section": "Enum",
    "text": "Enum"
  },
  {
    "objectID": "doc/cours/advanced-slides.html#interface",
    "href": "doc/cours/advanced-slides.html#interface",
    "title": "Advanced Java",
    "section": "Interface",
    "text": "Interface"
  },
  {
    "objectID": "doc/cours/advanced-slides.html#upcasting-and-downcasting",
    "href": "doc/cours/advanced-slides.html#upcasting-and-downcasting",
    "title": "Advanced Java",
    "section": "Upcasting and Downcasting",
    "text": "Upcasting and Downcasting"
  },
  {
    "objectID": "doc/cours/advanced-slides.html#to-go-further",
    "href": "doc/cours/advanced-slides.html#to-go-further",
    "title": "Advanced Java",
    "section": "To go further",
    "text": "To go further\n\nOptional\nGenericity\nAnnotations\n\n\n\nOptional: deal with null value\n\n    public static &lt;T&gt; void printArray(T[] array) {\n        for (T element : array) {\n            System.out.print(element + \" \");\n        }\n        System.out.println();\n    }"
  },
  {
    "objectID": "doc/cours/classes-slides.html#oop-principles",
    "href": "doc/cours/classes-slides.html#oop-principles",
    "title": "Java Classes",
    "section": "OOP Principles",
    "text": "OOP Principles\n\n\nEncapsulation\nInheritance\nPolymorphism\n\n\n\n\nEncapsulation: Bundling data and methods together\nInheritance: Deriving new classes from existing ones\nPolymorphism: One interface, multiple behaviors\n\n\nWhy OOP ?\n\nCode reusability\nModularity and maintainability\nReal-world modeling"
  },
  {
    "objectID": "doc/cours/classes-slides.html#encapsulation",
    "href": "doc/cours/classes-slides.html#encapsulation",
    "title": "Java Classes",
    "section": "Encapsulation",
    "text": "Encapsulation\n\nAttributes: Fields\n\ndefine the state of an object\n\nMethods: Behaviors\n\ndefine the actions an object can perform\n\n\n\n\nin relation to other classes\nHiding internal details and exposing only necessary information"
  },
  {
    "objectID": "doc/cours/classes-slides.html#a-class",
    "href": "doc/cours/classes-slides.html#a-class",
    "title": "Java Classes",
    "section": "A class üö≤",
    "text": "A class üö≤\n\n\nBike.java\n\npublic class Bike {\n    // Attributes\n    private String color;\n    private int speed;\n    private boolean pannierRacks;\n\n    // Constructor\n    public Bike(String color, boolean pannierRacks) {\n        this.color = color;\n        this.speed = 0;\n        this.pannierRacks = pannierRacks;\n    }\n\n    // Method\n    public void accelerate(int increment) {\n        if (increment &gt; 0) {\n            this.speed += increment;\n        }\n    }\n\n    // Getter\n    public int getSpeed() {\n        return this.speed;\n    }\n}\n\n\ndetails after"
  },
  {
    "objectID": "doc/cours/classes-slides.html#attributes",
    "href": "doc/cours/classes-slides.html#attributes",
    "title": "Java Classes",
    "section": "Attributes",
    "text": "Attributes\n\n\nBike.java\n\npublic class Bike {\n    // Attributes\n    private String color = \"yellow\";    // default value if not specified by the constructor\n    private int speed;\n    private boolean pannierRacks;\n\n    private static int nbBikes = 0;\n}\n\n\nstatic: class attribute\n\n\n\nusually private attributes\nsetters and getters next"
  },
  {
    "objectID": "doc/cours/classes-slides.html#constructor",
    "href": "doc/cours/classes-slides.html#constructor",
    "title": "Java Classes",
    "section": "Constructor",
    "text": "Constructor\n\n\nBike.java\n\npublic class Bike {\n    public Bike(String color, boolean pannierRacks) {\n        this.color = color;\n        this.speed = 0;\n        this.pannierRacks = pannierRacks;\n    }\n}\n\n\nthis : Refers to the current object\n\n\n\nName of a Contructor: same as class name\nGenerally public\nPrivate Contructor ?\n\nSingleton Pattern (public static SingletonClass getInstance())\nUninstantiable Classes: class that simply contains static methods\nPrivate Constructor called by Public Constructor"
  },
  {
    "objectID": "doc/cours/classes-slides.html#call-a-method",
    "href": "doc/cours/classes-slides.html#call-a-method",
    "title": "Java Classes",
    "section": "Call a method",
    "text": "Call a method\n// Create a Bike object calling the constructor\nBike greenBike = new Bike(\"Green\", true);\n\n// Call methods\ngreenBike.accelerate(5);\nSystem.out.println(greenBike.getSpeed());\n\n\naccelerate(int) -&gt; void\ngetSpeed() -&gt; int"
  },
  {
    "objectID": "doc/cours/classes-slides.html#main-method",
    "href": "doc/cours/classes-slides.html#main-method",
    "title": "Java Classes",
    "section": "Main method",
    "text": "Main method\n\nEntry point\nGenerally in a class called Main\n\npublic static void main(String[] args) {\n    // Program logic here\n}\n\n\npublic: Makes the method accessible from anywhere (required for JVM to call it)\nstatic: Allows calling the method without creating an instance of the class.\nvoid: The method does not return any value.\nmain: The method name that JVM looks for to start execution.\nString[]: args Array of command-line arguments passed when running the program"
  },
  {
    "objectID": "doc/cours/classes-slides.html#inheritance",
    "href": "doc/cours/classes-slides.html#inheritance",
    "title": "Java Classes",
    "section": "Inheritance",
    "text": "Inheritance"
  },
  {
    "objectID": "doc/cours/classes-slides.html#polymorphism",
    "href": "doc/cours/classes-slides.html#polymorphism",
    "title": "Java Classes",
    "section": "Polymorphism",
    "text": "Polymorphism"
  },
  {
    "objectID": "doc/cours/classes-slides.html#javadoc",
    "href": "doc/cours/classes-slides.html#javadoc",
    "title": "Java Classes",
    "section": "JavaDoc",
    "text": "JavaDoc\n\nClarity: Provides clear and consistent documentation\nMaintainability: Makes it easier to understand and maintain code\nAccessibility: Generates HTML documentation that can be easily shared and viewed\n\nJavadoc comments are enclosed in /** and */.\nPlaced immediately before the element being documented (class, method, field, etc.)"
  },
  {
    "objectID": "doc/cours/classes.html",
    "href": "doc/cours/classes.html",
    "title": "Java Classes",
    "section": "",
    "text": "Encapsulation\nInheritance\nPolymorphism\n\n\n\n\nEncapsulation: Bundling data and methods together\nInheritance: Deriving new classes from existing ones\nPolymorphism: One interface, multiple behaviors\n\n\nWhy OOP ?\n\nCode reusability\nModularity and maintainability\nReal-world modeling"
  },
  {
    "objectID": "doc/cours/classes.html#oop-principles",
    "href": "doc/cours/classes.html#oop-principles",
    "title": "Java Classes",
    "section": "",
    "text": "Encapsulation\nInheritance\nPolymorphism\n\n\n\n\nEncapsulation: Bundling data and methods together\nInheritance: Deriving new classes from existing ones\nPolymorphism: One interface, multiple behaviors\n\n\nWhy OOP ?\n\nCode reusability\nModularity and maintainability\nReal-world modeling"
  },
  {
    "objectID": "doc/cours/classes.html#encapsulation",
    "href": "doc/cours/classes.html#encapsulation",
    "title": "Java Classes",
    "section": "Encapsulation",
    "text": "Encapsulation\n\nAttributes: Fields\n\ndefine the state of an object\n\nMethods: Behaviors\n\ndefine the actions an object can perform\n\n\n\n\nin relation to other classes\nHiding internal details and exposing only necessary information"
  },
  {
    "objectID": "doc/cours/classes.html#a-class",
    "href": "doc/cours/classes.html#a-class",
    "title": "Java Classes",
    "section": "A class üö≤",
    "text": "A class üö≤\n\n\nBike.java\n\npublic class Bike {\n    // Attributes\n    private String color;\n    private int speed;\n    private boolean pannierRacks;\n\n    // Constructor\n    public Bike(String color, boolean pannierRacks) {\n        this.color = color;\n        this.speed = 0;\n        this.pannierRacks = pannierRacks;\n    }\n\n    // Method\n    public void accelerate(int increment) {\n        if (increment &gt; 0) {\n            this.speed += increment;\n        }\n    }\n\n    // Getter\n    public int getSpeed() {\n        return this.speed;\n    }\n}\n\n\ndetails after"
  },
  {
    "objectID": "doc/cours/classes.html#attributes",
    "href": "doc/cours/classes.html#attributes",
    "title": "Java Classes",
    "section": "Attributes",
    "text": "Attributes\n\n\nBike.java\n\npublic class Bike {\n    // Attributes\n    private String color = \"yellow\";    // default value if not specified by the constructor\n    private int speed;\n    private boolean pannierRacks;\n\n    private static int nbBikes = 0;\n}\n\n\nstatic: class attribute\n\n\n\nusually private attributes\nsetters and getters next\n\n\n\nReminder: Attributes Accessiblility\n\n\n\n\n\n\n\n\n\n\nModifier\nSame Class\nSame Package\nSubclasses\nEverywhere\n\n\n\n\npublic\n‚úÖ\n‚úÖ\n‚úÖ\n‚úÖ\n\n\nprotected\n‚úÖ\n‚úÖ\n‚úÖ\n‚ùå\n\n\ndefault (no modifier)\n‚úÖ\n‚úÖ\n‚ùå\n‚ùå\n\n\nprivate\n‚úÖ\n‚ùå\n‚ùå\n‚ùå"
  },
  {
    "objectID": "doc/cours/classes.html#constructor",
    "href": "doc/cours/classes.html#constructor",
    "title": "Java Classes",
    "section": "Constructor",
    "text": "Constructor\n\n\nBike.java\n\npublic class Bike {\n    public Bike(String color, boolean pannierRacks) {\n        this.color = color;\n        this.speed = 0;\n        this.pannierRacks = pannierRacks;\n    }\n}\n\n\nthis : Refers to the current object\n\n\n\nName of a Contructor: same as class name\nGenerally public\nPrivate Contructor ?\n\nSingleton Pattern (public static SingletonClass getInstance())\nUninstantiable Classes: class that simply contains static methods\nPrivate Constructor called by Public Constructor\n\n\n\n\nCreate a Bike Object\nBike greenBike = new Bike(\"Green\", true);\n\nBike: type of the variable\ngreenBike: name of the variable\nnew: Memory allocation\nBike(‚Ä¶): constructor call\n\n\n\nJava only uses positional arguments\nYou can create several constructors ‚â† Python\n\n\n\n\nDefault Constructor\n\nIf no constructor is provided\n\nBike myBike = new Bike();\n\nwith default values\n\ncolor: null\npannierRacks: false\n\n\n\n\nError if another constructor is provided\n\n\n\n\nCreate a copy\nBike greenBike = new Bike(\"Green\", true);\nBike otherBike = greenBike;\n\n\notherBike is it a copy of greenBike?\nNo, it refer to the same Bike object\nHow to create a copy?\n\n\n\n// Copy constructor\npublic Bike(Bike other) {\n      ...  \n}\n\nBike greenBike = new Bike(\"Green\", 25, true);\nBike copiedBike = new Bike(greenBike);"
  },
  {
    "objectID": "doc/cours/classes.html#call-a-method",
    "href": "doc/cours/classes.html#call-a-method",
    "title": "Java Classes",
    "section": "Call a method",
    "text": "Call a method\n// Create a Bike object calling the constructor\nBike greenBike = new Bike(\"Green\", true);\n\n// Call methods\ngreenBike.accelerate(5);\nSystem.out.println(greenBike.getSpeed());\n\n\naccelerate(int) -&gt; void\ngetSpeed() -&gt; int"
  },
  {
    "objectID": "doc/cours/classes.html#main-method",
    "href": "doc/cours/classes.html#main-method",
    "title": "Java Classes",
    "section": "Main method",
    "text": "Main method\n\nEntry point\nGenerally in a class called Main\n\npublic static void main(String[] args) {\n    // Program logic here\n}\n\n\npublic: Makes the method accessible from anywhere (required for JVM to call it)\nstatic: Allows calling the method without creating an instance of the class.\nvoid: The method does not return any value.\nmain: The method name that JVM looks for to start execution.\nString[]: args Array of command-line arguments passed when running the program\n\n\n\nUsing args\n\nString[] args: arguments passed when running the program\n\n\n\nMain.java\n\npublic static void main(String[] args) {\n    int limit = Integer.parseInt(args[0]);\n\n    for (int i = 0; i &lt;= limit; i++) {\n        System.out.println(i);\n    }\n}\n\n\njavac Main.java\njava Main 8"
  },
  {
    "objectID": "doc/cours/classes.html#inheritance",
    "href": "doc/cours/classes.html#inheritance",
    "title": "Java Classes",
    "section": "Inheritance",
    "text": "Inheritance\n\nParent class\n\n\nVehicle.java\n\npublic class Vehicle {\n    protected String color;\n    protected int speed;\n\n    public Vehicle(String color) {\n        this.color = color;\n        this.speed = 0;\n    }\n}\n\n\n\nSubclass\n\nextends: inherit\nsuper(): constructor of the parent class\nsuper.foo(): method foo() of the parent class\nsuper does not allow access to the private attributes of the parent class\n\n\n\nBike.java\n\npublic class Bike extends Vehicle {\n    private boolean pannierRacks;\n\n    // Constructor\n    public Bike(String color) {\n        super(color);\n        this.pannierRacks = pannierRacks;\n    }\n}\n\n\n\nMultiple-inheritance is forbidden in Java\nUse Interfaces\n\nDeclare methods to be implemented.\n\n\n\n\n\nAbstract\n\nabstract classes: cannot be instantiated\nabstract methods: Declared without implementation, must be overridden by subclasses\n\n\n\nVehicle.java\n\npublic abstract class Vehicle {\n    protected String color;\n    protected int speed;\n\n    public Vehicle(String color) {\n        this.color = color;\n        this.speed = 0;\n    }\n\n    public abstract void honk();  // abstract method to be implemented in subsclasses\n\n    public void accelerate(int increment) {\n        this.speed += increment;\n    }\n}\n\n\nQuestions:\n\nIs it possible to create a final abstract class?\nPrivate abstract method?\n\n\n\n\nOverride method\n\n\nBike.java\n\npublic class Bike extends Vehicle {\n    private boolean pannierRacks;\n\n    // Constructor\n    public Bike(String color) {\n        super(color);\n        this.pannierRacks = pannierRacks;\n    }\n\n    @Override\n    public abstract void honk(){\n        System.out.println(\"Dring\")\n    }\n\n    @Override\n    public void accelerate(int increment) {\n        this.speed += increment + 2;\n    }\n\n\n\nYou must override abstract methods\nYou can override other methods\nOverride final method?"
  },
  {
    "objectID": "doc/cours/classes.html#polymorphism",
    "href": "doc/cours/classes.html#polymorphism",
    "title": "Java Classes",
    "section": "Polymorphism",
    "text": "Polymorphism\n\nSubstitution\n\n\nMain.java\n\nBike bike1 = new Bike();\nBike bike2 = new Bike();\nScooter scooter1 = new Scooter();\nScooter scooter2 = new Scooter();\n\nList&lt;Vehicle&gt; vehicles = List.of(bike1, bike2, scooter1, scooter2);\n\n// Accelerate all vehicles\nfor (Vehicle vehicle : vehicles) {\n    vehicle.accelerate(10);\n}\n\n\nsubclass provides a specific implementation of a method that is already defined in its superclass\n\n\n\nOverloading\n\n\nBike.java\n\npublic class Bike extends Vehicle {\n    private boolean pannierRacks;\n\n    ...\n\n    public void accelerate(int increment) {\n        this.speed += increment;\n    }\n    \n    public void accelerate() {\n        this.speed += 5;\n    }\n        \n    public void accelerate(double increment) {\n        this.speed += increment.intValue();\n    }\n\n\nclass has multiple methods with the same name but different parameters"
  },
  {
    "objectID": "doc/cours/classes.html#javadoc",
    "href": "doc/cours/classes.html#javadoc",
    "title": "Java Classes",
    "section": "JavaDoc",
    "text": "JavaDoc\n\nClarity: Provides clear and consistent documentation\nMaintainability: Makes it easier to understand and maintain code\nAccessibility: Generates HTML documentation that can be easily shared and viewed\n\nJavadoc comments are enclosed in /** and */.\nPlaced immediately before the element being documented (class, method, field, etc.)\n\nExample\n\n\nBike.java\n\n/**\n * Represents a Bike, a type of Vehicle.\n */\npublic class Bike extends Vehicle {\n    private boolean pannierRacks;\n\n    /**\n     * Constructs a Bike with the given color\n     */\n    public Bike(String color) {\n        super(color);\n        this.pannierRacks = false;\n    }\n\n    /**\n     * Produces the sound of a bike's honk (dring).\n     */\n    @Override\n    public void honk() {\n        System.out.println(\"Dring\");\n    }\n\n    /**\n     * Accelerates the bike by the given increment, plus an additional 2 units.\n     *\n     * @param increment The amount to increase the speed by.\n     */\n    @Override\n    public void accelerate(int increment) {\n        this.speed += increment + 2;\n    }\n\n    /**\n     * Checks if the bike has pannier racks.\n     *\n     * @return true if the bike has pannier racks, false otherwise.\n     */\n    public boolean hasPannierRacks() {\n        return pannierRacks;\n    }\n\n\nTags\n\n@author: Author of the class.\n@version: Version of the class.\n@param: Description of a method parameter.\n@return: Description of a method‚Äôs return value.\n@throws: Description of an exception that a method might throw.\n@see: Cross-reference to other classes or methods.\n@deprecated: Indicates that a method or class is deprecated."
  },
  {
    "objectID": "doc/cours/collections-slides.html#collections-in-java",
    "href": "doc/cours/collections-slides.html#collections-in-java",
    "title": "Collections",
    "section": "Collections in Java",
    "text": "Collections in Java\nThree main types to store and manage data:\n\nList\nMap\nSet\n\nEach serves a different purpose."
  },
  {
    "objectID": "doc/cours/collections-slides.html#arraylist",
    "href": "doc/cours/collections-slides.html#arraylist",
    "title": "Collections",
    "section": "ArrayList",
    "text": "ArrayList\n\nOrdered\nAllow duplicates\nFast for reading, slow for searching\nSlow for inserting/deleting in the middle\n\n\nLinkedList (Fast for inserting/deleting, slower for accessing elements)"
  },
  {
    "objectID": "doc/cours/collections-slides.html#hashmap",
    "href": "doc/cours/collections-slides.html#hashmap",
    "title": "Collections",
    "section": "HashMap",
    "text": "HashMap\n\nHashMap&lt;K, V&gt;\nassociate a key (K) with a value (V)\nUnordered\nFast access\n\n\n\nlike python dict\nothers:\n\nTreeMap: Sorted by key\nLinkedHashMap: Maintains insertion order"
  },
  {
    "objectID": "doc/cours/collections-slides.html#hashset",
    "href": "doc/cours/collections-slides.html#hashset",
    "title": "Collections",
    "section": "HashSet",
    "text": "HashSet\n\nNo duplicates\nUnordered\n\nimport java.util.HashSet;\n\nHashSet&lt;String&gt; colors = new HashSet&lt;&gt;();\n\ncolors.add(\"Blue\");\ncolors.add(\"Green\");\n\nboolean containPink = colors.contains(\"Pink\");\ncolors.remove(\"Green\");\n\nSystem.out.println(\"Size of set: \" + colors.size());\n\nfor (String color : colors) {\n    System.out.println(color);\n}"
  },
  {
    "objectID": "doc/cours/collections-slides.html#choosing-between-list-set-and-map",
    "href": "doc/cours/collections-slides.html#choosing-between-list-set-and-map",
    "title": "Collections",
    "section": "Choosing Between List, Set, and Map",
    "text": "Choosing Between List, Set, and Map\n\n\n\nFeature\nArrayList\nHashSet\nHashMap\n\n\n\n\nAllows Duplicates?\n‚úÖ\n‚ùå\n‚ùå (Keys)\n\n\nMaintains Order?\n‚úÖ\n‚ùå\n‚ùå\n\n\nKey-Value Storage?\n‚ùå\n‚ùå\n‚úÖ\n\n\nFast Lookup?\n‚ùå O(n)\n‚úÖ O(1)\n‚úÖ O(1)\n\n\n\nüëâ Use a List when order matters and duplicates are allowed.\nüëâ Use a Set when uniqueness is required.\nüëâ Use a Map when you need key-value storage."
  },
  {
    "objectID": "doc/cours/collections.html",
    "href": "doc/cours/collections.html",
    "title": "Collections",
    "section": "",
    "text": "Three main types to store and manage data:\n\nList\nMap\nSet\n\nEach serves a different purpose."
  },
  {
    "objectID": "doc/cours/collections.html#collections-in-java",
    "href": "doc/cours/collections.html#collections-in-java",
    "title": "Collections",
    "section": "",
    "text": "Three main types to store and manage data:\n\nList\nMap\nSet\n\nEach serves a different purpose."
  },
  {
    "objectID": "doc/cours/collections.html#arraylist",
    "href": "doc/cours/collections.html#arraylist",
    "title": "Collections",
    "section": "ArrayList",
    "text": "ArrayList\n\nOrdered\nAllow duplicates\nFast for reading, slow for searching\nSlow for inserting/deleting in the middle\n\n\nLinkedList (Fast for inserting/deleting, slower for accessing elements)\n\n\nCreate an ArrayList\nimport java.util.ArrayList;\nimport java.util.List;\n\nList&lt;String&gt; names = new ArrayList&lt;&gt;();\nList&lt;Integer&gt; numbers = new ArrayList&lt;&gt;();\n\nList&lt;String&gt; colors = List.of(\"Blue\", \"Green\", \"Yellow\");    // Immutable\n\n\nArrayList&lt;&gt;(): constructor\nList&lt;String&gt; colors = new ArrayList&lt;&gt;(Arrays.asList(\"Blue\", \"Green\", \"Yellow\"));\nother ways\npossible to create list of objects\n\n\n\n\nPlay with values\nnames.add(\"Alba\");                         // add at the end\nnames.addAll(List.of(\"Lisa\", \"Stan\"));     // add multiple\nnames.add(1, \"Martin\");                    // add at a specific index\n\nnames.set(1, \"Johannes\")                   // replace\n\nnames.remove(3);                           // remove by index\nnames.remove(\"Stan\");                      // remove by value (first occurence)\n\n\nOther methods\nint sizeList = names.size();\nString valueSecondIndex = names.get(2)          // get a value by index\nboolean containsJo = names.contains(\"Jo\");      // contain a value?\n\nSystem.out.println(\"Empty List? \" + names.isEmpty());\n\n\nBrowse a List\nBy index\nfor (int i = 0; i &lt; names.size(); i++) {\n    System.out.println(names.get(i));\n}\nBy value\nfor (String name : names) {\n    System.out.println(name);\n}\n\n\nUsefull methods\nimport java.util.Collections;\n\nCollections.sort(List&lt;T&gt; list);\nCollections.reverse(List&lt;T&gt; list);\nCollections.shuffle(List&lt;T&gt; list);\nCollections.replaceAll(List&lt;T&gt; list, T oldVal, T newVal)\n\n\n&lt;T&gt;: This is the type parameter\nThose methods modifie the original list in place"
  },
  {
    "objectID": "doc/cours/collections.html#hashmap",
    "href": "doc/cours/collections.html#hashmap",
    "title": "Collections",
    "section": "HashMap",
    "text": "HashMap\n\nHashMap&lt;K, V&gt;\nassociate a key (K) with a value (V)\nUnordered\nFast access\n\n\n\nlike python dict\nothers:\n\nTreeMap: Sorted by key\nLinkedHashMap: Maintains insertion order\n\n\n\n\nCreate and pop a HashMap\nimport java.util.HashMap;\n\nHashMap&lt;String, Integer&gt; fruitStore = new HashMap&lt;&gt;();\n\nfruitStore.put(\"Apple\", 5);\nfruitStore.put(\"Banana\", 3);\nfruitStore.put(\"Orange\", 10);\n\nfruitStore.put(\"Apple\", 5);         // update\n\nfruitStore.remove(\"Banana\");\n\nreplace (don‚Äôt create key if not exists):\n\nmap.replace(key, value);\nmap.replace(key, oldValue, newValue) only if oldValue is correct\n\n\n\n\nHashMap methods\nint nbElements = fruitStore.size();\n\nboolean hasBanana = fruitStore.containsKey(\"Banana\");\nboolean hasFive = fruitStore.containsValue(5);\n\nint nbApple = fruitStore.get(\"Apple\")\n\n\nIterate over a HashMap\nBy keys\nfor (String key : fruitStore.keySet()) {\n    System.out.println(key + \": \" + fruitStore.get(key));\n}\n By values\nfor (Integer value : fruitStore.values()) {\n    System.out.println(value);\n}\n\nBoth keys and values\nfor (Map.Entry&lt;String, Integer&gt; entry : fruitStore.entrySet()) {\n    System.out.println(entry.getKey() + \" : \" + entry.getValue());\n}\n Using Iterator with entrySet\nIterator&lt;Map.Entry&lt;String, Integer&gt;&gt; iterator = fruitStore.entrySet().iterator();\n\nwhile (iterator.hasNext()) {\n    Map.Entry&lt;String, Integer&gt; entry = iterator.next();\n    System.out.println(entry.getKey() + \": \" + entry.getValue());\n}"
  },
  {
    "objectID": "doc/cours/collections.html#hashset",
    "href": "doc/cours/collections.html#hashset",
    "title": "Collections",
    "section": "HashSet",
    "text": "HashSet\n\nNo duplicates\nUnordered\n\nimport java.util.HashSet;\n\nHashSet&lt;String&gt; colors = new HashSet&lt;&gt;();\n\ncolors.add(\"Blue\");\ncolors.add(\"Green\");\n\nboolean containPink = colors.contains(\"Pink\");\ncolors.remove(\"Green\");\n\nSystem.out.println(\"Size of set: \" + colors.size());\n\nfor (String color : colors) {\n    System.out.println(color);\n}"
  },
  {
    "objectID": "doc/cours/collections.html#choosing-between-list-set-and-map",
    "href": "doc/cours/collections.html#choosing-between-list-set-and-map",
    "title": "Collections",
    "section": "Choosing Between List, Set, and Map",
    "text": "Choosing Between List, Set, and Map\n\n\n\nFeature\nArrayList\nHashSet\nHashMap\n\n\n\n\nAllows Duplicates?\n‚úÖ\n‚ùå\n‚ùå (Keys)\n\n\nMaintains Order?\n‚úÖ\n‚ùå\n‚ùå\n\n\nKey-Value Storage?\n‚ùå\n‚ùå\n‚úÖ\n\n\nFast Lookup?\n‚ùå O(n)\n‚úÖ O(1)\n‚úÖ O(1)\n\n\n\nüëâ Use a List when order matters and duplicates are allowed.\nüëâ Use a Set when uniqueness is required.\nüëâ Use a Map when you need key-value storage."
  },
  {
    "objectID": "doc/cours/junit-slides.html#unit-tests-with-junit",
    "href": "doc/cours/junit-slides.html#unit-tests-with-junit",
    "title": "JUnit",
    "section": "Unit tests with JUnit",
    "text": "Unit tests with JUnit\nhttps://junit.org/junit5/\n\nA popular open-source testing framework for Java"
  },
  {
    "objectID": "doc/cours/junit-slides.html#test-classes",
    "href": "doc/cours/junit-slides.html#test-classes",
    "title": "JUnit",
    "section": "Test classes",
    "text": "Test classes\n\nOne-to-One Relationship\nEach class you write should have a corresponding test class\nBook.java ‚û°Ô∏è BookTest.java\n\nplaced in the same package as the class being tested\nbut in the src/test/java directory"
  },
  {
    "objectID": "doc/cours/junit-slides.html#example",
    "href": "doc/cours/junit-slides.html#example",
    "title": "JUnit",
    "section": "Example",
    "text": "Example"
  },
  {
    "objectID": "doc/cours/junit-slides.html#assertions",
    "href": "doc/cours/junit-slides.html#assertions",
    "title": "JUnit",
    "section": "Assertions",
    "text": "Assertions\n\nassertEquals(expected, actual)\nassertTrue(condition) / assertFalse(condition)\nassertNull(object) / assertNotNull(object)\nassertThrows(expectedType, executable)"
  },
  {
    "objectID": "doc/cours/junit-slides.html#annotations",
    "href": "doc/cours/junit-slides.html#annotations",
    "title": "JUnit",
    "section": "Annotations",
    "text": "Annotations\n\n@Test: Marks a method as a test case\n@BeforeEach: Executes before each test method\n@AfterEach: Executes after each test method\n@BeforeAll: Executes once before all test methods\n@AfterAll: Executes once after all test methods"
  },
  {
    "objectID": "doc/cours/junit-slides.html#mocking",
    "href": "doc/cours/junit-slides.html#mocking",
    "title": "JUnit",
    "section": "Mocking",
    "text": "Mocking\n\nReplacing real dependencies with controlled substitutes during unit testing\nAllows you to isolate the unit under test from external factors\nSee Mockito frameworks"
  },
  {
    "objectID": "doc/cours/junit-slides.html#mutation-testing",
    "href": "doc/cours/junit-slides.html#mutation-testing",
    "title": "JUnit",
    "section": "Mutation Testing",
    "text": "Mutation Testing\n\nEvaluate the effectiveness of your tests\nIntroduces small changes (mutations) to your code\nChecks if your tests can detect these changes\n\nhttps://pitest.org/\n\n\nMutations are automatically seeded into your code,\nthen your tests are run.\nIf your tests fail then the mutation is killed\nif your tests pass then the mutation lived\nThe quality of your tests can be gauged from the percentage of mutations killed\n\nReplace :\n\n+ with -\n&gt; with &gt;=\n‚Ä¶"
  },
  {
    "objectID": "doc/cours/junit.html",
    "href": "doc/cours/junit.html",
    "title": "JUnit",
    "section": "",
    "text": "https://junit.org/junit5/\n\nA popular open-source testing framework for Java\n\n\n\n\nTesting individual units of code\nVerifying that each unit behaves as expected\nEssential for detecting bugs\nAvoid regressions (Prevents new changes from breaking existing code)"
  },
  {
    "objectID": "doc/cours/junit.html#unit-tests-with-junit",
    "href": "doc/cours/junit.html#unit-tests-with-junit",
    "title": "JUnit",
    "section": "",
    "text": "https://junit.org/junit5/\n\nA popular open-source testing framework for Java\n\n\n\n\nTesting individual units of code\nVerifying that each unit behaves as expected\nEssential for detecting bugs\nAvoid regressions (Prevents new changes from breaking existing code)"
  },
  {
    "objectID": "doc/cours/junit.html#test-classes",
    "href": "doc/cours/junit.html#test-classes",
    "title": "JUnit",
    "section": "Test classes",
    "text": "Test classes\n\nOne-to-One Relationship\nEach class you write should have a corresponding test class\nBook.java ‚û°Ô∏è BookTest.java\n\nplaced in the same package as the class being tested\nbut in the src/test/java directory"
  },
  {
    "objectID": "doc/cours/junit.html#example",
    "href": "doc/cours/junit.html#example",
    "title": "JUnit",
    "section": "Example",
    "text": "Example\n\nClass Fraction\n\n\nFraction.java\n\npublic class Fraction {\n    @Getter private int numerator;\n    @Getter private int denominator;\n\n    public Fraction(int numerator, int denominator) {\n        if (denominator == 0)\n            throw new IllegalArgumentException(\"Denominator cannot be zero.\");\n        this.numerator = numerator;\n        this.denominator = denominator;\n    }\n\n    public Fraction invert() {\n        if (numerator == 0)\n            throw new ArithmeticException(\"Cannot invert a fraction with a zero numerator.\");\n        return new Fraction(denominator, numerator);\n    }\n}\n\n\n\n@Getter : using Lombok\nCreate method getAttribute()\n\n\n\n\nTest class\n\n\nFractionTest.java\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FractionTest {\n\n    @Test\n    void testInvertValid() {\n        // GIVEN\n        Fraction fraction = new Fraction(2, 3);\n\n        // WHEN\n        Fraction inverted = fraction.invert();\n\n        // THEN\n        assertEquals(3, inverted.getNumerator());\n        assertEquals(2, inverted.getDenominator());\n    }\n\n    @Test\n    void testInvertZeroNumerator() {\n        Fraction fraction = new Fraction(0, 5);\n        assertThrows(ArithmeticException.class, fraction::invert);\n    }\n}"
  },
  {
    "objectID": "doc/cours/junit.html#assertions",
    "href": "doc/cours/junit.html#assertions",
    "title": "JUnit",
    "section": "Assertions",
    "text": "Assertions\n\nassertEquals(expected, actual)\nassertTrue(condition) / assertFalse(condition)\nassertNull(object) / assertNotNull(object)\nassertThrows(expectedType, executable)"
  },
  {
    "objectID": "doc/cours/junit.html#annotations",
    "href": "doc/cours/junit.html#annotations",
    "title": "JUnit",
    "section": "Annotations",
    "text": "Annotations\n\n@Test: Marks a method as a test case\n@BeforeEach: Executes before each test method\n@AfterEach: Executes after each test method\n@BeforeAll: Executes once before all test methods\n@AfterAll: Executes once after all test methods"
  },
  {
    "objectID": "doc/cours/junit.html#mocking",
    "href": "doc/cours/junit.html#mocking",
    "title": "JUnit",
    "section": "Mocking",
    "text": "Mocking\n\nReplacing real dependencies with controlled substitutes during unit testing\nAllows you to isolate the unit under test from external factors\nSee Mockito frameworks"
  },
  {
    "objectID": "doc/cours/junit.html#mutation-testing",
    "href": "doc/cours/junit.html#mutation-testing",
    "title": "JUnit",
    "section": "Mutation Testing",
    "text": "Mutation Testing\n\nEvaluate the effectiveness of your tests\nIntroduces small changes (mutations) to your code\nChecks if your tests can detect these changes\n\nhttps://pitest.org/\n\n\nMutations are automatically seeded into your code,\nthen your tests are run.\nIf your tests fail then the mutation is killed\nif your tests pass then the mutation lived\nThe quality of your tests can be gauged from the percentage of mutations killed\n\nReplace :\n\n+ with -\n&gt; with &gt;=\n‚Ä¶"
  },
  {
    "objectID": "doc/cours/spring-slides.html#spring",
    "href": "doc/cours/spring-slides.html#spring",
    "title": "Spring",
    "section": "Spring",
    "text": "Spring"
  },
  {
    "objectID": "doc/cours/spring-slides.html#annotations",
    "href": "doc/cours/spring-slides.html#annotations",
    "title": "Spring",
    "section": "Annotations",
    "text": "Annotations"
  },
  {
    "objectID": "doc/cours/spring-slides.html#layers",
    "href": "doc/cours/spring-slides.html#layers",
    "title": "Spring",
    "section": "Layers",
    "text": "Layers"
  },
  {
    "objectID": "doc/cours/spring-slides.html#spring-boot",
    "href": "doc/cours/spring-slides.html#spring-boot",
    "title": "Spring",
    "section": "Spring Boot",
    "text": "Spring Boot"
  },
  {
    "objectID": "doc/cours/spring-slides.html#properties",
    "href": "doc/cours/spring-slides.html#properties",
    "title": "Spring",
    "section": "Properties",
    "text": "Properties\n\n\nold: application.properties\nnew: yaml"
  },
  {
    "objectID": "doc/cours/spring-slides.html#data-mapping",
    "href": "doc/cours/spring-slides.html#data-mapping",
    "title": "Spring",
    "section": "Data Mapping",
    "text": "Data Mapping"
  },
  {
    "objectID": "doc/cours/spring-slides.html#repository",
    "href": "doc/cours/spring-slides.html#repository",
    "title": "Spring",
    "section": "Repository",
    "text": "Repository"
  },
  {
    "objectID": "doc/cours/spring-slides.html#controller",
    "href": "doc/cours/spring-slides.html#controller",
    "title": "Spring",
    "section": "Controller",
    "text": "Controller"
  },
  {
    "objectID": "doc/cours/spring-slides.html#api-with-spring-boot",
    "href": "doc/cours/spring-slides.html#api-with-spring-boot",
    "title": "Spring",
    "section": "API with Spring Boot",
    "text": "API with Spring Boot\nhttps://openclassrooms.com/fr/courses/6900101-creez-une-application-java-avec-spring-boot"
  },
  {
    "objectID": "doc/cours/spring-slides.html#run-application",
    "href": "doc/cours/spring-slides.html#run-application",
    "title": "Spring",
    "section": "Run application",
    "text": "Run application"
  },
  {
    "objectID": "doc/cours/spring.html",
    "href": "doc/cours/spring.html",
    "title": "Spring",
    "section": "",
    "text": "üöß"
  },
  {
    "objectID": "doc/cours/spring.html#spring",
    "href": "doc/cours/spring.html#spring",
    "title": "Spring",
    "section": "Spring",
    "text": "Spring\n\nSpring Framework\n\nOpen-source, lightweight framework\nSimplifies Java development\nLoosely coupled components\nPromotes good design practices\nMakes integration with other systems seamless\n\n\n\nimproving:\n\nmaintainability,\ntestability.\nflexibility\n\n\n\n\n\nModules\n\nSpring MVC: to build web applications\nSpring Security: authentication, authorization‚Ä¶\nSpring Data: simplifies database access\nSpring Batch: handling large-scale batch processing\n\n\n\nKey features\n\nInversion of Control (IoC)\nDependency Injection (DI)\nAspect-Oriented Programming (AOP)\n\n\n\nIoc\n\ncontrol flow of a program is inverted\nReduces the dependencies between components\nmaking the codebase more modular\nPromotes loose coupling\n\nAOP: A module that encapsulates cross-cutting functionality\n\nWrapper for log, security\n\n\n\n\n\nManually creating dependency\n\n\nBread.java\n\npublic class Bread {\n    private boolean isToasted;\n\n    public void toast(){\n        this.isToasted = true;\n    }\n}\n\n\n\n\nSandwich.java\n\npublic class Sandwich {\n    private Bread bread;\n    private ArrayList&lt;String&gt; ingredients;\n\n    public Sandwich(Bread bread) {\n        this.bread = bread;\n    }\n}\n\n\n\nCreate a Bread object\nCreate the sandwich object\n\n\nBread bread = new Bread();\nSandwich sandwich = new Sandwich(bread);\n\n\nDependency Injection\n\n\nBread.java\n\n@Component\npublic class Bread {\n    private boolean isToasted;\n\n    public void toast(){\n        this.isToasted = true;\n    }\n}\n\n\n\n\nSandwich.java\n\npublic class Sandwich {\n    @Autowired\n    private Bread bread;\n    \n    private ArrayList&lt;String&gt; ingredients;\n}\n\n\n\nhttps://www.baeldung.com/spring-bean\n\n\n\n\nWhat happens now?\n\nSpring scans @Component classes\nIt automatically creates and injects a Bread instance into Sandwich\nThe @Autowired annotation tells Spring to resolve and inject the dependency\nComponent subclasses: @Service, @Repository, @Controller\n\n\n\nComponent: Bean\n\n\n\n\nBean principles\n\nNo args constructor\nManaged by the Spring IoC container\nScope (Singleton, Prototype)\nLifecycle (creation, usage, destruction)\n\n\n\nNoArgs: allows Spring to create the bean instance without having to worry about the parameters\nPrototype: new instance when called"
  },
  {
    "objectID": "doc/cours/spring.html#annotations",
    "href": "doc/cours/spring.html#annotations",
    "title": "Spring",
    "section": "Annotations",
    "text": "Annotations\n\nWhat is Annotation?\n\nPreceded by an @\nAssigns extra metadata\nModify or examine behavior\nHeavily used in Spring\n\n\n\nApplied to class, method, interface, attribute\nUse for:\n\ndocumentation (Override, Deprecated)\nConfig\nRuntime processing\n\nPossible to create your own\n\n\n\n\nLombok\n\nJava library\nReduce boilerplate\nCleaner and more readable code\nhttps://projectlombok.org/\n\n\n\nIsalnd of Indonesia: Lombok, Java\nboilerplate: repetitive code\n\n\n\n\nLombok Annotations\nAuto-generates:\n\n@Getter and @Setter\n@AllArgsConstructor\n@NoArgsConstructor\n\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@AllArgsConstructor\n@Getter\npublic class Book {\n    private String title;\n\n    @Setter\n    private String author;\n}"
  },
  {
    "objectID": "doc/cours/spring.html#layers",
    "href": "doc/cours/spring.html#layers",
    "title": "Spring",
    "section": "Layers",
    "text": "Layers\n\nReminder\n\nController: API\nService: Business Logic\nRepository: Data Access Object\nModel: Entities\n\n\n\nController:\n\nHandles incoming HTTP requests from the client\nProcesses the request and sends a response\n\nRepository: CRUD\nentities (business_objects):\n\nMaps to tables in the database using JPA/Spring Data\nJPA: Java Persistence API\n\n\n\n\n\n\n\n\n\nWorkflow\n\nA client sends an HTTPS request\nThe request is received by the Controller\nIf needed, the Controller calls the Service Layer\nThe Service Layer executes the business logic and interacts with the Repository Layer to perform data operations\nThe Repository Layer retrieves or modifies data in the database using JPA\nThe response is sent back to the client\n\n\n\n\nSequence diagram\n\n\n\n\n\nsequenceDiagram\n    participant Client\n    participant Controller\n    participant Service\n    participant Repository\n    participant Database\n\n    Client-&gt;&gt;Controller: GET /books?title=Java\n    Controller-&gt;&gt;Service: getBookByTitle(\"Java\")\n    Service-&gt;&gt;Repository: findByTitle(\"Java\")\n    Repository-&gt;&gt;Database: SELECT * FROM books WHERE title=\"Java\"\n    Database--&gt;&gt;Repository: Returns book data\n    Repository--&gt;&gt;Service: Returns Book entity\n    Service--&gt;&gt;Controller: Returns Book DTO\n    Controller--&gt;&gt;Client: HTTP 200 OK (Book JSON)\n\n\n\n\n\n\n\n\n\nHTTP status codes\n\n\n\n\n\n\n\n\nHTTP Status Code\nDescription\n\n\n\n\n200 OK\nThe request was successful.\n\n\n400 Bad Request\nThe server could not understand the request due to invalid syntax.\n\n\n401 Unauthorized\nAuthentication is required, and the client should authenticate itself.\n\n\n403 Forbidden\nThe client does not have access rights to the content.\n\n\n404 Not Found\nThe server can not find the requested resource.\n\n\n500 Internal Server Error\nThe server encountered an unexpected condition that prevented it from fulfilling the request.\n\n\n501 Not Implemented\nThe server does not support the functionality required to fulfill the request.\n\n\n502 Bad Gateway\nThe server received an invalid response from the upstream server.\n\n\n503 Service Unavailable\nThe server is not ready to handle the request.\n\n\n\n\n\n\nClient side: The problem is with your device or browser.\nServer side: The problem is with the website you are trying to use."
  },
  {
    "objectID": "doc/cours/spring.html#spring-boot",
    "href": "doc/cours/spring.html#spring-boot",
    "title": "Spring",
    "section": "Spring Boot",
    "text": "Spring Boot\n\nWhy use Spring Boot?\n\nIncludes all Spring features\nSimplify configuration\nAllows developers to focus on business logic\nQuick development of production-ready applications\nOptimisation of dependency management\n\n\n\nFeatures\n\nAuto-Configuration\nCreat REST APIs is easy\nEmbedded Tomcat Server\n\n\n\nStarters\nDependencies:\n\nspring-boot-starter-core\nspring-boot-starter-data-jpa\nspring-boot-starter-test\nspring-boot-starter-web\n\n\n\nCreate a project\n\nhttps://start.spring.io/\nGenerate a zip\n\nproject tree\npom with selected dependencies"
  },
  {
    "objectID": "doc/cours/spring.html#properties",
    "href": "doc/cours/spring.html#properties",
    "title": "Spring",
    "section": "Properties",
    "text": "Properties\n\n\nold: application.properties\nnew: yaml\n\n\n\napplication.yml\nserver:\n  port: 9000\n\nspring:\n  application:\n    name: running\n  datasource:\n    driver-class-name: org.h2.Driver\n    url: jdbc:h2:mem:bootapp;DB_CLOSE_DELAY=-1\n    username: sa\n    password: password\n\nlogging:\n  level:\n    root: ERROR\n    fr:\n      ensai: INFO\n    org:\n      springframework:\n        boot:\n          web:\n            embedded:\n              tomcat: INFO\n\n\nLike python .env\nPort\nDatabase connection\nLog setup\nLet‚Äôs talk about YAML\n\n\n\n\nYAML\n\nYAML Ain‚Äôt Markup Language\nText format\nIndentation-based syntax\nEasily readable by humans\n\n\n\nrecursive acronym\n\n\n\n\nYAML Strucure\n\nKey-Value pairs\nindentation: 2 spaces\n\nRequired\nYAML Lint to validate\n\nCASE sensitive\n\n\n\ntext values: facultatives quotes\nspaces: no tabs\n\n\n\n\nYAML Examples\nperson:\n  name: Charlotte         # str\n  city: \"Amiens\"          # str\n  age: 25                 # int\n  height: 1.70            # float\n  student: false          # bool\n  birth_date: 1990-05-15  # date\n\nhobbies: \n  - chess\n  - hiking\n  - landart\n\nMore about YAML\nhttps://quickref.me/yaml.html\n\n\n\ndict\nlist\n\nother syntax: hobbies: [\"chess\", \"hiking\", \"landart\"]"
  },
  {
    "objectID": "doc/cours/spring.html#data-mapping",
    "href": "doc/cours/spring.html#data-mapping",
    "title": "Spring",
    "section": "Data Mapping",
    "text": "Data Mapping\n\n\nWhy is it usefull?\n\nFacilitates interaction between Java objects and database tables\nensure accurate data transfer between layers, databases\nObject-Relational Mapping (ORM)\n\n\n\nSQLAlchemy in Python\nIt was forbidden in IT Project\n\n\n\n\nDatabase side\nCREATE TABLE user (\n    lastname     VARCHAR(255),\n    firstname    VARCHAR(255),\n    birth_date   DATE,\n    gender       VARCHAR(10)\n);\n\n\nJava class\npublic class User {\n    private String lastName;\n    private String firstName;\n    private LocalDate birthDate;\n    private String gender;\n\n\nHibernate\n\nSimplify data interactions with relational databases\nMaps Java classes to database tables\nProvides database independence\nGenerates SQL queries for CRUD operations\n\n\n\ninluded via spring-boot-starter-data-jpa\nJPA: Java Persistence API\nthe default JPA implementation is Hibernate\n\n\n\n\nEntity Bean\n@Entity\n@Table(name = \"user\")\npublic class User {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.SEQUENCE)\n    private Long id;\n\n    @Column(name = \"lastname\")\n    private String lastName;\n\n    @Column(name = \"firstname\")\n    private String firstName;\n\n    @Column(name = \"birth_date\")\n    private LocalDate birthDate;\n\n    @Column(name = \"gender\")\n    private String gender;\n}\n\nMapping\n\n@Table(name = \"user\"): no need if same names\n@Column(name = \"lastname\"): no need if same names\n@Id marks the id field as the primary key of the entity\n\nMapping is done, now let‚Äôs transfert data"
  },
  {
    "objectID": "doc/cours/spring.html#repository",
    "href": "doc/cours/spring.html#repository",
    "title": "Spring",
    "section": "Repository",
    "text": "Repository\n\nA basic DAO\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface UserRepository extends JpaRepository&lt;User, Long&gt; {\n}\n\n\nThat‚Äôs all!\nAll CRUD methods are available\nNo need to implement the code\nTODO explain JpaRepository\n\n\n\n\nBasic methods\nMethods included automatically without having to implement them:\n\nsave(Entity e)\nfindById(Long id)\nfindAll()\ncount()\ndelete(Entity e)\n\n\n\nSave: INSERT or UPDATE\n\n\n\n\nNative SQL Query\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\nimport java.util.List;\n\n@Repository\npublic interface UserRepository extends JpaRepository&lt;User, Long&gt; {\n\n    @Query(value = \"\"\"\n        SELECT * \n        FROM user u \n        WHERE u.last_name = :lastName\n    \"\"\", nativeQuery = true)\n    List&lt;User&gt; findByLastNameNative(@Param(\"lastName\") String lastName);\n}\n\n\nJPQL\n\nJava Persistence Query Language\nMethod name ‚û°Ô∏è Query\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface UserRepository extends JpaRepository&lt;User, Long&gt; {\n    List&lt;User&gt; findByGenderOrderByFirstNameDesc(String gender);\n}\n\n\nNo need to implement the code\nThe method name is enought\nhttps://docs.spring.io/spring-data/jpa/reference/jpa/query-methods.html#jpa.query-methods.query-creation"
  },
  {
    "objectID": "doc/cours/spring.html#controller",
    "href": "doc/cours/spring.html#controller",
    "title": "Spring",
    "section": "Controller",
    "text": "Controller\n\nAPI Rest\n\n\nEndpoints"
  },
  {
    "objectID": "doc/cours/spring.html#api-with-spring-boot",
    "href": "doc/cours/spring.html#api-with-spring-boot",
    "title": "Spring",
    "section": "API with Spring Boot",
    "text": "API with Spring Boot\nhttps://openclassrooms.com/fr/courses/6900101-creez-une-application-java-avec-spring-boot"
  },
  {
    "objectID": "doc/cours/spring.html#run-application",
    "href": "doc/cours/spring.html#run-application",
    "title": "Spring",
    "section": "Run application",
    "text": "Run application\n\nMain\n\n\nApplication.java\n\n@SpringBootApplication\npublic class Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n\n\n\nMain method simply running the application"
  },
  {
    "objectID": "doc/tp/tp2.html",
    "href": "doc/tp/tp2.html",
    "title": "Java - TP2",
    "section": "",
    "text": "Object-oriented programming (OOP)\nJava project structure\nIntroduction to Maven\nUnit tests with JUnit"
  },
  {
    "objectID": "doc/tp/tp2.html#objectives",
    "href": "doc/tp/tp2.html#objectives",
    "title": "Java - TP2",
    "section": "",
    "text": "Object-oriented programming (OOP)\nJava project structure\nIntroduction to Maven\nUnit tests with JUnit"
  },
  {
    "objectID": "doc/tp/tp2.html#before-you-start",
    "href": "doc/tp/tp2.html#before-you-start",
    "title": "Java - TP2",
    "section": "1 Before you start",
    "text": "1 Before you start\nWhen you‚Äôve finished, don‚Äôt forget to delete your service.\nAfter each part, create a commit and push your code to the remote repository.\n\n1.1 Launch service VSCode Java\n\nLaunch the service VScode-Java using this link.\n\n\n\n1.2 Update your repo\n\n\n\n\n\n\nif you haven‚Äôt done TP1 using your account\n\n\n\n\n\nFollow the instructions in the introduction to TP1.\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nDuring the first tutorial, you created a fork of the ENSAI-2A-Java-TP repository, i.e.¬†you created a copy of this repository on GitHub.\nThe original repository has been updated, so you need to synchronise your fork with the latest version of the repository.\n\n\nChoose one of these two possibilities to perform it :\n\nUsing GitHub interface : sync on GitHub, and then clone on your VSCode\nManually in a terminal : clone on your VSCode, and then sync using git commands\n\n\nUsing GitHub interface (easy way)\n\nLogin to GitHub\nOpen the fork of ENSAI-2A-Java-TP, you created at the first practical\nClick on the button Sync fork\nOpen a terminal in VSCode an clone your own repo\n\n\n\nIn a terminal\n\nOpen a terminal in VSCode\nClone your repository\nPosition yourself into the repo using cd &lt;my_repo&gt;\nAdd the original repository as a remote (call it upstream)\n\ngit remote add upstream https://github.com/ludo2ne/ENSAI-2A-Java-TP.git\n\nFetch the latest changes from upstream\n\ngit fetch upstream\n\nMake sure you‚Äôre on the branch main\n\ngit checkout main\n\nMerge the changes\n\ngit merge upstream/main\n\nResolve any conflicts (if necessary)\nPush the updates to your fork\n\ngit push origin main\n\n\n\n\n\n1.3 Open Folder\nIn VSCode :\n\nFile &gt; Open Folder &gt; tp2\n\ntp2 must be the root folder in your explorer."
  },
  {
    "objectID": "doc/tp/tp2.html#compile-and-run",
    "href": "doc/tp/tp2.html#compile-and-run",
    "title": "Java - TP2",
    "section": "2 Compile and run",
    "text": "2 Compile and run\nLast time, you used the javac and java commands to compile and run your code.\nThis time, we‚Äôll be working on a Maven project, so you‚Äôll be able to use the following commands:\n\nmvn clean compile\n\nDrop target folder, Download dependencies, Compile\n\nmvn exec:java\n\nRun main method of Main class\n\nmvn test\n\nRun unit tests"
  },
  {
    "objectID": "doc/tp/tp2.html#exercice-library-management",
    "href": "doc/tp/tp2.html#exercice-library-management",
    "title": "Java - TP2",
    "section": "3 Exercice : Library management",
    "text": "3 Exercice : Library management\nThe goal of this exercise is to simulate the management of a library where students can borrow books.\nSteps :\n\nAt first two classes are provided, Author and Book\nYou also have a Main class which will be the entry point for your program (main method, compile, run)\nCreate a class representing the library (attributes, methods)\nThe application evolves: the library also offers magazines. Use OOP to upgrade your system (inheritance, abstract class)\nSet up features for loaning books and magazines\n\nAt the end of the tp, your code must implement this class diagram :\n\n\n\n\n\nclassDiagram\n    class Library {\n        -List~Item~ items\n        -List~Loan~ activeLoans\n        -List~Loan~ completedLoans\n        +addIem()\n        +displayItems()\n        +getBooksByAuthor() List~Book~\n        +loanItem() boolean\n        +renderItem() boolean\n        +findActiveLoanForItem() Loan\n        +loadBooksFromCSV()\n    }\n    \n    class Item {\n        -String title\n        -int year\n        -int pageCount\n    }\n    \n    class Book {\n        -String isbn\n        -Author author\n    }\n    \n    class Magazine {\n        -String issn\n        -String issueNumber\n    }\n\n    class Person {\n        -String name\n        -int age\n    }\n\n    class Author {\n        -String nationality\n    }\n\n    class Student {\n        -int academicYear\n        -boolean isClassDelegate\n    }\n\n    class Loan {\n        -Item item\n        -Student borrower\n        -Date startDate\n        -Date returnDate\n    }\n\n    Library  --  Item : has\n    Library  --  Loan : manages\n    Loan  --  Item : relates to\n    Loan  --  Student : borrowed by\n    Person &lt;|-- Author : extends\n    Person &lt;|-- Student : extends\n    Item &lt;|-- Magazine : extends\n    Item &lt;|-- Book : extends\n    Book  -- Author : written by\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nIn Java, it‚Äôs conventional to declare all attributes as private.\nConstructors, getter and setters don‚Äôt appear on the diagram, nor do special methods (toString, equals)\n\n\n\n\n3.1 Create the library\nThis class will represent the library and will have the following private attributes:\n\nname: A string that represents the name of the library\nbooks: A list of Books\n\nand methods:\n\na constructor\naddBook(Book book): Adds a book to the library‚Äôs collection\ndisplayBooks()\n\nprint all books of the library\nuse toString() method from Book class\nor print a message if there is no book\n\n\n\n\nCreate the Library class\nAdd the method loadBooksFromCSV()\n\ncopy the code below\nalso add needed imports at the top of the class\n\n\n\n\n\n\n\n\nloadBooksFromCSV\n\n\n\n\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.net.URL;\n\n\n    /**\n     * Loads books from a CSV file and adds them to the library.\n     * \n     * @param filePath The path to the CSV file containing book data.\n     * @throws IOException If there is an error reading the file, an\n     *                     {@link IOException} will be thrown.\n     */\n    public void loadBooksFromCSV(String filePath) {\n\n        URL url = getClass().getClassLoader().getResource(filePath);\n\n        try (BufferedReader br = new BufferedReader(new FileReader(url.getFile()))) {\n            Map&lt;String, Author&gt; authors = new HashMap&lt;&gt;();\n            String line;\n            br.readLine(); // Skip the header line\n\n            while ((line = br.readLine()) != null) {\n                String[] data = line.split(\",\");\n\n                if (data.length == 5) {\n                    String isbn = data[0].trim();\n                    String title = data[1].trim();\n                    String authorName = data[2].trim();\n                    int year = Integer.parseInt(data[3].trim());\n                    int pageCount = Integer.parseInt(data[4].trim());\n\n                    // Check if author already exists in the map\n                    Author author = authors.get(authorName);\n                    if (author == null) {\n                        author = new Author(authorName);\n                        authors.put(authorName, author);\n                        System.out.println(author.toString());\n                    }\n                    Book book = new Book(isbn, title, author, year, pageCount);\n\n                    this.addIem(book);\n                }\n            }\n        } catch (\n\n        IOException e) {\n            System.err.println(\"Error reading the file: \" + e.getMessage());\n        }\n    }\n\n\n\n\nCommit and push\n\n\n\n3.2 Load books from file\nAll operations related to the library will be handled in the main class.\nUpdate the main method of the Main class (Main.java):\n\nCreate an instance of the Library\nUse the appropriate method to load books from the file books.csv\nDisplay all books\n\n\n\n3.3 Magazine\nThe library is evolving and now includes magazines in addition to books. To accommodate this change, update your implementation while following object-oriented programming (OOP) principles\n\nIntroduce an abstract class Item that will serve as the parent for both Book and Magazine\n\nattributes: title, year, pageCount\n\nModify class Book extends Item\nCreate class Magazine extends Item\n\nattributes: issn, issueNumber\n\n\nIn the Library class, replace:\n\nAttribute books by items\nMethod displayBooks() by displayItems()\n\nIn the Main class:\n\ncreate and add two magazines to the library before calling displayItems()\n\n\n\n3.4 Loans\nThe library system now needs to support book loans for students. To achieve this, update the implementation as follows:\n\nCreate a class Student\n\nattributes: name, age, academicYear, isClassDelegate\n\nBonus: do you know of a class that has anything in common with the Student class? Implement\nCreate a class Loan\n\nattributes: student, item, startDate, returnDate (null at creation)\nmethods:\n\nsetReturnDate() to update the return date\ntoString() returning a String like ‚ÄúItem xxx borrowed by yyy.‚Äù\n\n\nUpdate the Library class adding two attributes:\n\nactiveLoans (A list of ongoing loans)\ncompletedLoans (A list of returned loans)\n\n\n\n\n3.5 Various methods\nIn the Library class create following methods:\n\nfindActiveLoanForItem(Item item) -&gt; Loan\n\nLook if the item is present in active loans\nRun unit tests\n\ngetBooksByAuthor(Author author) -&gt; ArrayList&lt;Book&gt;\n\nwrite tests\n\nloanItem(Item item, Student student) -&gt; boolean\n\nCheck if the item is available\nCreate a Loan and add it to activeLoans\n\nrenderItem(Item item) -&gt; boolean\n\nFind the Loan if exists\nAdd a return date\nMove an item from activeLoans to completedLoans\n\ndisplayActiveLoans() -&gt; void\n\nFeel free to use these methods in your main method."
  },
  {
    "objectID": "doc/tp/tp2.html#end-of-the-tp",
    "href": "doc/tp/tp2.html#end-of-the-tp",
    "title": "Java - TP2",
    "section": "4 End of the TP",
    "text": "4 End of the TP\n\nCommit and push\nRemove your service\n\n\n\n\n\n\n\nTip\n\n\n\nIf it‚Äôs too easy, you can have fun with https://adventofcode.com/"
  },
  {
    "objectID": "doc/tp/tp2.html#java-class",
    "href": "doc/tp/tp2.html#java-class",
    "title": "Java - TP2",
    "section": "5 Java class",
    "text": "5 Java class\n\n5.1 Example\n\n\nStudent.java\n\nimport java.util.ArrayList;\n\n/**\n * Represents a student\n * Attributes : name, age, and a list of notes.\n */\npublic class Student {\n    // -------------------------------------------------------\n    // Attributes\n    // -------------------------------------------------------\n    private String name;\n    private int age;\n    private ArrayList&lt;Double&gt; notes;\n\n    /**\n     * Constructs a new Student object with the given name and age.\n     * @param name The name of the student.\n     * @param age The age of the student.\n     */\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n        this.notes = new ArrayList&lt;&gt;();     // empty list\n    }\n\n    // -------------------------------------------------------\n    // Getters and Setters (to access private attributes)\n    // -------------------------------------------------------\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    /**\n     * Sets the age of the student.\n     * @param age The age to set. It should be greater than zero.\n     * @throws IllegalArgumentException if the provided age is not greater than zero.\n     */\n    public void setAge(int age) {\n        if (age &lt;= 0) {\n            throw new IllegalArgumentException(\"Age must be greater than zero.\");\n        }\n        this.age = age;\n    }\n    \n    // -------------------------------------------------------\n    // Methods\n    // -------------------------------------------------------\n\n    /**\n     * @return A string representation of the Student object.\n     */\n    @Override\n    public String toString() {\n        return \"Student(\" +\n                \"name='\" + this.name + '\\'' +\n                \", age=\" + this.age +\n                ')';\n    }\n\n    /**\n     * Adds a note to the student's list of notes.\n     * @param note The note to be added.\n     */\n    public void addNote(double note) {\n        this.notes.add(note);\n    }\n\n    /**\n     * Computes the average note of the student.\n     * @return The average note of the student.\n     * @throws ArithmeticException if there are no notes present.\n     */\n    public double computeAverage() {\n        if (this.notes.isEmpty()) {\n            throw new ArithmeticException(\"Cannot compute average. No notes available.\");\n        }\n\n        double sum = 0.0;\n        for (double note : this.notes) {\n            sum += note;\n        }\n        return sum / this.notes.size();\n    }\n\n    /**\n     * Main method\n     */\n    public static void main(String[] args) {\n        Student student = new Student(\"Eva\", 20);\n        student.addNote(17.5);\n        student.addNote(12.0);\n        student.addNote(20.0);\n        \n        System.out.println(student);\n        System.out.println(\"Average Note: \" + student.computeAverage());\n    }\n}\n\n\n\n5.2 Template\n\n\nClassName.java\n\n/**\n * Represents a ...\n */\npublic class ClassName {\n    // -------------------------------------------------------\n    // Attributes\n    // -------------------------------------------------------\n    private String attribute1;\n    private int attribute2;\n\n    /**\n     * Constructs a new ...\n     * @param parameter1 parameter1_description\n     * @param parameter2 parameter2_description\n     */\n    public ClassName(String parameter1, int parameter2) {\n        this.attribute1 = parameter1;\n        this.attribute2 = parameter2;\n    }\n\n\n    // -------------------------------------------------------\n    // Methods\n    // -------------------------------------------------------\n\n    /**\n     * No parameter, return void\n     */\n    public void print_attribute1() {\n        System.out.println(this.attribute1);\n    }\n    \n    /**\n     * Increment value of attribute2\n     * A parameter, return void\n     * @param increment increment\n     */\n    public void increment_attribute2(int increment) {\n        this.attribute2 += increment;\n    }\n    \n    /**\n     * Checks if attribute2 is odd.\n     *\n     * @return true if attribute2 is odd, false otherwise.\n     */\n    public boolean isAttribute2Odd() {\n        return attribute2 % 2 != 0;\n    }\n\n\n    /**\n     * Main method\n     */\n    public static void main(String[] args) {\n\n        ClassName c = new ClassName(\"\", 0);\n        c.increment_attribute2(5);\n        System.out.println(c.isAttribute2Odd());\n    }\n}"
  },
  {
    "objectID": "doc/tp/tp4.html",
    "href": "doc/tp/tp4.html",
    "title": "Java - TP4",
    "section": "",
    "text": "üöß"
  },
  {
    "objectID": "doc/tp/tp4.html#avant-de-commencer",
    "href": "doc/tp/tp4.html#avant-de-commencer",
    "title": "Java - TP4",
    "section": "1 Avant de commencer",
    "text": "1 Avant de commencer\n\nSur votre disque P:, cr√©ez un dossier Java,\n√† l‚Äôint√©rieur, cr√©ez un dossier TP4\nOuvrez et enregistrez le sujet\nR√©cup√©rez le d√©p√¥t sur Moodle"
  },
  {
    "objectID": "doc/tp/tp4.html#datalab",
    "href": "doc/tp/tp4.html#datalab",
    "title": "Java - TP4",
    "section": "2 Datalab",
    "text": "2 Datalab\nIl est possible de faire le TP soit sur la VM, soit sur le datalab\n\nConnectez-vous sur le datalab\nLancez le service Java avec VScode puis suivez les instructions\nDans l‚Äôexplorer √† gauche &gt; clic droit &gt; Upload\n\nChargez le fichier JavaTP4-unit-test-base\n\nOuvrez un terminal\n\nrentrez unzip JavaTP4-unit-test-base pour extraire les fichiers\n\nFile &gt; Open Folder &gt; /home/onyxia/work/JavaTP4-unit-test-base/\n\n‚ö†Ô∏è important d‚Äôouvrir le bon dossier !\n\n\nRemplacez le contenu du fichier .vscode/settings.json par :\n{\n    \"java.project.sourcePaths\": [\n        \"src/main/java\",\n        \"src/test/java\"\n    ],\n    \"java.project.referencedLibraries\": [\n        \"lib/**/*.jar\"\n    ]\n}"
  },
  {
    "objectID": "doc/tp/tp4.html#vm",
    "href": "doc/tp/tp4.html#vm",
    "title": "Java - TP4",
    "section": "3 VM",
    "text": "3 VM\n\nOuvrez Visual Studio Code\nFile &gt; Open Folder\nAllez dans le dossier TP3\nUn clic sur JavaTP4-unit-test-base, ensuite S√©lectionner un dossier"
  },
  {
    "objectID": "doc/tp/tp4.html#tests-unitaires",
    "href": "doc/tp/tp4.html#tests-unitaires",
    "title": "Java - TP4",
    "section": "4 Tests unitaires",
    "text": "4 Tests unitaires\n\n4.1 Bonnes pratiques\n\nTests ind√©pendants : Chaque test devrait √™tre ind√©pendant des autres tests. Assurez-vous que l‚Äôex√©cution d‚Äôun test ne d√©pend pas du r√©sultat d‚Äôun autre test.\nClart√© et lisibilit√© : √âcrivez des noms de m√©thodes de test descriptifs pour indiquer clairement ce qui est test√©. Utilisez des noms qui d√©crivent le comportement attendu.\nIsolation des tests : Les tests doivent √™tre isol√©s, c‚Äôest-√†-dire qu‚Äôils ne doivent pas d√©pendre de l‚Äô√©tat du syst√®me, de l‚Äôordre d‚Äôex√©cution ou d‚Äôautres facteurs externes. Utilisez des mocks ou des donn√©es de test sp√©cifiques pour isoler chaque test.\nTestez les cas limites : Assurez-vous de tester les cas limites ainsi que les cas typiques. Cela inclut les valeurs nulles, les limites des boucles, les bornes d‚Äôentr√©e, etc.\nMinimisez les assertions par test : Chaque test ne devrait v√©rifier qu‚Äôune seule chose. Si un test contient plusieurs assertions, cela rendra plus difficile de comprendre quelle assertion a √©chou√© en cas d‚Äô√©chec du test.\nMise en place et nettoyage : Utilisez les m√©thodes @Before et @After pour effectuer la mise en place et le nettoyage des objets n√©cessaires pour chaque test. Assurez-vous que l‚Äô√©tat initial est correct avant chaque test.\nUtilisation de donn√©es de test significatives : Utilisez des donn√©es de test significatives et repr√©sentatives pour vos cas de test. Cela garantit que les tests couvrent des sc√©narios r√©els et non seulement les cas triviaux.\nGestion des exceptions : Testez les cas o√π des exceptions peuvent √™tre lev√©es et assurez-vous qu‚Äôelles sont g√©r√©es correctement dans vos tests.\nDocumentation des tests : √âcrivez des commentaires ou des descriptions claires pour expliquer le but de chaque test, ce qu‚Äôil teste et pourquoi c‚Äôest important.\nEx√©cution r√©guli√®re des tests : Ex√©cutez vos tests r√©guli√®rement pour vous assurer qu‚Äôils restent valides au fil du temps, en particulier apr√®s des modifications du code source.\n\n\n\n4.2 Un exemple avec JUnit\n\n\nfrac.java\n\npublic class Frac {\n\n    private int num;\n    private int denom;\n\n    public Frac(int num, int denom) {\n        this.num = num;\n        this.denom = denom;\n    }\n\n    public boolean est_valide() {\n        return denom != 0;\n    }\n\n    public float valeur_approchee() {\n        return (float) this.num / this.denom;\n    }\n\n    public Frac inverse() {\n        return new Frac(this.denom, this.num);\n    }\n\n    public Frac addition(Frac other) {\n        int newNum = this.num * other.denom + other.num * this.denom;\n        int newDenom = this.denom * other.denom;\n        return new Frac(newNum, newDenom);\n    }\n\n    public Frac multiplication(Frac other) {\n        int newNum = this.num * other.num;\n        int newDenom = this.denom * other.denom;\n        return new Frac(newNum, newDenom);\n    }\n\n    public String toString() {\n        return num + \"/\" + denom;\n    }\n}\n\n\n\nFracTest.java\n\nimport org.junit.Test;\nimport org.junit.Assert;\n\npublic class FracTest {\n\n    @Test\n    public void testEstValideOK() {\n\n        //GIVEN\n        Frac frac1 = new Frac(1, 2);\n\n        //WHEN\n        boolean res = frac1.est_valide();\n\n        //THEN\n        Assert.assertTrue(res);\n    }\n    \n    public void testEstValideEchec() {\n        Frac frac2 = new Frac(3, 0);\n        Assert.assertFalse(frac2.est_valide());\n    }\n\n    @Test\n    public void testValeurApprochee() {\n        Frac frac1 = new Frac(1, 2);\n        Assert.assertEquals(0.5, frac1.valeur_approchee(), 0.001);\n    }\n\n    @Test\n    public void testInverse() {\n        Frac frac1 = new Frac(1, 2);\n        Frac inverse1 = frac1.inverse();\n\n        Assert.assertEquals(2, inverse1.num);\n        Assert.assertEquals(1, inverse1.denom);\n    }\n\n    @Test\n    public void testAddition() {\n        Frac frac1 = new Frac(1, 2);\n        Frac frac2 = new Frac(1, 4);\n        Frac result = frac1.addition(frac2);\n\n        Assert.assertEquals(6, result.num);\n        Assert.assertEquals(8, result.denom);\n    }\n\n    @Test\n    public void testMultiplication() {\n        Frac frac1 = new Frac(1, 2);\n        Frac frac2 = new Frac(3, 4);\n        Frac result = frac1.multiplication(frac2);\n\n        Assert.assertEquals(3, result.num);\n        Assert.assertEquals(8, result.denom);\n    }\n\n    @Test\n    public void testToString() {\n        Frac frac1 = new Frac(1, 2);\n        Assert.assertEquals(\"1/2\", frac1.toString());\n    }\n}\n\n\n\n4.3 Lancer les tests manuellement\n\nOuvrir un terminal bash\nCompliler tous les tests\n\njavac -cp .:lib/*:src/test/java:src/main/java -d bin src/test/java/fr/ensai/java/tp4/core/*.java\nen ajoutant manuellement au classpath (-cp ‚Ä¶) les dossiers lib, main et test\n\nEx√©cuter une classe de tests\n\njava -cp .:bin:lib/* org.junit.runner.JUnitCore fr.ensai.java.tp4.core.LevelTest\nen ajoutant au classpath bin et lib"
  },
  {
    "objectID": "doc/tp/tp4.html#exercices",
    "href": "doc/tp/tp4.html#exercices",
    "title": "Java - TP4",
    "section": "5 Exercices",
    "text": "5 Exercices\n\n5.1 Exercice 1\nDes tests unitaires ont d√©j√† √©t√© √©crits\n\ndans VSCode √† gauche, cliquez sur l‚Äôicone en forme de fiole\n\npatientez quelques secondes le temps que VSCode trouve les tests unitaires\n\nlancez les tests en cliquant sur les 2 triangles pointants vers la droite\ncorrigez les tests (voir sujet)\n\nQuestion 2 :\n\ncr√©ez la classe de tests SpecieTest\n√©crivez les TU de la classe Specie en vous inspirant de ce qui a √©t√© fait pour Player\nM√©thodes √† tester :\n\nConstructeur de BULBZAURUS\nConstructeur de CHARMANDUS\ntoString() de BULBZAURUS : Species [number=0, name=Bulbzaurus, type=GRASS, initialHp=10, initialStrength=1]\n\n\n\n\n5.2 Exercice 2\n\ncr√©ez la classe InventoryTest et √©crivez les TU de la m√©thode add()\ncr√©ez la classe SingleUseItemTest\n\n\n\n5.3 Exercice 3\nRappels sur les interfaces :\n\ncr√©ez une Interface Coordinates contenant les m√©thodes communes\nmodifiez la classe CartesianCoordinates pour qu‚Äôelle impl√©mente cette interface\ncr√©ez la classe PolarCoordinates impl√©mentant la m√™me interface\n\nEnsuite compilez, puis ex√©cutez le main :\n\npour un terminal Bash\n\nCompilez le Main : javac -d bin -sourcepath src ./src/main/Main.java\nEx√©cutez le programme : java -cp bin main.Main\n\npour un terminal PowerShell\nCompilez le Main : javac -d bin -sourcepath src .\\src\\main\\Main.java\nEx√©cutez le programme : java -cp bin main.Main"
  }
]